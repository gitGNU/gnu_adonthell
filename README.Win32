
                       Adonthell on Win32

This file contains additional information for compiling Adonthell
under Windows for x86. For general compilation instructions refer to
the INSTALL file. Even more details are found within the NEWBIE file.


Preparations:
=============

The instructions below assume that you want to use mingw on top of
cygwin, which will produce binaries without additional dependencies
on cygwin.dll. You might find it less painfull to use plain cygwin,
in which case you should be able to substitute most of the libraries
found below with their prebuild cygwin counterparts.

Also note that many of the issues and their workarounds might be
specific to the version used below. If you resort to using different
versions, your mileage may vary.

1) Install Cygwin (http://www.cygwin.com/)
	* Download and run Setup.exe. Apart from the cygwin core packages,
	  the following tools and libraries will be required:

	    From package 'Devel' install
		  - autoconf2.5
		  - automake1.9
		  - gcc-mingw-g++
		  - gdb
		  - libtool1.5
		  - make
		  - pkg-config
		  - swig
	    From package 'Mingw' install
		  - mingw-zlib
	    From package 'Python' install
		  - python

	* Finally, add cygwin bin directory to the windows system PATH
	  (only required if you plan to use an external IDE for compiling
	  Adonthell later on)


2) Install Python for MingW
   (http://jove.prohosting.com/iwave/ipython/pyMinGW.html)
	* Download pyMinGW-bin-core-2.4.3.1.zip
	* Extract and replace corresponding files in your cygwin Python
	  installation


3) Install SDL (http://www.libsdl.org/)
	* Get source code, extract and compile/install in cygwin. This is
	  as easy as following these steps:

		$ ./configure
		$ make
		$ make install
		$ cp /usr/local/share/aclocal/sdl.m4 /usr/share/aclocal
		$ ln -s /usr/local/include/SDL /usr/local/include/SDL/SDL


4) Install Freetype2 (http://www.freetype.org/)
	* Download freetype 2.2.1 source code, extract and compile by
	  following the steps lined out below:

		$ export CC="gcc -mno-cygwin"
		$ export LDFLAGS=-mno-cygwin
	  	$ ./configure
	  	$ make

	  	Just before linking, you will run into an error. Execute
	  	the looooong line below, then run 'make' again.

		$ ./objs/apinames -o ./objs/ftexport.sym  ./include/freetype/freetype.h ./include/freetype/ftbbox.h ./include/freetype/ftbdf.h ./include/freetype/ftbitmap.h ./include/freetype/ftcache.h ./include/freetype/ftchapters.h ./include/freetype/fterrdef.h ./include/freetype/fterrors.h ./include/freetype/ftglyph.h ./include/freetype/ftgxval.h ./include/freetype/ftgzip.h ./include/freetype/ftimage.h ./include/freetype/ftincrem.h ./include/freetype/ftlist.h ./include/freetype/ftlzw.h ./include/freetype/ftmac.h ./include/freetype/ftmm.h ./include/freetype/ftmodapi.h ./include/freetype/ftmoderr.h ./include/freetype/ftotval.h ./include/freetype/ftoutln.h ./include/freetype/ftpfr.h ./include/freetype/ftrender.h ./include/freetype/ftsizes.h ./include/freetype/ftsnames.h ./include/freetype/ftstroke.h ./include/freetype/ftsynth.h ./include/freetype/ftsystem.h ./include/freetype/fttrigon.h ./include/freetype/fttypes.h ./include/freetype/ftwinfnt.h ./include/freetype/ftxf86.h ./include/freetype/t1tables.h ./include/freetype/ttnameid.h ./include/freetype/tttables.h ./include/freetype/tttags.h ./include/freetype/ttunpat.h
		$ make install

	* Note: this does not create a freetype DLL, but we should be
	  able to live with that.


5) Install Libxml2 (http://xmlsoft.org/)
	* Download libxml-sources-2.6.26, extract and compile in cygwin by
	  following the steps below:

		$ export CC="gcc -mno-cygwin"
		$ export LDFLAGS=-mno-cygwin
		$ ./configure --without-ftp --without-http
		$ make
    	$ make install

    * Note: the resulting DLL will be named cyglibxml2-2.dll. It does
      not depend on cygwin however.


6) Install OggVorbis (http://www.xiph.org/downloads/)

	* Download libogg 1.1.3, extract and compile within cygwin:

		$ export CC="gcc -mno-cygwin"
		$ export LDFLAGS=-mno-cygwin
		$ ./configure
		$ make
		$ make install

	* Download libvorbis 1.1.2, extract and compile within cygwin:

		$ ln -s /usr/local/lib/pkgconfig /usr/lib/pkgconfig
		$ export CC="gcc -mno-cygwin"
		$ export LDFLAGS=-mno-cygwin
		$ ./configure

		Edit lib/Makefile and replace line
			libvorbisfile_la_LIBADD = libvorbis.la
		with
			libvorbisfile_la_LIBADD = -logg libvorbis.la

		$ make
		$ make install


Compiling Adonthell:
====================

After installing all the libraries and tools above, we're finally
ready to compile Adonthell.

	$ ln -s /usr/bin/less /usr/bin/more
	$ export CFLAGS=-mno-cygwin
	$ export LDFLAGS=-mno-cygwin
	$ ./autogen.sh
	$ ./configure --disable-nls --prefix=/usr/local --with-py-libs="/bin/python24.dll" --with-py-cflags="-I/usr/include/python2.4"

This should result into output similar to the following:

	Adonthell v0.3.4

	SDL ....................... : 1.2.11
	Python .................... : Manually specified
	Python debugging .......... : yes
	Freetype .................. : 9.10.3
	SWIG ...................... : 1.3.29
	Ogg music ................. : enabled
	Building API doc .......... : no
	Data directory ............ :

Before you continue with 'make', you have to execute the following
command:

	$ cd src && /usr/bin/swig -python -modern -shadow -I/usr/local/include/SDL -I/usr/include/mingw -Dmain=SDL_main -I. -I./.. -c++ -makedefault -o ./py_adonthell_wrap.cc ./py_adonthell.i

From then on, you should be able to go to your Eclipse IDE and build
Adonthell from there (see below), or just type 'make' to start the
build from cygwin.

Using Eclipse IDE for Adonthell development:
============================================

If you plan to do programming work on Adonthell and want to use a
modern IDE, Eclipse is a good choice as it works transparently with
the toolchain we set up in preparation to compile Adonthell.

To use Eclipse to develop C/C++, download and install the following:

	* Eclipse SDK 3.2
	  http://www.eclipse.org/downloads/

	* CTD Runtime 3.1
	  http://download.eclipse.org/tools/cdt/releases/callisto/dist/3.1.0/

Then follow the tutorial at [1] to import the Adonthell source code.

[1] http://download.eclipse.org/tools/cdt/docs/tutorials/import_standard_tutorial/cdt_w_std_import.htm