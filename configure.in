dnl **************************************************************
dnl Process this file with autoconf to produce a configure script.
dnl **************************************************************

AC_INIT(README)

AM_CONFIG_HEADER(header.h)
AM_INIT_AUTOMAKE(adonthell, 0.3pre1)

CFLAGS="-O6 -g -Wall"
LIBS="-lz -ldl"
DEFS=""

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_LANG_CPLUSPLUS
AC_PROG_CXXCPP
AC_PROG_MAKE_SET

dnl ********************
dnl Additional arguments
dnl ********************

AC_ARG_ENABLE(tools,
[  --enable-tools         Build the Adonthell dev tools (disabled by default)],
	tools=$enableval, tools=no)
AC_ARG_ENABLE(memleaks,
[  --enable-memleaks      Enable check for memory leaks (disabled by default)],
	memleaks=$enableval, memleaks=no)
AC_ARG_WITH(ogg,
[  --with-ogg=DIR         Set where the Ogg library is located]) 
AC_ARG_WITH(vorbis,
[  --with-vorbis=DIR      Set where the Vorbis library is located]) 


dnl **********************
dnl Check for memory leaks
dnl **********************

if test x$memleaks = xyes; then
    DEFS="$DEFS -DMEMORY_LEAKS"
fi

dnl ********************
dnl Check for libraries.
dnl ********************

AC_CHECK_LIB(pthread, main,, echo "Adonthell requires Pthreads library.  Exitting..."; exit 1)
AC_CHECK_LIB(z, main,,echo "Adonthell requires Zlib. Exitting...";exit 1)

dnl Check for SDL
SDL_VERSION=1.0.1
AM_PATH_SDL($SDL_VERSION,
            :,
	    AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)


dnl**********************************************
dnl SDL 1.1.5+ uses 255 for opaque instead of 0
dnl**********************************************

if test "$SDL_CONFIG" != "no" ; then
    AC_MSG_CHECKING(whether to reverse alpha)
    sdl_major_version=`$SDL_CONFIG $sdl_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\1/'`
    sdl_minor_version=`$SDL_CONFIG $sdl_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\2/'`
    sdl_micro_version=`$SDL_CONFIG $sdl_config_args --version | \
           sed 's/\([[0-9]]*\).\([[0-9]]*\).\([[0-9]]*\)/\3/'`
    if test $sdl_minor_version -ge 1 && 
       test $sdl_micro_version -ge 5 ; then
        AC_MSG_RESULT(yes) 
        SDL_DEFS="-DREVERSE_ALPHA"
    else
        AC_MSG_RESULT(no)
    fi
fi


dnl********************
dnl Check for SDL Mixer
dnl********************

AM_PATH_SDL_MIXER()


dnl********************
dnl Check for OggVorbis
dnl********************

OGG_VORBIS=no
if test x$SDL_MIXER = xyes; then
	audio="enabled"
    AM_PATH_VORBIS(
      OGG_VORBIS="yes"
      ogg_music="enabled"
      OGG_LIBS="$VORBIS_LIBS $VORBISFILE_LIBS"
      OGG_DEFS="-DOGG_VORBIS"
      OGG_CFLAGS="$VORBIS_CFLAGS",
      AC_MSG_RESULT(Disabling OggVorbis support)
      ogg_music="disabled")
else
	audio="disabled"	
fi


dnl ********************
dnl Check for Python. 
dnl ********************

AM_PATH_PYTHON()

dnl Find Python executable
AC_PATH_PROGS(PYPACKAGE, python)

dnl Extract the version using Python, check against 1.5+

changequote(<<, >>)
PYTHON_VERSION=`$PYPACKAGE -c 'import sys ; print (int(sys.version[0]) * 10 + int(sys.version[2]))'`
PY_VERSION=`$PYPACKAGE -c 'import sys ; print sys.version[0:3]'`
changequote([, ])

if test $PYTHON_VERSION -lt 15; then
	echo "Sorry, you need to have Python 1.5+ installed - update your version!"
	AC_MSG_ERROR([Python 1.5 or better required])
fi

dnl Some Python packages are broken

AC_MSG_CHECKING(whether Python is sane) 
PY_RANDVAL=`$PYPACKAGE -c 'import random; print random.randint (1,1);'`
if test $PY_RANDVAL -eq 1; then
	AC_MSG_RESULT(yes)
else
	echo "Seems like your Python package is buggy:"
	echo $PY_RANDVAL
	AC_MSG_ERROR(Please get an updated copy from www.python.org)
fi

dnl Find the Python.h header file

AC_MSG_CHECKING(for Python header files)
changequote(<<, >>)
PYINCLUDE=`$PYPACKAGE -c 'import sys ; print "%s/include/python%s" % (sys.prefix, sys.version[:3])'`
changequote([, ])

if test -r "$PYINCLUDE/Python.h"; then
   PY_CFLAGS="-I$PYINCLUDE"
else
   AC_MSG_ERROR([Could not find Python.h in $PYINCLUDE])
fi
AC_MSG_RESULT(found)


dnl Find the Python library

AC_MSG_CHECKING(for Python library)
changequote(<<, >>)
PYLIB=`$PYPACKAGE -c 'import sys; print "%s/lib/python%s/config" % (sys.prefix, sys.version[:3])'`
PYLIBVER=`$PYPACKAGE -c 'import sys; print sys.version[:3]'`
changequote([, ])


dnl Python 2.0+ requires some additional libraries

if test $PYTHON_VERSION -ge 20; then
	PY_LIBS="$PY_LIBS -ldb -lutil"
fi

dnl Try for specific version first, then the generic version, then panic

if test -r "$PYLIB/libpython$PYLIBVER.a"; then
    PY_LIBS="-L$PYLIB -lpython$PYLIBVER $PY_LIBS"
elif test -r "$PYLIB/libpython.a"; then
    PY_LIBS="-L$PYLIB -lpython $PY_LIBS"
else
    AC_MSG_ERROR([Python library not found in $PYLIB])
fi
AC_MSG_RESULT(found)


dnl ********************************
dnl Check whether to build our tools
dnl ********************************

AC_MSG_CHECKING(whether to build the various editors)
if test x$tools = xno; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL(BUILD_TOOLS, false)
else
	AM_CONDITIONAL(BUILD_TOOLS, true)
	AC_MSG_RESULT(yes)
fi


dnl ***************************
dnl For some tools we need GTK+
dnl ***************************

if test x$tools = xyes; then
	AM_PATH_GTK(1.2.5, havegtk=yes, havegtk=no)

	if test "$havegtk" = yes; then
		AM_CONDITIONAL(HAVE_GTK, true)
	else
		AC_MSG_RESULT(disabling tools that need GTK+)
		AM_CONDITIONAL(HAVE_GTK, false)
	fi
fi


dnl  **************************
dnl  Check for required headers
dnl  **************************

AC_CHECK_HEADERS([pthread.h SDL/SDL.h zlib.h])

if test x$SDL_MIXER = xyes; then
   AC_CHECK_HEADERS([SDL/SDL_mixer.h SDL/SDL_audio.h]) 
fi 

if test x$OGG_VORBIS = xyes; then
   AC_CHECK_HEADERS([vorbis/vorbisfile.h]) 
fi 


dnl ********************************
dnl Generate our compiler arguements
dnl ********************************

CXXFLAGS="$CFLAGS $DEFS $INCLUDES"

AC_SUBST(CXX) 
AC_SUBST(CXXFLAGS) 
AC_SUBST(LIBS) 
AC_SUBST(SUBDIRS)
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_DEFS)
AC_SUBST(OGG_CFLAGS)
AC_SUBST(OGG_LIBS)
AC_SUBST(OGG_DEFS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(PY_CFLAGS)
AC_SUBST(PY_LIBS)
  
AC_OUTPUT([
Makefile
doc/Makefile
src/Makefile
src/tools/Makefile
src/tools/pydonthell/Makefile
src/tools/dlgedit/Makefile
src/tools/dlgedit/examples/Makefile
src/tools/maptools/Makefile
src/tools/questedit/Makefile
src/tools/charedit/Makefile
src/tools/oggloop/Makefile
src/tools/combat/Makefile
])


dnl ****************
dnl Configure Status
dnl ****************

echo
echo Adonthell v$VERSION
echo
echo SDL ................. : `$SDL_CONFIG --version`
echo Python .............. : $PY_VERSION
if test x$havegtk = xyes; then
echo GTK+ ................ : `gtk-config --version`
fi
echo Audio system ........ : $audio
echo Ogg music ........... : $ogg_music
echo Building editors .... : $tools
if test x$memleaks = xyes; then
echo Test for Memory Leaks : enabled
fi
echo
echo "Now type 'make' to build Adonthell"
echo "Afterwards, 'make install' will install Adonthell in $prefix/bin"
echo

