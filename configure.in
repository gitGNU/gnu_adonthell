dnl **************************************************************
dnl Process this file with autoconf to produce a configure script.
dnl **************************************************************

AC_PREREQ(2.59)
AC_INIT([Adonthell], [0.3.6])
AC_CONFIG_SRCDIR([README])
AC_CONFIG_AUX_DIR(.)

dnl Keep the correct libtool macros in-tree
AC_CONFIG_MACRO_DIR([m4])

dnl Detect the canonical host and target build environment
AC_CANONICAL_HOST
AC_CANONICAL_TARGET

AM_INIT_AUTOMAKE
AM_CONFIG_HEADER([config.h])

dnl ********************
dnl Checks for programs.
dnl ********************

AC_PROG_LN_S
AC_PROG_CXX
AC_PROG_CXXCPP
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl ****
dnl i18n
dnl ****

AM_GNU_GETTEXT([external])

dnl ********************
dnl Additional arguments
dnl ********************

AC_ARG_ENABLE(unix-install,
[  --disable-unix-install Disable a Unix-like install (enabled by default)],
	unixinst=$enableval, unixinst=yes)
AC_ARG_ENABLE(memleaks,
[  --enable-memleaks      Enable check for memory leaks (disabled by default)],
	memleaks=$enableval, memleaks=no)
AC_ARG_ENABLE(doc,
[  --enable-doc           Build the Adonthell developer documentation (disabled by default)],
	builddoc=$enableval, builddoc=no)
AC_ARG_ENABLE(py-debug,
[  --disable-py-debug     Disable debugging of Python scripts (enabled by default)],
	pydebug=$enableval, pydebug=yes)
AC_ARG_WITH(ogg,
[  --with-ogg=DIR         Set where the Ogg library is located], ogg=none) 
AC_ARG_WITH(vorbis,
[  --with-vorbis=DIR      Set where the Vorbis library is located], vorbis=none)
AC_ARG_WITH(data-dir,
[  --with-data-dir=DIR    Directory where datas will be installed],
            gamedatadir="$withval", gamedatadir=none)
AC_ARG_WITH(py-libs,
[  --with-py-libs=LIBS     Override Python libraries auto-detection],
            pylibs="$withval", pylibs=none)
AC_ARG_WITH(py-cflags,
[  --with-py-cflags=FLAGS  Override Python cflags auto-detection],
            pycflags="$withval", pycflags=none)

dnl **********************
dnl Set the data directory
dnl **********************

if test x$gamedatadir = xnone; then
  if test x$unixinst = xno; then
    gamedatadir=""
    DEFS="$DEFS -DSINGLE_DIR_INST"
    case "$target" in
      *-apple-darwin*)
	osx="yes"
        makebundle="yes"
        DEFS="$DEFS -Wno-long-double"
      ;;
    esac        
  else
    case "$target" in
      *-apple-darwin*)
	osx="yes"
        gamedatadir="${datadir}/adonthell"
        DEFS="$DEFS -DDATA_DIR=\"\\\"$gamedatadir\\\"\""
      ;;
      *-*-cygwin* | *-*-mingw32*)
        gamedatadir=""
        DEFS="$DEFS -DSINGLE_DIR_INST"
      ;;
      *-*-beos*)
        gamedatadir="/boot/home/config/share/adonthell"
        DEFS="$DEFS -DDATA_DIR=\"\\\"$gamedatadir\\\"\""
      ;;
      *)
        gamedatadir="${datadir}/adonthell"
        DEFS="$DEFS -DDATA_DIR=\"\\\"$gamedatadir\\\"\""
      ;;
    esac
  fi
else
  DEFS="$DEFS -DDATA_DIR=\"\\\"$gamedatadir\\\"\""
fi

AM_CONDITIONAL(MAKE_BUNDLE, test x$makebundle = xyes)

dnl **********************
dnl Check for memory leaks
dnl **********************

if test x$memleaks = xyes; then
    DEFS="$DEFS -DMEMORY_LEAKS"
fi

dnl ********************
dnl Check for libraries.
dnl ********************

AC_CHECK_LIB(pthread, main,
    PTHREADS=yes,
    PTHREADS=no)

AC_CHECK_LIB(z, main,,echo "Adonthell requires Zlib. Exitting...";exit 1)

dnl *************
dnl Check for SDL
dnl *************

SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION,
    :,
	AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)

AC_CHECK_LIB([SDL_mixer], 
	[Mix_OpenAudio], 
	[LIBS="$LIBS -lSDL_mixer"], 
	[AC_MSG_ERROR([*** SDL_mixer is required])]
)

AC_CHECK_LIB([SDL_ttf], 
	[TTF_Init], 
	[LIBS="$LIBS -lSDL_ttf"], 
	[AC_MSG_ERROR([*** SDL_ttfis required])]
)

dnl *******************
dnl Check for FreeType2
dnl *******************

AC_CHECK_FT2(6.0.0,
    :,
    AC_MSG_ERROR([*** Freetype version >= 6.0.0 not found!])
)

dnl *******************
dnl Check for OggVorbis
dnl *******************

OGG_VORBIS=no
XIPH_PATH_VORBIS(
        OGG_VORBIS="yes"
        ogg_music="enabled"
        OGG_LIBS="$VORBISFILE_LIBS $VORBIS_LIBS"
        OGG_DEFS="-DOGG_MUSIC"
        OGG_CFLAGS="$VORBIS_CFLAGS",
        AC_MSG_RESULT(Disabling OggVorbis support)
        ogg_music="disabled"
)

dnl ****************
dnl Check for Python
dnl ****************

dnl Find Python executable
AC_PATH_PROGS([PYTHON], [python3 python], no)
if test x$PYTHON == xno ; then
        echo "Adonthell requires Python. Exiting..."
        exit 1
fi
        
dnl Extract the version using Python, check against 2.2+

changequote(<<, >>)
PYTHON_VERSION=`$PYTHON -c 'import sys ; version=sys.version.split(" ")[0].split(".") ; print (int(version[0]) * 100 + int(version[1]) * 10 + int(version[2]))'`
PY_VERSION=`$PYTHON -c 'import sys ; print (sys.version[0:3])'`
changequote([, ])

if test $PYTHON_VERSION -lt 221; then
		echo "Sorry, you need to have Python 2.2.1 or greater installed - update your version!"
		AC_MSG_ERROR([*** Python 2.2.1 or better required])
fi

dnl Find the Python.h header file

if test "x$pycflags" = xnone; then
   AC_MSG_CHECKING(for Python header files)
   changequote(<<, >>)
   PYINCLUDE=`$PYTHON -c 'import sys ; print ("%s/include/python%s" % (sys.prefix, sys.version[:3]))'`
   changequote([, ])

   dnl convert windows paths to cygwin paths
   
    case "$target" in
    *-*-cygwin* | *-*-mingw32*)
        PYINCLUDE=`cd $PYINCLUDE && pwd`
        ;;
    esac
   
    if test -r "$PYINCLUDE/Python.h"; then
        PY_CFLAGS="-I$PYINCLUDE"
        AC_SUBST(PY_CFLAGS)
    else
        AC_MSG_ERROR([Could not find Python.h in $PYINCLUDE])
    fi
    AC_MSG_RESULT(found)
else
    PY_CFLAGS=${pycflags}
    AC_MSG_CHECKING(for Python cflags)
    AC_MSG_RESULT($PY_CFLAGS)
    AC_SUBST(PY_CFLAGS)
fi

   dnl Find the Python library

if test "x$pylibs" = xnone; then
   AC_MSG_CHECKING(for Python library)
   PYLIB=""
   changequote(<<, >>)
   PYPREFIX=`$PYTHON -c 'import sys; print (sys.prefix)'`
   PYLIBVER=`$PYTHON -c 'import sys; print (sys.version[:3])'`
   changequote([, ])

   dnl look for a framework build of python first
   fw=`echo "$PYPREFIX" | sed 's/.*\(Python\.framework\).*/\1/;'`
   if test "x$fw" != x && test "x$osx" = "xyes"; then
       PY_LIBS="-framework Python"
dnl       PY_FWDIR=`$PYTHON -c 'import distutils.sysconfig; print (distutils.sysconfig.get_python_lib())'`
dnl       PY_SPDIR="$pyexecdir"
dnl       AC_SUBST(PY_FWDIR)
dnl       AC_SUBST(PY_SPDIR)
       AC_MSG_RESULT(found)
   else
       dnl Try for specific version first, then the generic version, then panic
       PYLIB=`$PYTHON -c 'import distutils.sysconfig; print(distutils.sysconfig.get_config_var("BLDLIBRARY"))'`
       if test "x$PYLIB" != x ; then
           PY_LIBS="$PYLIB $PY_LIBS"
           AC_MSG_RESULT($PYLIB)
       else
           AC_MSG_ERROR([*** Python library not found])
       fi
       
       AC_CHECK_LIB([${PYLIB:2}], main, FOUND_PYLIB=yes, FOUND_PYLIB=no)       
       if test "$FOUND_PYLIB" == "no" ; then
       	   AC_MSG_CHECKING(for Python library location)      	   
       	   PYLIBDIR=`$PYTHON -c 'import distutils.sysconfig; print(distutils.sysconfig.get_config_var("LIBPL"))'`
	       if test "x$PYLIBDIR" != x ; then
	           PY_LIBS="-L$PYLIBDIR $PY_LIBS"
	           AC_MSG_RESULT($PYLIBDIR)
	       else
	           AC_MSG_ERROR([*** Python library location not found])
	       fi
       fi
   fi

   dnl Get the libraries that a static python library depends on
   AC_MSG_CHECKING(for Python's dependencies)

   py_extradeps=`$PYTHON -c 'import distutils.sysconfig; print (distutils.sysconfig.get_config_var("LIBS"))'`
   py_sysextradeps=`$PYTHON -c 'import distutils.sysconfig; print (distutils.sysconfig.get_config_var("SYSLIBS"))'`

   PY_DEPS="$py_extradeps $py_sysextradeps"

   AC_MSG_RESULT($PY_DEPS)

    dnl only GNU ld seems to know -E flag
    
    if $LD -v 2>&1 </dev/null | egrep '(GNU|with BFD)' 1>&5; then
        PY_LIBS="-Wl,-E $PY_LIBS $PY_DEPS"
    else
        PY_LIBS="$PY_LIBS $PY_DEPS"
    fi
    AC_SUBST(PY_LIBS)
else
    PY_LIBS=${pylibs}
    AC_MSG_CHECKING(for Python ld flags)
    AC_MSG_RESULT($PY_LIBS)
    AC_SUBST(PY_LIBS)
fi

AM_CONDITIONAL(PY_FRAMEWORK, test x$PY_SPDIR != x$PY_FWDIR)

if test "$pydebug" == "yes" ; then
	DEFS="$DEFS -DPY_DEBUG"
fi

dnl **************
dnl Check for SWIG
dnl **************

dnl SWIG >= 2.0.4 to generate code for Python 3.2 and above.

SWIG_MINVER=3.0.0
haveswig=no

AC_PATH_PROGS([SWIG], [swig3.0 swig2.0 swig], no)
if test "$SWIG" != "no" ; then
    $SWIG -version &> swig.ver

    changequote(<<, >>)
    swig_major_ver=`sed 's/.* \([0-9]*\)\.[0-9]*\.[0-9]*.*/\1/p; d' swig.ver`
    swig_minor_ver=`sed 's/.* [0-9]*\.\([0-9]*\)\.[0-9]*.*/\1/p; d' swig.ver`
    swig_micro_ver=`sed 's/.* [0-9]*\.[0-9]*\.\([0-9]*\).*/\1/p; d' swig.ver`
    changequote([, ])

    rm -f swig.ver

    SWIG_VERSION="$swig_major_ver.$swig_minor_ver.$swig_micro_ver"

    if test $swig_major_ver -gt 1 -o \
            $swig_major_ver -eq 1 -a $swig_minor_ver -gt 3 -o \
            $swig_major_ver -eq 1 -a $swig_minor_ver -eq 3 -a $swig_micro_ver -gt 19;
    then
        haveswig=yes
    fi
fi

dnl SWIG is needed to compile the code from CVS
dnl or after making changes to the distributed code

if test x$haveswig = xno ; then
    if test -d "CVS"; then
        echo "*** To compile Adonthell from CVS, you will need SWIG ${SWIG_MINVER} or higher."
        echo "*** You can obtain the most recent version from http://www.swig.org."
        exit 1;
    else
        echo "*** NOTE: If you plan to make changes to the code you will need"
        echo "*** SWIG ${SWIG_MINVER} or higher. SWIG can be found at http://www.swig.org."
    fi
fi

dnl ********************************
dnl Check whether to build our tools
dnl ********************************

AM_CONDITIONAL(BUILD_TOOLS, false)

dnl ***************************
dnl For some tools we need GTK+
dnl ***************************

AM_CONDITIONAL(HAVE_GTK, false)

dnl ****************************************
dnl Check whether to build the documentation
dnl ****************************************

AC_MSG_CHECKING(whether to build the developer documentation)
if test x$builddoc = xno; then
	AC_MSG_RESULT(no)
else
	AC_MSG_RESULT(yes)
fi

AM_CONDITIONAL(BUILD_DOC, test x$builddoc = xyes)

dnl *****************************************************
dnl Doxygen and dot are needed to build the documentation
dnl *****************************************************

if test x$builddoc = xyes; then
        AC_PATH_PROG(P_DOXYGEN,doxygen,no)
        if test x$P_DOXYGEN == xno ; then
                echo "Adonthell documentation requires doxygen. Exiting..."
                exit 1
        fi
        AC_PATH_PROG(P_DOT,dot,no)
        if test x$P_DOT == xno ; then
                echo "Adonthell documentation requires dot. Exiting..."
                exit 1
        fi
fi

dnl  **************************
dnl  Check for required headers
dnl  **************************

AC_CHECK_HEADER([SDL/SDL.h])
AC_CHECK_HEADER([SDL/SDL_mixer.h])
AC_CHECK_HEADER([SDL/SDL_ttf.h])
AC_CHECK_HEADER([zlib.h])

if test x$PTHREADS = xyes; then
   AC_CHECK_HEADER([pthread.h])
fi

if test x$OGG_VORBIS = xyes; then
   AC_CHECK_HEADER([vorbis/vorbisfile.h]) 
fi 

AM_CONDITIONAL(HAVE_OGG_VORBIS, test x$OGG_VORBIS = xyes)

dnl ********************************
dnl Generate our compiler arguements
dnl ********************************

CXXFLAGS="$CXXFLAGS $DEFS $INCLUDES"

AC_SUBST(CXX) 
AC_SUBST(CXXFLAGS) 
AC_SUBST(CPPFLAGS)
AC_SUBST(LIBS) 
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_DEFS)
AC_SUBST(OGG_CFLAGS)
AC_SUBST(OGG_LIBS)
AC_SUBST(OGG_DEFS)
AC_SUBST(PY_CFLAGS)
AC_SUBST(PY_LIBS)
AC_SUBST(SWIG)
AC_SUBST(gamedatadir)
dnl AC_SUBST(FT2_LIBS)
dnl AC_SUBST(FT2_CFLAGS)

AC_CONFIG_FILES([ 
Makefile
adonthell.spec
doc/Makefile
doc/devel/Makefile
doc/dlgedit/Makefile
doc/dlgedit-api/Makefile
doc/items/Makefile
m4/Makefile
po/Makefile.in 
src/Makefile
src/modules/Makefile
])
AC_OUTPUT

dnl ****************
dnl Configure Status
dnl ****************

echo
echo "Adonthell v$VERSION"
echo
echo "SDL ....................... : `$SDL_CONFIG --version`"
echo "Python .................... : $PY_VERSION"
echo "Python debugging .......... : $pydebug"
echo "Freetype .................. : `freetype-config --version`"
if test x$haveswig = xyes; then
echo "SWIG ...................... : $SWIG_VERSION"
fi
echo "Ogg music ................. : $ogg_music"
echo "Building API doc .......... : $builddoc"
if test x$memleaks = xyes; then
echo "Test for Memory Leaks ..... : enabled"
fi
if test x$unixinst = xno; then
    echo "Data directory ............ : Single Directory install"
else
    echo "Data directory ............ : ${gamedatadir}"
fi

echo
echo "Now type 'make' to build Adonthell"
echo "Afterwards, 'make install' will install Adonthell in $prefix/bin"
echo


