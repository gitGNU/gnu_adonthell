dnl **************************************************************
dnl Process this file with autoconf to produce a configure script.
dnl **************************************************************

AC_INIT(README)

AM_INIT_AUTOMAKE(adonthell, 0.3pre1)

CFLAGS="-g -Wall -fno-exceptions -fno-rtti"
DEFS=""

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_LANG_C
AC_PROG_CXXCPP
AM_PROG_LIBTOOL
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl ********************
dnl Additional arguments
dnl ********************

AC_ARG_ENABLE(tools,
[  --enable-tools         Build the Adonthell dev tools (disabled by default)],
	tools=$enableval, tools=no)
AC_ARG_ENABLE(memleaks,
[  --enable-memleaks      Enable check for memory leaks (disabled by default)],
	memleaks=$enableval, memleaks=no)
AC_ARG_ENABLE(doc,
[  --enable-doc           Build the Adonthell developer documentation (disabled by default)],
	builddoc=$enableval, builddoc=no)
AC_ARG_ENABLE(py-debug,
[  --enable-py-debug      Enable debugging of Python scripts (disabled by default)],
	pydebug=$enableval, pydebug=no)
AC_ARG_WITH(ogg,
[  --with-ogg=DIR         Set where the Ogg library is located]) 
AC_ARG_WITH(vorbis,
[  --with-vorbis=DIR      Set where the Vorbis library is located])
AC_ARG_WITH(data-dir,
[  --with-data-dir=DIR    Directory where datas will be installed],
            gamedatadir="$withval", gamedatadir=none)


dnl **********************
dnl Set the data directory
dnl **********************
if test x$gamedatadir = xnone; then
  gamedatadir="${datadir}/adonthell"
fi
DEFS="$DEFS -DDATA_DIR=\"\\\"$gamedatadir\\\"\""


dnl **********************
dnl Check for memory leaks
dnl **********************

if test x$memleaks = xyes; then
    DEFS="$DEFS -DMEMORY_LEAKS"
fi

dnl ********************
dnl Check for libraries.
dnl ********************

AC_CHECK_LIB(pthread, main,
    PTHREADS=yes,
    PTHREADS=no)

AC_CHECK_LIB(z, main,,echo "Adonthell requires Zlib. Exitting...";exit 1)

dnl Check for SDL
SDL_VERSION=1.2.0
AM_PATH_SDL($SDL_VERSION,
            :,
	    AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!])
)


dnl********************
dnl Check for OggVorbis
dnl********************

OGG_VORBIS=no
AM_PATH_VORBIS(
  OGG_VORBIS="yes"
  ogg_music="enabled"
  OGG_LIBS="$VORBIS_LIBS $VORBISFILE_LIBS"
  OGG_DEFS="-DOGG_MUSIC"
  OGG_CFLAGS="$VORBIS_CFLAGS",
  AC_MSG_RESULT(Disabling OggVorbis support)
  ogg_music="disabled")


dnl ********************
dnl Check for Python. 
dnl ********************

AM_PATH_PYTHON()

dnl Find Python executable
AC_PATH_PROGS(PYPACKAGE, python)

dnl Extract the version using Python, check against 1.5+

changequote(<<, >>)
PYTHON_VERSION=`$PYPACKAGE -c 'import sys ; print (int(sys.version[0]) * 10 + int(sys.version[2]))'`
PY_VERSION=`$PYPACKAGE -c 'import sys ; print sys.version[0:3]'`
changequote([, ])

if test $PYTHON_VERSION -lt 15; then
	echo "Sorry, you need to have Python 1.5+ installed - update your version!"
	AC_MSG_ERROR([Python 1.5 or better required])
fi

dnl Find the Python.h header file

AC_MSG_CHECKING(for Python header files)
changequote(<<, >>)
PYINCLUDE=`$PYPACKAGE -c 'import sys ; print "%s/include/python%s" % (sys.prefix, sys.version[:3])'`
changequote([, ])

if test -r "$PYINCLUDE/Python.h"; then
   PY_CFLAGS="-I$PYINCLUDE"
else
   AC_MSG_ERROR([Could not find Python.h in $PYINCLUDE])
fi
AC_MSG_RESULT(found)


dnl Find the Python library

AC_MSG_CHECKING(for Python library)
changequote(<<, >>)
PYLIB=`$PYPACKAGE -c 'import sys; print "%s/lib/python%s/config" % (sys.prefix, sys.version[:3])'`
PYLIBVER=`$PYPACKAGE -c 'import sys; print sys.version[:3]'`
changequote([, ])


dnl Try for specific version first, then the generic version, then panic

if test -r "$PYLIB/libpython$PYLIBVER.a"; then
    PY_LIBS="-L$PYLIB -lpython$PYLIBVER $PY_LIBS"
elif test -r "$PYLIB/libpython.a"; then
    PY_LIBS="-L$PYLIB -lpython $PY_LIBS"
else
    AC_MSG_ERROR([Python library not found in $PYLIB])
fi
AC_MSG_RESULT(found)


dnl Get the libraries that python depends on

AC_MSG_CHECKING(for Python's dependencies)

changequote(<<, >>)
py_deps=`ldd $PYPACKAGE | sed 's/\( *lib\([^\/]*\)\.so.*=.*$\)/-l\2/p; d'`
for py_lib in $py_deps ; do
    if test "$py_lib" != "-lm" && test "$py_lib" != "-lc" ; then
        PY_DEPS="$PY_DEPS $py_lib"
    fi
done
changequote([, ])

AC_MSG_RESULT($PY_DEPS)

PY_LIBS="-Wl,-E $PY_LIBS $PY_DEPS"


dnl See whether we should enable python debugging

AC_MSG_CHECKING(whether to enable Python debugging)
if test x$pydebug = xno; then
	AC_MSG_RESULT(no)
else
    PY_CFLAGS="$PY_CFLAGS -DPY_DEBUG"
	AC_MSG_RESULT(yes)
fi



dnl ********************************
dnl Check whether to build our tools
dnl ********************************

AC_MSG_CHECKING(whether to build the various editors)
if test x$tools = xno; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL(BUILD_TOOLS, false)
else
	AM_CONDITIONAL(BUILD_TOOLS, true)
	AC_MSG_RESULT(yes)
fi


dnl ***************************
dnl For some tools we need GTK+
dnl ***************************

if test x$tools = xyes; then
	AM_PATH_GTK(1.2.5, havegtk=yes, havegtk=no)

	if test "$havegtk" = yes; then
		AM_CONDITIONAL(HAVE_GTK, true)
	else
		AC_MSG_RESULT(disabling tools that need GTK+)
		AM_CONDITIONAL(HAVE_GTK, false)
	fi
fi

dnl ****************************************
dnl Check whether to build the documentation
dnl ****************************************

AC_MSG_CHECKING(whether to build the developer documentation)
if test x$builddoc = xno; then
	AC_MSG_RESULT(no)
	AM_CONDITIONAL(BUILD_DOC, false)
else
	AM_CONDITIONAL(BUILD_DOC, true)
	AC_MSG_RESULT(yes)
fi

dnl *****************************************************
dnl Doxygen and dot are needed to build the documentation
dnl *****************************************************

if test x$builddoc = xyes; then
        AC_PATH_PROG(P_DOXYGEN,doxygen)
        if test x$P_DOXYGEN == x ; then
                echo "Adonthell documentation requires doxygen. Exiting..."
                exit 1
        fi
        AC_PATH_PROG(P_DOT,dot)
        if test x$P_DOT == x ; then
                echo "Adonthell documentation requires dot. Exiting..."
                exit 1
        fi
fi        

dnl  **************************
dnl  Check for required headers
dnl  **************************

AC_CHECK_HEADERS([SDL/SDL.h zlib.h])

if test x$PTHREADS = xyes; then
   AC_CHECK_HEADERS([pthread.h])
fi

if test x$OGG_VORBIS = xyes; then
   AC_CHECK_HEADERS([vorbis/vorbisfile.h]) 
   AM_CONDITIONAL(HAVE_OGG_VORBIS, true)
else
   AM_CONDITIONAL(HAVE_OGG_VORBIS, false)
fi 


dnl ********************************
dnl Generate our compiler arguements
dnl ********************************

CXXFLAGS="$CFLAGS $DEFS $INCLUDES"

AC_SUBST(CXX) 
AC_SUBST(CXXFLAGS) 
AC_SUBST(LIBS) 
AC_SUBST(SDL_CFLAGS)
AC_SUBST(SDL_LIBS)
AC_SUBST(SDL_DEFS)
AC_SUBST(OGG_CFLAGS)
AC_SUBST(OGG_LIBS)
AC_SUBST(OGG_DEFS)
AC_SUBST(GTK_CFLAGS)
AC_SUBST(GTK_LIBS)
AC_SUBST(PY_CFLAGS)
AC_SUBST(PY_LIBS)
AC_SUBST(gamedatadir)
  
AC_OUTPUT([
Makefile
doc/Makefile
doc/dlgedit/Makefile
src/Makefile
src/tools/Makefile
src/tools/charedit/Makefile
src/tools/dlgedit/Makefile
src/tools/dlgedit/examples/Makefile
dnl src/tools/fontedit/Makefile
dnl src/tools/maptools/Makefile
src/tools/questedit/Makefile
src/tools/oggloop/Makefile
src/tools/pydonthell/Makefile
])


dnl ****************
dnl Configure Status
dnl ****************

echo
echo Adonthell v$VERSION
echo
echo SDL ....................... : `$SDL_CONFIG --version`
echo Python .................... : $PY_VERSION
echo Python debugging .......... : $pydebug
if test x$havegtk = xyes; then
echo GTK+ ...................... : `gtk-config --version`
fi
echo Ogg music ................. : $ogg_music
echo Building editors .......... : $tools
echo Building API doc .......... : $builddoc
if test x$memleaks = xyes; then
echo Test for Memory Leaks : enabled
fi
echo
echo "Now type 'make' to build Adonthell"
echo "Afterwards, 'make install' will install Adonthell in $prefix/bin"
echo


