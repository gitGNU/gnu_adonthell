

VENNIN Joël

Windows System

1 Objects types

There are for the moment 5 object types:

win_base: Is the base object, i.e all other objects inherit from
  it.

win_label: Used to display some text.

win_write: Allow user to write text in real time (input method).

win_image: Allow to display an image.

win_container: This object is an ``object container'', i.e. it's
  possible and even necessary to create containers to use all the
  features of the different objects. Into a container you can place
  others win_label, win_image, etc... Even others win_container.

win_select: Selection object, not yet usuable (soon! :))

2 gfxtree/window directory structure

This structure cannot be changed. Files and directories names must
be exactly the same for a good working of the system. A theme system
can be used which use the directory name to know which graphics to
load. The default theme is the theme ``original''. A theme contains
the graphics and also information about their sizes.

2.1 Structure and file names

 Background:

* window/background/original/background.pnm

 Border:

* window/border/original/mini for small borders

* window/border/original/normal for normal size borders

The files have the same name for each theme: corner.pnm, h_border.pnm
and v_border.pnm.

 Cursor:

* window/cursor/original/cursor.pnm

Theme should be able to use different cursors.

 Font:

* window/font/original/

At the moment there is two files font.idx and font.pnm. In a near future
a font editor will allow the creation of different fonts.

 Eventual modifications:

All the paths and file names can be changed in ``win_types.h''.

3 Window System Spirit.

A large word, but you have to know that the window system has been
developped in a certain usage spirit. There are generally different
ways to add objects, but often only one is correct for your use. So
during the explanation of the system I'll ask you to use them a certain
way in order to avoid lots of errors and also our worst common ennemy,
I've named the Segfault.

4 Objects usage

4.1 win_border:

This class is designed to load all what is necessary to build a border.

 Creating a win_border

win_border * border1 = new win_border (WIN_THEME_ORIGINAL,WIN_BORDER_NORMAL_SIZE);

The first parameter is the border theme (WIN_THEME_ORIGINAL to use
the default), the second is the border's size (WIN_BORDER_MINI_SIZE
or WIN_BORDER_NORMAL_SIZE).

4.2 win_background:

This class is designed to load all what is necessary to build a background.

 Creating a win_background:

win_background * back1 = new win_background(WIN_THEME_ORIGINAL);

The parameter is the theme of the background.

4.3 win_font:

This class is designed to load all what is necessary to display text.

 Creation d'un win_font:

win_font * font1 = new win_font(WIN_THEME_ORIGINAL);

You should now guess what the parameter is for. :)

4.4 Common methods for win_label, win_write, win_image and win_container:

All these objects inherit from win_base. As a consequence, they have
common methods.

* get_x() and get_y() return their coordinates in their container.

* get_length() and get_height() return their size.

* resize(u_int16,u_int16) and move(u_int16,u_int16) allow you to move
  or resize an object. The move parameters are from the container
  the object is in.

* set_border(win_border*) and set_background(win_background*) allow
  to change the border or background of each object. If the parameter
  is NULL border or background are disabled.

* show() and hide() allow to show or hide the object.

 Les win_container:

These objects are the base for a good window system construction. Keep
in mind that all the others objects depends of the base container.
So the first created object must be a container, and all others objects
must be created from it.

 Creating the first container:

win_container * cont1=new container(10,20,60,60);

 Creating a sub-container:

win_container * cont2=cont1->add_container(20,20,20,20);

 Creation a sub-sub container:

win_container * cont3=cont2->add_container(5,5,30,40);

To update or draw ALL the objects into a container you just have to
call the update() or draw() function of this container. For exemple:

cont1->update();

cont1->draw();

Will update and draw cont1, cont2 and cont3.

 Remove an object from container:

cont1->remove(``object name'');

With this method the parameter object is destroyed, you shouldn't do
it manually.

If you delete a container, all the objects that belong to it are also
destroyed.

So for the base container, just do a delete and all it's objects will
be destroyed.

 Visualisation of a container:

container::show_all() show all the objects of a container, and container::hide_all()
hide them all.

5 win_label:

This object allow you to place labels into a container.

 Creating a win_label:

win_container * cont1 = new win_container(10,10,100,100);

win_font * font1 = new win_font(WIN_THEME_ORIGINAL);

win_label * label1 = cont1->add_label(10,10,20,20,font1);

The parameters are the coordinates(x,y) the size(w,h) and the font
to use for displaying text.

 Changing the font:

win_font * font2 = new win_font(WIN_THEME_ANOTHER);

label1->set_font(font2);

 Inserting text:

label1->set_text(``Urrkk I just hope it will work okay!'');

 Erasing text:

label1->erase_text();

 Going to next page:

label1->next_page();

This function allow to go to the next page if the text takes more place
than the label.

 Testing if the current page is the last:

label1->end_text();

6 win_write:

Their creation is the same as for win_label.

 Testing if some text has been entered:

write1->is_text();

 Getting typed text (if is_text() returns true):

char * recup;

if(write1->is_text())

        recup=strdup(write1->get_text());

You MUST use strdup() or beware the Segfault! Also don't forget to
delete recup as strdup allocates it.

7 win_image:

 Creating a win_image:

win_image * image1 = cont1->add_image(5,5,ima1);

ima1 is a pointer to an image.

 Changing image:

image1->set_image(ima2);

8 win_select:

They are working! So why doesn't I explain them? Because I'm thinking
about some conceptual problems and don't know if I have to change
them. Please be patient, they should be available soon.

9 Conclusion

Please report me bugs or problems. Have fun!
