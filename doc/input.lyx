#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2.15
\textclass article
\language default
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Title

Adonthell Input System
\layout Author

Alexandre Courbot
\layout Section

Description
\layout Standard

The input system can be accessed by including 
\emph on 
input.h
\emph default 
.
 It gives control to keyboard and mouse.
\layout Section

Basics
\layout Standard

First of all, you need to initialize the system at your program startup:
\layout LyX-Code

void input::init();
\layout Standard

Then keep in mind that the event queue has to be periodically updated.
 Just call 
\emph on 
input::update()
\emph default 
 in your main loop for example.
 If you omit it, don't hope to trap any event.
 Once you are sure it is periodically updated, you're ready for using the
 input functions.
\layout Section

Keyboard access
\layout Subsection

Keyboard modes
\layout Standard

The keyboard can be accessed by several methods, each one having a particular
 purpose.
 The functions will act differently depending of the mode.
\layout Description

MODE_STATE: This is the default mode.
 The functions will return the 
\emph on 
current
\emph default 
 state of the keyboard.
 That means that if a key is rapidly pushed then released between two 
\emph on 
input::update()
\emph default 
 you won't get it.
 On the other hand, if a key is kept pushed, the functions will return it
 as pushed for each query as long as it is pushed.
\layout LyX-Code

bool input::is_pushed(SDLKey key);
\layout Standard

Simply returns if a key is currently pushed or not.
 The SDLKey list can be found in SDL's 
\emph on 
SDL_keysym.h
\emph default 
 file.
\layout Description

MODE_PUSHED: This mode is a bit more reliable than the previous one, especially
 if you are not sure about the delay between two 
\emph on 
input::update()
\emph default 
 and don't want to lose any keypress.
 Each keystoke will be recorded and the functions will return this state:
 
\emph on 
has the key 
\emph default 
been
\emph on 
 pushed since the last query
\emph default 
? That also means that even if you keep a key pushed a long time, 
\emph on 
input::is_pushed()
\emph default 
 will only return 
\emph on 
true
\emph default 
 one time, contrary to 
\emph on 
MODE_STATE
\emph default 
 where it would return 
\emph on 
true
\emph default 
 as long as it's pushed.
\layout LyX-Code

bool input::is_pushed(SDLKey key);
\layout Standard

Returns 
\emph on 
true
\emph default 
 if 
\emph on 
key
\emph default 
 has 
\emph on 
been
\emph default 
 pushed.
\layout Description

MODE_CHAR: This mode is the most accurate if you're most interested in the
 
\emph on 
character
\emph default 
 rather than the 
\emph on 
key
\emph default 
.
 When into this mode, the keyboard acts 
\emph on 
exactly
\emph default 
 as if you were typing text in an editor or a terminal, enabling key repeat.
 This mode also takes into account your keyboad language.
\layout LyX-Code

s_int32 input::get_next_key();
\layout Standard

Get the next character that has been entered.
 This function returns -1 if no character were entered since last call,
 0 if a character has been entered but is not printable, or the UNICODE
 character that can be directly printed on the screen or used with the window
 functions.
\layout Standard

Note that 
\emph on 
input::is_pushed()
\emph default 
 can be used as well and will act as if you were in 
\emph on 
STATE
\emph default 
 mode.
 
\emph on 
input::get_next_key()
\emph default 
 can be also used in the 
\emph on 
STATE
\emph default 
 and 
\emph on 
PUSHED
\emph default 
 modes, but will return the Key Code as defined in SDLKey instead of the
 UNICODE.
 So beware.
\layout Subsection

Mode Switching
\layout LyX-Code

void input::set_keyboard_mode(u_int8 mode);
\layout LyX-Code

u_int8 input::get_keyboard_mode();
\layout Standard

Set or get the current keyboard mode.
 Arguments/return values are 
\emph on 
MODE_STATE
\emph default 
, 
\emph on 
MODE_PUSHED
\emph default 
 and 
\emph on 
MODE_CHAR
\emph default 
.
\layout Subsection

Other functions
\layout LyX-Code

void input::set_key_repeat(int delay=SDL_DEFAULT_REPEAT_DELAY, int interval=SDL_
DEFAULT_REPEAT_INTERVAL);
\layout Standard

Change the key repeat status.
 When called without arguments it will set the repeat delay to a 
\begin_inset Quotes eld
\end_inset 

standard
\begin_inset Quotes erd
\end_inset 

 value.
 When called with (0,0) as arguments it disables the keyboard repeat.
 Keyboard repeat default values are (depending of the keyboard mode):
\layout Description

MODE_STATE: Disabled.
\layout Description

MODE_PUSHED: Disabled.
\layout Description

MODE_CHAR: Enabled.
\layout LyX-Code

void input::clear_keys_queue();
\layout Standard

Clears all key strike from the event queue for the 
\emph on 
get_next_key()
\emph default 
 function.
\layout Section

Mouse access
\layout Standard

Mouse access is done by accessing the following variables:
\layout LyX-Code

u_int16 input::mouse_posx, input::mouse_posy;
\layout LyX-Code

bool input::mouse_button[3];
\layout Standard

Of course, the mouse cursor has to be enabled by calling the appropriate
 function in the 
\emph on 
video
\emph default 
 class.
\the_end
