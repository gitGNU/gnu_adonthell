#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2.15
\textclass article
\language default
\inputencoding latin1
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize Default
\paperpackage a4wide
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle default

\layout Title

The Event System
\layout Author

Kai Sterker
\layout Section

Overview
\layout Standard

The Event System is divided into three parts.
 The 
\emph on 
event handler 
\emph default 
keeps track of all registered event scripts.
 Whenever a event occurs, the event handler is notified and executes all
 scripts registered for that particular event.
 The 
\emph on 
event list
\emph default 
 keeps track of the events registered by a certain object, (e.g.
 a NPC, a maptile or item) and automatically unregisters these events when
 this object is deleted.
 Finally, there are the 
\emph on 
events
\emph default 
 themself, used both as message sent to the event handler whenever an event
 occurs and to register a event script.
 Each event has its own data structure with parameters corresponding to
 its type.
 These parameters are passed to the event script, so all infomation regarding
 a event is available from within the script.
 They further can be used to specialize the script so it reacts to a smaller
 number of events.
\layout Section

The Event Handler
\layout Standard

The event handler is implemented in the class 
\family typewriter 
event_handler
\family default 
.
 It totally consists of static members and methods, so it is easily usable
 from any part of the code.
 Just include the
\emph on 
 event.h
\emph default 
 file.
 It defines the following public methods:
\layout Paragraph


\family typewriter 
void
\protected_separator 
register_event
\protected_separator 
(event*
\protected_separator 
filter,
\protected_separator 
char*
\protected_separator 
script); 
\layout Standard
\pextra_type 1 \pextra_width 0pt

Registers a script for a certain event.
 This function parses and compiles the script into a PyCodeObject for quicker
 execution.
\layout Description
\pextra_type 1 \pextra_width 0pt

filter is a event structure with its parameters set according to the event
 that shall trigger the script.
\layout Description
\pextra_type 1 \pextra_width 0pt

script is the filename of the Python script that will be executed when the
 event occurs.
\layout Standard
\pextra_type 1 \pextra_width 0pt

For example, to register a script that is executed whenever the player arrives
 at the coordinates (20, 20), you'd write:
\layout LyX-Code
\align block 
// Create the filter and set it's parameters
\layout LyX-Code

event *filter = new enter_event;
\layout LyX-Code

filter->x = 20;
\layout LyX-Code

filter->y = 20;
\layout LyX-Code

filter->c = objects::get (
\begin_inset Quotes eld
\end_inset 

the_player
\begin_inset Quotes erd
\end_inset 

);
\layout LyX-Code


\protected_separator 

\protected_separator 

\layout LyX-Code
\align block 
// Now register the script with above filter
\layout LyX-Code

event_handler::register_event (filter, 
\begin_inset Quotes eld
\end_inset 

a_script.py
\begin_inset Quotes erd
\end_inset 

);
\layout Standard
\pextra_type 1 \pextra_width 0pt

For a list of available events with their corresponding parameters see further
 down.
\layout Paragraph


\family typewriter 
void remove_event (event* filter); 
\layout Standard
\pextra_type 1 \pextra_width 0pt

Unregister a certain script.
 As you see, you'll need to keep a pointer to the filter structure with
 which you registered the script in the first place.
 That is where the event list comes in handy: whenever it's destructor is
 called, it automatically calls 
\family typewriter 
remove_event
\family default 
 for all events stored inside its list.
\layout Description
\pextra_type 1 \pextra_width 0pt

filter Pointer to the event filter of the script you wish to unregister.
\layout Paragraph


\family typewriter 
void raise_event (event* trigger); 
\layout Standard
\pextra_type 1 \pextra_width 0pt

Has to be called whenever a event occurs.
 The event handler then compares 
\emph on 
trigger
\emph default 
 with all registered filters of the same type and executes the scripts of
 the matching ones.
 Note that only explicitly set filter-parameters are taking into account
 in that process.
\layout LyX-Code

event_handler::register_event (new enter_event, 
\begin_inset Quotes eld
\end_inset 

script.py
\begin_inset Quotes erd
\end_inset 

); 
\layout Standard
\pextra_type 1 \pextra_width 0pt

for example would register a script that matches 
\series bold 
all 
\series default 
enter_events.
 You can't have filters that match different types of events (e.g.
 
\family typewriter 
enter
\family default 
 and 
\family typewriter 
leave
\family default 
 events).
 If your script needs to react to different event types you have to register
 that script separately for each event type.
\layout Paragraph


\family typewriter 
event* load_event (FILE* file, bool register = true);
\layout Standard
\pextra_type 1 \pextra_width 0pt

Use this function to load a event previously saved with 
\family typewriter 
event::save ()
\family default 
.
 You should store the returned event in the event_list of the 
\emph on 
object
\emph default 
 that invoked the function.
 If you do so, the event will be automatically unregistered and deleted
 when the object dies.
\layout Description
\pextra_type 1 \pextra_width 0pt

file A file pointer pointing to a portion of the file that has been created
 with 
\family typewriter 
event::save ()
\family default 
 or a compatible means.
\layout Description
\pextra_type 1 \pextra_width 0pt

register Set this to false if you only want to load the event, but not register
 it.
 You still can safely store the returned event in a 
\emph on 
event_list
\emph default 
.
 The following code fragment will register the event at a later point: 
\layout LyX-Code

char* sf = new char[strlen (the_event->script_file) + 20]; 
\layout LyX-Code

strcpy (sf, "scripts/events/"); 
\layout LyX-Code

strcat (sf, the_event->script_file); 
\layout LyX-Code

strcat (sf, ".py");
\layout LyX-Code

event_handler::register_event (the_event, sf);
\layout LyX-Code

delete sf;
\layout Section

The Event List
\layout Standard

The most interesting points about the event list are already covered in
 the chapter above.
 To use the event list, simply make your class inherit from 
\family typewriter 
event_list
\family default 
.
 This adds the public member
\layout LyX-Code

vector<event*> events;
\layout Standard

to your class.
 See the standart template library (STL) documention for the functions the
 vector supports.
 The only one you'll probably ever need is 
\family typewriter 
void push_back (event*)
\family default 
 to add a new event to the end of the vector.
 The destructor of 
\emph on 
event_list
\emph default 
 automatically unregisters all events and deletes them; one thing less you
 need to care about 
\family typewriter 
:)
\family default 
.
\layout Section

The Events
\layout Standard

All event structures inherit from the class event, which has the following
 public methods and fields:
\layout Paragraph


\family typewriter 
void save (FILE* file)
\layout Standard

Use this function to save the event to disk.
 Note that the complementary 
\family typewriter 
event::load ()
\family default 
 is for internal use only.
 
\layout Standard

Use 
\family typewriter 
event_handler::load_event ()
\family default 
 to load a event instead.
 
\layout Paragraph

char *script_file
\layout Standard

This is the filename of the event script, without any path or file extension.
 All event scripts have to be placed in 
\emph on 
<data>/scripts/events
\emph default 
 for the event handler to find them.
\newline 

\layout Standard

Furthermore, each event type has it's own parameters that (a) characterize
 the event and (b) are used to specialize event filters.
 These parameters are also available to the event scripts, although they
 might use a different name (bad!) or need a bit of work to retrieve.
 In the following, I will describe all events and their parameters.
\layout Subsection

Enter
\layout Standard

The enter event is triggered whenever a character (be it player or NPC)
 arrives on a new maptile.
 It has the following parameters:
\layout Paragraph


\family typewriter 
s_int32 x
\layout Standard

The x coordinate of the tile the character just entered.
 In Python this is available as 
\family typewriter 
posx
\family default 
.
\layout Paragraph


\family typewriter 
s_int32 y
\layout Standard

The y coordinate of the tile the character just entered.
 In Python this is available as 
\family typewriter 
pos
\family default 
y.
\layout Paragraph


\family typewriter 
s_int8 dir
\layout Standard

The direction in which the character walked.
 North (3), east (1), south (4) or west (2).
 In Python, it is available as 
\family typewriter 
dir
\family default 
.
\layout Paragraph


\family typewriter 
character *c
\layout Standard

The character that triggered the event.
 For simplicity, only the character's name is passed to Python.
 It is available as 
\family typewriter 
name
\family default 
.
 The following code retrieves the actual character:
\layout LyX-Code

the_character = characters[name]
\the_end
