#LyX 1.1 created this file. For more info see http://www.lyx.org/
\lyxformat 2.15
\textclass article
\language default
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize 11
\spacing single 
\papersize Default
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Title

The Adonthell Dialogue Editor v0.6
\layout Author

Kai Sterker
\layout Section

Understanding the Dialogue Engine
\layout Standard

Before we start designing our first dialogues, it might be wise to have
 a look at the concept of the dialogue engine.
 Once you understand the basic rules, it will help you to avoid errors.
\layout Standard

A dialogue consists of a number of NPC and Player lines, arranged in a certain
 order.
 The rules for this are as follows:
\layout Enumerate

The dialogue starts with, at least, either one NPC or Player line.
\layout Enumerate

NPC lines may be followed by 0 or more Player lines.
\layout Enumerate

NPC lines may be followed by 0 or more NPC lines.
\layout Enumerate

Player lines may be followed by 0 or more NPC lines.
\layout Enumerate

The dialogue ends when no more lines follow.
\layout Standard

This results in a directed graph which later on is traversed by the dialogue
 engine according to the following rules:
\layout Enumerate

Start with those lines that have no predecessor.
\layout Enumerate

Chose randomly between multiple NPC lines.
\layout Enumerate

Let the player chose if there are multiple Player lines.
\layout Enumerate

Don't chose lines twice (can be disabled for single lines).
\layout Standard

Apart from that, there are a number of additional features that influence
 how the dialogue appears to the player:
\layout Enumerate

NPC and Player lines may be based on conditions, meaning they are only available
 if a certain condition is met.
\layout Enumerate

NPC lines can be attached to different characters, making conversations
 with/between multiple NPC's possible.
 (available soon)
\layout Standard

These 11 points cover most of the Dialogue System's functionality and should
 give you an idea what you can do with it, and what you can't.
 To get you going now, it's time for a brief tutorial.
\layout Section

An Example
\layout Standard

After the theory, something more practical now.
\layout Subsection

The Dialogue
\layout Standard

This is a very simplistic Dialogue we want to model, but you will see that
 it is sufficient to demonstrate the basic functionality of the Dialogue
 Editor.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left \LyXTable
multicol5
5 4 0 0 -1 -1 -1 -1
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
2 0 0 "" ""
2 0 0 "" ""
2 0 0 "" ""
2 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""


\shape smallcaps 
Npc
\shape default 
:
\newline 

\begin_inset Quotes eld
\end_inset 

Hello, I am Eric.
\begin_inset Quotes erd
\end_inset 


\newline 

\newline 

\newline 

\noun on 
Player
\noun default 
:
\newline 

\begin_inset Quotes eld
\end_inset 

I am Kai.
\begin_inset Quotes erd
\end_inset 

 
\newline 

\shape italic 
or
\shape default 

\newline 

\begin_inset Quotes eld
\end_inset 

Goodbye!
\begin_inset Quotes erd
\end_inset 


\newline 

\noun on 
Npc
\noun default 
:
\newline 

\begin_inset Quotes eld
\end_inset 

Nice to meet you.
\begin_inset Quotes erd
\end_inset 


\newline 

\newline 

\begin_inset Quotes eld
\end_inset 

Fare well.
\begin_inset Quotes erd
\end_inset 


\newline 

\noun on 
Player
\noun default 
:
\newline 

\begin_inset Quotes eld
\end_inset 

Goodbye!
\begin_inset Quotes erd
\end_inset 


\newline 

\newline 

\newline 
N
\noun on 
pc
\noun default 
:
\newline 

\begin_inset Quotes eld
\end_inset 

Fare well.
\begin_inset Quotes erd
\end_inset 


\newline 

\newline 

\layout Subsection

Creating the Dialogue
\layout Standard

Dialogues start with a NPC line, so that is what we add first.
 Simply left-click on the dialogue area of the Editor.
 A dialog pops up that allows you to enter the text of the node.
 As you see, NPC is the default, so simply enter the line of dialogue and
 press OK.
 What you will see when moving the cursor over the newly appeared node is
 the following:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 136 60
file step1.ps
flags 11

\end_inset 


\layout Standard

Now we add the players response.
 To do this, left-click on the circle.
 It will appear in red to signal that it is the selected node.
 Now left-click on a location a bit further down.
 Again the Text Input Window pops up, this time with Player preselected,
 just as we want it.
 Enter the Text and press OK.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 49 85
file step2.ps
flags 11

\end_inset 

 
\layout Standard

Your screen should look like this.
 The NPC node is still selected, therefore drawn red, and the Player node
 is drawn blue, to distinguish it from NPC nodes.
 The arrow between them symbolizes the flaw of the Dialogue .
\layout Standard

Since the player shall have two possible responses, we have to create another
 player node, somewhere next to the first one.
 Voila, the first two lines of the dialogue are already done.
 Now right-click on an empty spot to deselect the NPC node and then select
 the first Player node.
 You see, that it appears orange, so you know at the first glance that it
 is a selected Player node.
 Left-click somewhere below it, enter the apropriate Text, confirm with
 OK and repeat the same for the second Player node.
\layout Standard
\align center 

\begin_inset Figure size 98 137
file step3.ps
flags 11

\end_inset 


\layout Standard

If your Display shows something similar, you've done it 
\family typewriter 
:-)
\family default 
.
 Now lines 4 and 5 of the Dialogue have to follow, but, as you have already
 noticed, they are just the same as a part of the existing dialogue.
 Would be nice if we could reuse that part, eh? Well, we can.
 All we need to do is telling the Editor wich part has to follow a node.
 
\layout Standard

Okay, lets dot it: Deselect the Player node and select the bottom left NPC
 node (or the node correspondenting to that one in your work).
 Then simply left-click on the arrow that points to the Player node we want
 to follow.
 And this is the complete dialogue:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 84 131
file step4.ps
flags 11

\end_inset 


\layout Standard

The numbers inside the nodes tell how many such 
\begin_inset Quotes eld
\end_inset 

indirect
\begin_inset Quotes erd
\end_inset 

 links start at each node, and when selecting a node with indirect links,
 the apropriate arrows are colored purple.
\layout Standard

Of course we could have used a direct link as well, but in more complex
 dialogues, this technique avoids arrows criss-crossing all over the screen.
\layout Subsection

The Result
\layout Standard
\align left 
Now save and compile the Dialogue.
 You'll get a .py file, the Python dialogue script.
 In our example it should look similar to the following:
\newline 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 
class new_dialogue:
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 loop = []
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 strings = ["Hello,I'm Eric.","I am Kai.","Goodbye!","Farewell.","Nice to meet
 you.",""]
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def __init__(self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.dialogue = [self.start, self.answer2, self.answer4, None]
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def __getattr__ (self, var):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 return 0
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def run (self, answer):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc = []
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player = []
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.cont = []
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.dialogue[answer]()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def npc0 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc.append (0)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.cont.append (0)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def player2 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player.append (1)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.cont.append (1)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def player4 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player.append (2)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.cont.append (2)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def npc6 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc.append (3)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.cont.append (0)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def npc8 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc.append (4)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.cont.append (0)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def start (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc0 ()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player2 ()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player4 ()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player.append (-1)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def answer4 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc6 ()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player.append (-1)
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 
 def answer2 (self):
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.npc8 ()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player4 ()
\layout Standard
\align left 

\family typewriter 
\size footnotesize 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 

\protected_separator 
 self.player.append (-1)
\family default 
\size default 

\newline 

\protected_separator 

\layout Standard
\pagebreak_bottom 
You see, its a lot easier to use the Dialogue Editor than writing the Code
 by hand.
 Of course, if you know what you are doing, you can edit this file afterwards.
 But usually, you should do any editing in the editor only.
 For a description of the commands refer to the Python Documentation (http://www.
python.org).
 
\layout Section

The Dialogue Editor
\layout Standard

After above example you should be able to start designing Dialogues right
 away.
 But for your convenience, and because some of the advanced editor features
 are not described yet, this section contains the complete refernece guide.
 
\layout Subsection

The Main Window
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left 

\begin_inset Figure size 503 402
file dlgedit_main.ps
subcaption The Main Interface
flags 3
subfigure

\end_inset 


\layout Paragraph

1.
 The Dialogue Area
\layout Standard

This is where you create the outline of the dialogue; what lines of text
 exist and how they are linked to each other.
 Most of the work is done with the mouse, but there are also a few shortcuts
 on the keyboard and some functionality is only available through the keyboard.
\layout Standard

The actions taken when a mouse- or keypress occurs depend on the current
 selection (none, circle, arrow) and the position of the cursor.
 Below table shows all possible constellations:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left \LyXTable
multicol5
18 4 0 0 -1 -1 -1 -1
1 1 0 0
0 0 0 0
1 0 0 0
1 1 0 0
1 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
1 1 0 0
0 1 0 0
0 1 0 0
0 1 0 0
1 1 0 0
0 1 0 0
1 1 0 0
0 1 0 0
1 1 0 0
0 1 0 0
2 1 1 "" ""
8 1 1 "" ""
8 0 0 "" ""
8 1 1 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""
0 8 1 0 0 0 0 "" ""


\series bold 
Left-click
\series default 

\newline 

\emph on 
Nothing selected
\newline 
Circle selected
\newline 
Arrow selected
\emph default 

\newline 
on empty space
\newline 
Create new Circle
\newline 
Create new Circle and link both
\newline 
-
\newline 
on Circle
\newline 
Select Circle
\newline 
Link both Circles
\newline 
-
\newline 
on Arrow
\newline 
Select Arrow
\newline 
Add Arrow as indirect Link
\newline 
-
\newline 

\series bold 
Middle-click
\series default 

\newline 

\emph on 
Nothing selected
\newline 
Circle selected
\newline 
Arrow selected
\emph default 

\newline 
on empty space
\newline 
-
\newline 
Edit selected Circle
\newline 
-
\newline 
on Circle
\newline 
Select & edit Circle
\newline 
Edit selected Circle
\newline 
-
\newline 
on Arrow
\newline 
Select Arrow
\newline 
Edit selected Circle
\newline 
-
\newline 

\series bold 
Right-click
\series default 

\newline 

\emph on 
Nothing selected
\newline 
Circle selected
\newline 
Arrow selected
\emph default 

\newline 
on empty space
\newline 
-
\newline 
Deselect Circle
\newline 
Deselect Arrow
\newline 
on Circle
\newline 
-
\newline 
Deselect Circle
\newline 
Deselect Arrow
\newline 
on Arrow
\newline 
-
\newline 
Remove indirect Link
\newline 
Deselect Arrow
\newline 

\series bold 
\noun on 
Return
\series default 
\noun default 

\newline 

\emph on 
Nothing selected
\newline 
Circle selected
\newline 
Arrow selected
\emph default 

\newline 

\newline 
-
\newline 
Edit Circle
\newline 
-
\newline 

\series bold 
\noun on 
Del
\series default 
\noun default 

\newline 

\emph on 
Nothing selected
\newline 
Circle selected
\newline 
Arrow selected
\emph default 

\newline 

\newline 
-
\newline 
Delete Circle and its Links
\newline 
Delete Arrow
\newline 

\series bold 
\noun on 
Esc
\series default 
\noun default 

\newline 

\emph on 
Nothing selected
\emph default 

\newline 

\emph on 
Circle selected
\newline 
Arrow selected
\emph default 

\newline 

\newline 
-
\newline 
Deselect Circle
\newline 
Deselect Arrow
\layout Standard

Further key-commands are 
\emph on 
c
\emph default 
, which centers the view on the selected Node if it lies in the outer 20%
 of the Dialogue Area, the 
\emph on 
cursor keys
\emph default 
 and the 
\emph on 
numpad
\emph default 
 to scroll the dialogue and finally 
\emph on 
tab
\emph default 
 to select the next Node (That is, the next node in the editors internal
 data representation, not the next node on the screen!).
 Moving the mouse close to the Dialogue Areas border will also scroll the
 dialogue, and when dragging the mouse with left button pressed, you can
 select multiple Circles, for example to delete all of them at once.
\layout Paragraph

2.
 A Node with additional code
\layout Standard

An exclamation mark (!) inside a circle means that the node contains commands
 other than just a line of text.
 What commands that may be in detail is discussed in section 3.2 on page
 
\begin_inset LatexCommand \pageref{edit}

\end_inset 

.
\layout Paragraph

3.
 An indirect Link
\layout Standard

Whenever a node with indirect links is selected (5), they are hilighted
 in purple.
 Indirect links are equivalent to a normal link between it's start and end,
 but to avoid arrows criss-crossing over the whole Dialogue Area, it's often
 better to use an indirect link.
 The number inside Circles tells how many indirect links they have.
\layout Paragraph

4.
 Hilighted Node
\layout Standard

Nodes below the mousepointer appear in green to give you some feedback what
 action a click will start at this point.
\layout Paragraph

5.
 Selected Node
\layout Standard

Selected Player nodes are drawn orange, NPC nodes red.
 Furthermore, the Instant preview (8) shows their text as well as that of
 their predecessors and followers.
\layout Paragraph

6.
 Tooltip
\layout Standard

Whenever a Circle is below the mousepointer, a tooltip with its text appears
 to make it easier for you to find a certain position in the dialogue.
\layout Paragraph

7.
 Text of preceding Nodes
\layout Standard

All the different lines of text that may preceed the selected circle (5).
 The color of the entries gives some information of the type: Blue text
 denotes lines of the Player, black text lines of the NPC.
 Somewhat dimmed lines mean that the Circles are connected by indirect links
 (3).
\layout Paragraph

8.
 The Instant preview
\layout Standard

This shall give a first impression of what the Dialogue will look like in
 the game.
 Basically it displays the text of the selected circle, together with all
 preceeding and following text.
 With this you should be able to judge wether all the combinations of text
 fit well together.
 Furthermore, by clicking on a line of text, the attached Circle is selected,
 meaning you can browse through the whole dialogue.
 Note that additional code of Nodes won't be taken into account, so in the
 game, the dialogue might be slightly different.
\layout Paragraph

9.
 Text of selected node
\layout Standard

Again this is color-coded: as in the Dialogue Area (1), orange text means
 a Player line, red text a NPC line.
\layout Paragraph

10.
 Text following the selected node
\layout Standard

Text following the selected Node.
 The colors have the same meaning as in (7).
\layout Subsection

The Edit Window
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left 

\begin_inset Figure size 388 333
file dlgedit_edit.ps
subcaption The Edit Node dialog
flags 11
subfigure

\end_inset 


\layout Paragraph

1.
 Edit Circle's Text
\layout Standard

When you create a new Circle, you should attach some text to it.
 This is done on this page.
 Simply type the text into the entry.
 Player text will be displayed blue, NPC text black.
 You can switch between both with (5).
\layout Paragraph

2.
 
\begin_inset LatexCommand \label{edit}

\end_inset 

Conditions for the Node
\layout Standard

On this page, you can specifiy a condition which then decides whether this
 line of text will be available in the game or not.
 In fact you may enter any valid Python code, but the result may be unpredictibl
e; so to be on the safe side, the code you write here should look like the
 following example:
\layout Standard


\protected_separator 

\layout Standard


\family typewriter 
if condition_1 == 1 && (flag_1 + flag_2) <= 10:
\layout Paragraph

3.
 Set and/or change Variables
\layout Standard

Here you can enter a variety of Python code.
 In contrast to the Condition code, where your code decides whether text
 is displayed or not, this code is executed if the line of text is displayed
 (in case of NPC text) or selected as response (in case of Player text).
 Use the code you enter here to change quest objects, NPC or Player attributes,
 etc.
 How this works in detail, will be described in section 3.4 on page 
\begin_inset LatexCommand \pageref{code}

\end_inset 

 as soon as these features are available.
\layout Standard

The green page label tells you at a glance that this Circle contains some
 variable code, but neither Conditions nor miscellanous Commands.
 The Text-page's label will always be black, as text isn't really optional.
\layout Paragraph

4.
 Miscellanous Commands
\layout Standard

Here are just a few shortcuts that create code as you can enter in (3).
 Currently, only the 
\emph on 
Loop 
\emph default 
command works.
 When activated, the Node will not be marked as used once it appears in
 the conversation, and thus may be spoken several times.
\layout Standard

None of them are implemented yet, but they will contain commands to start
 combat, change a NPC's active dialogue or plugin-dialogue and similar things.
\layout Paragraph

5.
 Assign text to Player or NPC
\layout Standard

Use the Radiobuttons to assign the Circle either to the Player or to a NPC.
 The Editor tries its best to guess to whom this line of text shall belong,
 but as long as it can't read your thoughts, you'll have to correct it sometimes.
\layout Paragraph

6.
 Set NPC
\layout Standard

You can select the NPC who shall speak here.
 When using 
\emph on 
default
\emph default 
, this will be the NPC this dialogue is assigned to.
 In case of a conversation between multiple NPC's, you might want to chose
 somebody else though.
 Note that this has not been implemented yet.
\layout Paragraph

7.
 Set NPC's mood
\layout Standard

Here you can specify what picture of the selected NPC the player gets to
 see.
 This feature needs to be implemented yet.
\layout Paragraph

8.
 Annotation
\layout Standard

Here is some room for personal notes of all kind.
 Since a dialogue can get quite complex, you really should add some comments,
 so that other people as well as you can easier understand what is going
 on.
\layout Subsection

The Run Window
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left 

\begin_inset Figure size 388 333
file dlgedit_run.ps
subcaption Testing the Dialogue
flags 11
subfigure

\end_inset 


\layout Paragraph

1.
 The conversation so far
\layout Standard

The top part of the Dialogue test window will display the conversation you
 had so far.
 As known from the Editor, Player lines are displayed blue, NPC lines black.
\layout Paragraph

2.
 The current NPC line
\layout Standard

The NPC's reaction to your last speech is displayed in red.
 If no responses of the player are available, click on this line to continue
 the conversation.
\layout Paragraph

3.
 Your possible responses
\layout Standard

Usually, a line of NPC text will be followed by one or more responses, the
 player can chose from.
 Simply click on the text you wish to say and the dialogue will continue.
\layout Paragraph

4.
 Export this conversation
\layout Standard

The idea is that you might be able to find flaws of, and make improvements
 to your dialogue when having it available as an ASCII file.
 This feature is not implemented yet, and maybe it will completely vanish
 in later versions of the editor.
\layout Subsection


\begin_inset LatexCommand \label{code}

\end_inset 

Additional Python code
\layout Standard

As you have learned above, you can enter additional Python code at various
 places of the dialogue:
\layout Itemize

directly into the text.
 This code has to be enclosed in braces {} and should return a string.
\layout Itemize

as a condition that decides whether a chunk of dialogue is displayed or
 not, 
\layout Itemize

and finally you can add code that is executed after a piece of dialogue
 has been displayed.
\layout Standard

Especially about the latter case, you will find more information in this
 section.
\layout Paragraph

1.
 Controlling the Dialogue flow
\layout Standard

What for is that then? Isn't that already achieved by linking Circles with
 arrows? Well, it partly is, but there are cases that cannot be handled
 that way.
 Imagine you want to give the player some special reply that is only available
 if the NPC gave him some hint earlier in the dialogue.
 With the dialogue being not linear at all, there may be numerous ways to
 reach the point where the player may have that optional response.
 But how do you know what exactly the NPC has told the player?
\layout Standard

Here you'll have to employ additional Python code.
 So if you want to check later whether a special piece of dialogue has been
 spoken, you should set a flag in this special node:
\layout Standard


\protected_separator 

\layout Standard


\family typewriter 
self.special_text_spoken = 1
\newline 

\layout Standard

And later on, you can add a condition to the special response that shall
 become available:
\layout Standard


\protected_separator 

\layout Standard


\family typewriter 
if self.special_text_spoken == 1:
\newline 

\layout Standard

That's it.
 With this method, you can easily control what pieces of the dialogues the
 player traversed, and what pieces he didn't see.
 Note that the 
\family typewriter 
self
\family default 
 keyword means that those flags are stored with the dialogue, and thus are
 lost once the dialogue ends.
 If you want them to be static, you'll have to set them inside an appropriate
 
\emph on 
quest object
\emph default 
, or within the 
\emph on 
gamestate
\emph default 
 array.
 More on those later, when they are implemented.
\the_end
