#This file was created by <root> Sun Jan  2 20:58:27 2000
#LyX 1.0 (C) 1995-1999 Matthias Ettrich and the LyX Team
\lyxformat 2.15
\textclass article
\language default
\inputencoding default
\fontscheme default
\graphics default
\paperfontsize 11
\spacing single 
\papersize Default
\paperpackage widemarginsa4
\use_geometry 0
\use_amsmath 0
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 1
\paperpagestyle headings

\layout Title

The Adonthell Dialogue Editor
\layout Author

by Kai Sterker
\layout Section

Understanding the Dialogue Engine
\layout Standard

Before we start designing our first dialogues, it might be wise to have
 a look at the concept of the dialogue engine.
 Once you understand the basic rules, it will help you to avoid errors.
\layout Subsection

The Dialogue Language
\layout Standard

Basically, the Dialogue Engine is an interpreter for an assembler like language.
 That makes it fast and gives dialogues a maximum amount of freedom.
 One of the most obvious function of the Editor is to provide a easy to
 use interface to the dialogue language.
 
\newline 

\newline 
Following structure is currently implemented:
\newline 

\family typewriter 

\newline 
conversation:
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 [ IMPORT ]
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 [ block | END ]
\newline 

\newline 
block:
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 CLEAR
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 monologue | [ dialogue ]
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 DISPLAY
\newline 

\newline 
monologue:
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 [ SNPCTEXT ]
\newline 

\newline 
dialogue:
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 NPCTEXT
\newline 

\protected_separator 

\protected_separator 

\protected_separator 
 [ PTEXT ]
\newline 

\newline 

\family default 
Each Dialogue starts with one or more 
\family typewriter 
IMPORT
\family default 
 commands wich load the strings used during the conversation from the string
 file.
 Then follows a number of blocks that start with a 
\family typewriter 
CLEAR 
\family default 
command, then with the NPC's text, optional text of the player and end with
 the 
\family typewriter 
DISPLAY 
\family default 
command.
 Instead of a block, the command for ending the dialogue may appear.
\layout Subsection

Internals of the Interpreter
\layout Standard

The actual interpreter is quite straightforward.
 The code of each dialogue is loaded into an array, a Program Counter points
 to the next command to execute.
 Furthermore there are two variables that contain the NPC's part of the
 dialogue as well as a list of the players possible reactions (may be zero).
 Running the interpreter by means of the function 
\family typewriter 
run_dlg (\SpecialChar \ldots{}
)
\family default 
 will first empty the two variables, set the PC to the correct position,
 write the new strings into the variables and return to the caller.
\layout Subsection

What the Commands do
\layout Standard

This behaviour is controlled by the commands of course, wich do the following:
\layout Description

CLEAR frees the variables containing the player's and NPC's text.
 Therefore it is executed at the beginning of each block.
\layout Description

SNPCTEXT (Single NPCTEXT) adds the NPC's part to the apropriate variable
 and indicates at the same time that no player part follows.
 It has the string to display and the new value of the PC as its arguments.
\layout Description

NPCTEXT adds the NPC's part to the apropriate variable.
 At least one player text has to follow.
 Its argument is the string to display.
\layout Description

PTEXT adds the players text to the array of possible responses.
 Its arguments are the string to display and the new value of the PC.
\layout Description

DISPLAY ends a block and tells the interpreter to return to the calling
 function.
\layout Section

An Example
\layout Standard

That was a lot of boring theorie, therefore something more practical now.
\layout Subsection

The Dialogue
\layout Standard

This is a very simplistic Dialogue, but you will see that it is sufficient
 to demonstrate the basic functionality of the Dialogue Editor.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align left \LyXTable
multicol5
5 3 0 0 -1 -1 -1 -1
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
0 0 0 0
2 0 0 "" ""
2 0 0 "" ""
2 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""
0 2 1 0 0 0 0 "" ""

NPC:
\newline 

\begin_inset Quotes eld
\end_inset 

Hello, I am Eric.
\begin_inset Quotes erd
\end_inset 


\newline 

\newline 
Player:
\newline 

\begin_inset Quotes eld
\end_inset 

I am Kai.
\begin_inset Quotes erd
\end_inset 

 or
\newline 

\begin_inset Quotes eld
\end_inset 

Goodbye!
\begin_inset Quotes erd
\end_inset 


\newline 
NPC:
\newline 

\begin_inset Quotes eld
\end_inset 

Nice to meet you.
\begin_inset Quotes erd
\end_inset 


\newline 

\begin_inset Quotes eld
\end_inset 

Fare well.
\begin_inset Quotes erd
\end_inset 


\newline 
Player:
\newline 

\begin_inset Quotes eld
\end_inset 

Goodbye!
\begin_inset Quotes erd
\end_inset 


\newline 

\newline 
NPC:
\newline 

\begin_inset Quotes eld
\end_inset 

Fare well.
\begin_inset Quotes erd
\end_inset 


\newline 

\layout Subsection

Creating the Dialogue
\layout Standard

Dialogues start with a NPC line, so that is what we add first.
 Simply left-click on the dialogue area of the Editor.
 A dialog pops up that allows you to enter the text of the node.
 As you see, NPC is the default, so simply enter the line of dialogue and
 press OK.
 What you will see when moving the cursor over the newly appeared node is
 the following:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 136 60
file step1.ps
flags 11

\end_inset 


\layout Standard

Now we add the players response.
 To do this, left-click on the circle.
 It will appear in red to signal that it is the selected node.
 Now left-click on a location a bit further down.
 Again the Text Input Window pops up, this time with Player preselected,
 just as we want it.
 Enter the Text and press OK.
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 49 85
file step2.ps
flags 11

\end_inset 

 
\layout Standard

Your screen should look like this.
 The NPC node is still selected, therefore drawn red, and the Player node
 is drawn blue, to distinguish it from NPC nodes.
 The arrow between them symbolizes the flaw of the Dialogue .
\layout Standard

Since the player shall have two possible responses, we have to create another
 player node, somewhere next to the first one.
 Voila, the first two lines of the dialogue are already done.
 Now right-click on an empty spot to deselect the NPC node and then select
 the first Player node.
 You see, that it appears orange, so you know at the first glance that it
 is a selected Player node.
 Left-click somewhere below it, enter the apropriate Text, confirm with
 OK and repeat the same for the second Player node.
\layout Standard
\align center 

\begin_inset Figure size 98 137
file step3.ps
flags 11

\end_inset 


\layout Standard

If your Display shows something similar, you've done it 
\family typewriter 
:-)
\family default 
.
 Now lines 4 and 5 of the Dialogue have to follow, but, as you have already
 noticed, they are just the same as a part of the existing dialogue.
 Would be nice if we could reuse that part, eh? Well, we can.
 All we need to do is telling the Editor wich part has to follow a node.
 
\layout Standard

Okay, lets dot it: Deselect the Player node and select the bottom left NPC
 node (or the node correspondenting to that one in your work).
 Then simply left-click on the arrow that points to the Player node we want
 to follow.
 And this is the complete dialogue:
\layout Standard
\added_space_top 0.3cm \added_space_bottom 0.3cm \align center 

\begin_inset Figure size 84 131
file step4.ps
flags 11

\end_inset 


\layout Standard

The numbers inside the nodes tell how many such 
\begin_inset Quotes eld
\end_inset 

symbolic
\begin_inset Quotes erd
\end_inset 

 links start at each node, and when selecting a node with symbolic links,
 the apropriate arrows are colored purple.
\layout Subsection

The Result
\layout Standard

Now save and compile the Dialogue.
 You get three files.
 The .dat and .str files are for the Dialogue Engine, interesting to you might
 be the .txt file, wich contains an ASCII representation of the dialogues
 code.
 In our example it looks as following:
\newline 

\newline 

\family typewriter 
18 commands in Dialogue
\family default 

\newline 

\newline 

\family typewriter 
0 IMPORT "Hello, I am Eric." 
\newline 
1 IMPORT "I am Kai." 
\newline 
2 IMPORT "Goodbye!" 
\newline 
3 IMPORT "Nice to meet you." 
\newline 
4 IMPORT "Fare well."
\newline 

\newline 
5 CLEAR 
\newline 
6 NPCTEXT 0 
\newline 
7 PTEXT 1 10 
\newline 
8 PTEXT 2 14 
\newline 
9 DISPLAY
\newline 

\newline 
10 CLEAR 
\newline 
11 NPCTEXT 3 
\newline 
12 PTEXT 2 14 
\newline 
13 DISPLAY
\newline 

\newline 
14 CLEAR 
\newline 
15 SNPCTEXT 4 17 
\newline 
16 DISPLAY
\newline 

\newline 
17 END
\family default 

\newline 

\layout Standard

You see, its a lot easier to use the Dialogue Editor than writing the Code
 by hand.
 So whats the use of this text file anyway? Its mainly for debugging purposes.
 Imagine you create, compile and test a Dialogue, and then it behaves different
 as you expected.
 Look into this file and you may find out the reason behind.
\layout Section

The Dialogue Editor
\layout Standard

After above example you should be able to start designing Dialogues right
 away.
 But if something is not clear yet, you will find help in this chapter.
\layout Subsection

The File Menu
\layout Description

Load enables you to open an existing Dialogue.
\layout Description

Save stores the actual Dialogue for later retrieval.
\layout Description

Quit exits the Dialogue Editor.
 Unsaved changes are lost.
\layout Subsection

The Dialogue Menu
\layout Description

Compile creates the files understandable by the dialogue engine as well
 as an ASCII version of the dialogue code.
\layout Description

Run invokes the dialogue engine with the current dialogue.
 You have to compile it before you can use that feature.
 You should also recompile the Dialogue after you have made changes to it,
 else you might encounter a few surprises.
\layout Subsection

Editing Dialogues
\layout Description

Select
\protected_separator 
node: Left-click on the node to select.
 NPC nodes and arrows are marked red to show the selection state, Player
 nodes orange.
 Left-clicking on a string of the instant preview will also select the apropriat
e node.
\layout Description

Select
\protected_separator 
next
\protected_separator 
node: Press 
\noun on 
Tab
\noun default 
.
 This selects the node coming next in the internal list of nodes, not the
 node following next on the screen.
 If no node is selected at the moment, the first one gets selected.
\layout Description

Deselect
\protected_separator 
node: Right-click or press 
\noun on 
Esc
\noun default 
.
\layout Description

New
\protected_separator 
circle: Deselect any node and left-click on an empty location.
\layout Description

New
\protected_separator 
arrow: Select a circle and left-click either on another circle or a free
 space.
 You can link NPC- with either NPC- or Player nodes and Player- only with
 NPC nodes.
 When clicking on an empty space, the opposite of the selected node is newly
 created, but you can change this of course.
\layout Description

Edit
\protected_separator 
node: Select the node you want to edit and either middle-click or press
 
\noun on 
Enter
\noun default 
.
\layout Description

Delete
\protected_separator 
node: Select the node and press 
\noun on 
Del
\noun default 
.
 Be aware that when deleting a circle all attached arrows will be deleted
 too.
 (As you may have noticed, circles can exist seperate, arrows can't.)
\layout Description

Move
\protected_separator 
circle: Select the circle and drag the mouse with left button pressed.
 This function is good for rearranging the dialogue layout for better understand
ing.
 It does not change the dialogues behaviour however.
\layout Description

Reassign
\protected_separator 
arrow: Select the arrow and drag it either by its tip or its tail with the
 left mouse button pressed, until it is over another circle.
 Then release the button.
 If you are not over a circle, nothing happens, else the dialogues structure
 is changed.
\layout Description

Link
\protected_separator 
nodes: Select the node where the link shall start and left-click on the
 arrow that points to the node to link to.
\layout Description

Unlink
\protected_separator 
nodes: Select the node you want to remove a link from.
 Right-click on the link you want to remove.
\layout Subsection

The Instant Preview
\layout Standard

This is the list located in the lower part of the main window.
 When selecting a node, it is displayed there, with its preceding and following
 links and symbolic links.
 You can use the instant preview to make sure the different parts fit well
 together, but also to look through the dialogue without having to compile
 it first.
 Just be aware, that the preview behaves different than when actually running
 the dialogue.
\layout Standard

Symbolic links are displayed grey, links in black and the text of the selected
 node in red.
 Preceding nodes come first, then the selected node and following links
 last.
\layout Standard

Clicking on a text selects the apropriate node and therefore changes also
 the instant preview.
 So you can get a basic impression how the dialogue will look later.
\layout Subsection

Hot Keys
\layout Description

Alt-N New Dialogue
\layout Description

Alt-L Load Dialogue
\layout Description

Alt-S Save Dialogue
\layout Description

Alt-C Compile Dialoge
\layout Description

Alt-R Run Dialogue
\layout Description

Alt-F4 Quit Program
\layout Description

ESC Deselect Node
\layout Description

DEL Delete Node
\layout Description

RETURN Edit selected Node
\layout Description

TAB Select first / next Node
\layout Description

C Center selected Node (only if Node is located in the outer region of the
 window)
\layout Description

Cursor
\protected_separator 
Keys
\protected_separator 
/
\protected_separator 
Num.
\protected_separator 
Pad Scrolling
\the_end
