/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3u-20001216-1131 (Alpha 5)
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include <stdlib.h>
#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(void)              SWIG_MakePtr(char *c, void *, swig_type_info *);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  "swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}
/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  unsigned long p;
  register int d;
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;

  if (!obj || (obj == Py_None)) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) Py_DECREF(obj);
      return 0;
    } else {
      if (newref) Py_DECREF(obj);
      goto type_error;
    }
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (newref) Py_DECREF(obj);
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*)p);
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[32], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[512];
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, type->name, NULL);
#else
  SWIG_MakePtr(result,ptr,type);
  robj = PyString_FromString(result);
#endif
  return robj;
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_screen swig_types[0] 
#define  SWIGTYPE_p_data_screen swig_types[1] 
#define  SWIGTYPE_p_storage swig_types[2] 
#define  SWIGTYPE_p_data swig_types[3] 
#define  SWIGTYPE_p_win_scrollbar swig_types[4] 
#define  SWIGTYPE_p_character_base swig_types[5] 
#define  SWIGTYPE_p_drawing_area swig_types[6] 
#define  SWIGTYPE_p_quest swig_types[7] 
#define  SWIGTYPE_p_win_theme swig_types[8] 
#define  SWIGTYPE_p_SDL_Event swig_types[9] 
#define  SWIGTYPE_p_gametime swig_types[10] 
#define  SWIGTYPE_p_gzFile swig_types[11] 
#define  SWIGTYPE_p_mapview swig_types[12] 
#define  SWIGTYPE_p_ltstr swig_types[13] 
#define  SWIGTYPE_p_win_background swig_types[14] 
#define  SWIGTYPE_p_audio swig_types[15] 
#define  SWIGTYPE_p_pair_const_char___signed_int_ swig_types[16] 
#define  SWIGTYPE_p_leave_event swig_types[17] 
#define  SWIGTYPE_p_time_event swig_types[18] 
#define  SWIGTYPE_p_string swig_types[19] 
#define  SWIGTYPE_p_vector_event__ swig_types[20] 
#define  SWIGTYPE_p_win_select swig_types[21] 
#define  SWIGTYPE_p_image swig_types[22] 
#define  SWIGTYPE_p_config swig_types[23] 
#define  SWIGTYPE_p_event_list swig_types[24] 
#define  SWIGTYPE_p_event_handler swig_types[25] 
#define  SWIGTYPE_p_win_image swig_types[26] 
#define  SWIGTYPE_p_animation swig_types[27] 
#define  SWIGTYPE_p_character swig_types[28] 
#define  SWIGTYPE_p_mapcharacter swig_types[29] 
#define  SWIGTYPE_p_win_container swig_types[30] 
#define  SWIGTYPE_p_dialog_engine swig_types[31] 
#define  SWIGTYPE_p_landmap swig_types[32] 
#define  SWIGTYPE_p_mapobject swig_types[33] 
#define  SWIGTYPE_p_event swig_types[34] 
#define  SWIGTYPE_p_base_map_event swig_types[35] 
#define  SWIGTYPE_p_enter_event swig_types[36] 
#define  SWIGTYPE_p_short swig_types[37] 
#define  SWIGTYPE_p_PyObject swig_types[38] 
#define  SWIGTYPE_p_objects swig_types[39] 
#define  SWIGTYPE_p_gamedata swig_types[40] 
#define  SWIGTYPE_p_input swig_types[41] 
#define  SWIGTYPE_p_equal_key swig_types[42] 
#define  SWIGTYPE_p_win_label swig_types[43] 
#define  SWIGTYPE_p_win_scrolled swig_types[44] 
#define  SWIGTYPE_p_animationframe swig_types[45] 
#define  SWIGTYPE_p_mapsquare swig_types[46] 
#define  SWIGTYPE_p_SDL_RWops swig_types[47] 
#define  SWIGTYPE_p_mapengine swig_types[48] 
#define  SWIGTYPE_p_win_border swig_types[49] 
#define  SWIGTYPE_p_win_base swig_types[50] 
#define  SWIGTYPE_p_win_font swig_types[51] 
#define  SWIGTYPE_p_win_manager swig_types[52] 
static swig_type_info *swig_types[54];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= adonthellc.so
  ------------------------------------------------*/
#define SWIG_init    initadonthellc

#define SWIG_name    "adonthellc"


#include "types.h"
#include "storage.h"
#include "event.h"
#include "SDL_keysym.h"
#include "input.h"
#include "audio.h"
#include "character_base.h"
#include "quest.h"
#include "drawing_area.h"
#include "screen.h"
#include "image.h"
#include "animation.h"
#include "mapobject.h"
#include "mapcharacter.h"
#include "landmap.h"
#include "mapview.h"
#include "mapengine.h"
#include "character.h"
#include "win_types.h"
#include "win_font.h"
#include "win_theme.h"
#include "win_base.h"
#include "win_container.h"
#include "win_label.h"
#include "win_image.h"
#include "win_scrolled.h"
#include "win_select.h"
#include "win_manager.h"
#include "dialog_engine.h"
#include "data_screen.h"
#include "data.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_equal_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    equal_key *result ;
    
    if(!PyArg_ParseTuple(args,":new_equal_key")) return NULL;
    result = (equal_key *)new equal_key();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_equal_key);
    return resultobj;
}


static PyObject *_wrap_delete_equal_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    equal_key *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_equal_key",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_equal_key,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_ltstr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ltstr *result ;
    
    if(!PyArg_ParseTuple(args,":new_ltstr")) return NULL;
    result = (ltstr *)new ltstr();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_ltstr);
    return resultobj;
}


static PyObject *_wrap_delete_ltstr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    ltstr *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_ltstr",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_ltstr,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_storage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    storage *result ;
    
    if(!PyArg_ParseTuple(args,":new_storage")) return NULL;
    result = (storage *)new storage();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_storage);
    return resultobj;
}


static PyObject *_wrap_storage_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    storage *arg0 ;
    char *arg1 ;
    int arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Osi:storage_set",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_storage,1)) == -1) return NULL;
    arg0->set((char const *)arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_storage_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    storage *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"Os:storage_get",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_storage,1)) == -1) return NULL;
    result = (int )arg0->get((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_storage_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    storage *arg0 ;
    PyObject * argo0 =0 ;
    pair<const char*, signed int> *result ;
    
    if(!PyArg_ParseTuple(args,"O:storage_next",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_storage,1)) == -1) return NULL;
    result = new pair<const char*, signed int> (arg0->next());    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_pair_const_char___signed_int_);
    return resultobj;
}


static PyObject *_wrap_delete_storage(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    storage *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_storage",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_storage,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_objects(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    objects *result ;
    
    if(!PyArg_ParseTuple(args,":new_objects")) return NULL;
    result = (objects *)new objects();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_objects);
    return resultobj;
}


static PyObject *_wrap_objects_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    objects *arg0 ;
    char *arg1 ;
    storage *arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo2 =0 ;
    
    if(!PyArg_ParseTuple(args,"OsO:objects_set",&argo0,&arg1,&argo2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_objects,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_storage,1)) == -1) return NULL;
    arg0->set((char const *)arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_objects_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    objects *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    storage *result ;
    
    if(!PyArg_ParseTuple(args,"Os:objects_get",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_objects,1)) == -1) return NULL;
    result = (storage *)arg0->get((char const *)arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_storage);
    return resultobj;
}


static PyObject *_wrap_objects_erase(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    objects *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:objects_erase",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_objects,1)) == -1) return NULL;
    arg0->erase((char const *)arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_objects_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    objects *arg0 ;
    PyObject * argo0 =0 ;
    storage *result ;
    
    if(!PyArg_ParseTuple(args,"O:objects_next",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_objects,1)) == -1) return NULL;
    result = (storage *)arg0->next();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_storage);
    return resultobj;
}


static PyObject *_wrap_delete_objects(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    objects *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_objects",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_objects,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_script_file_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:event_script_file_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    arg0->script_file = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_script_file_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:event_script_file_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    result = (char *) (arg0->script_file);
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_event_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:event_save",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    arg0->save(*arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:base_map_event_save",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    arg0->save(*arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_submap_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:base_map_event_submap_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->submap = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_submap_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_submap_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (int ) (arg0->submap);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:base_map_event_x_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->x = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_x_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (int ) (arg0->x);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:base_map_event_y_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->y = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_y_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (int ) (arg0->y);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_dir_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    signed char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:base_map_event_dir_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->dir = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_dir_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_dir_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (signed char ) (arg0->dir);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_map_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:base_map_event_map_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->map = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_map_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_map_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (int ) (arg0->map);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_c_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    mapcharacter *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:base_map_event_c_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->c = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_c_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_c_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (mapcharacter *) (arg0->c);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_new_base_map_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_base_map_event")) return NULL;
    result = (base_map_event *)new base_map_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_base_map_event);
    return resultobj;
}


static PyObject *_wrap_delete_base_map_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_base_map_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_enter_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    enter_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_enter_event")) return NULL;
    result = (enter_event *)new enter_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_enter_event);
    return resultobj;
}


static PyObject *_wrap_delete_enter_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    enter_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_enter_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_enter_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_leave_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    leave_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_leave_event")) return NULL;
    result = (leave_event *)new leave_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_leave_event);
    return resultobj;
}


static PyObject *_wrap_delete_leave_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    leave_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_leave_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_leave_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_time_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_time_event")) return NULL;
    result = (time_event *)new time_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_time_event);
    return resultobj;
}


static PyObject *_wrap_time_event_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:time_event_save",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    arg0->save(*arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_minute_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_minute_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->minute = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_minute_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_minute_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->minute);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_m_step_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_m_step_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->m_step = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_m_step_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_m_step_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->m_step);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_hour_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_hour_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->hour = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_hour_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_hour_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->hour);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_h_step_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_h_step_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->h_step = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_h_step_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_h_step_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->h_step);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_day_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_day_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->day = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_day_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_day_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->day);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_d_step_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_d_step_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->d_step = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_d_step_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_d_step_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->d_step);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_time_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:time_event_time_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->time = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_time_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_time_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned int ) (arg0->time);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_time_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_time_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_event_list(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_event_list",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_add_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    event *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:event_list_add_event",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_event,1)) == -1) return NULL;
    arg0->add_event(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_add_map_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    char *arg1 ;
    unsigned short arg2 ;
    int arg3 = -1 ;
    int arg4 = -1 ;
    int arg5 = -1 ;
    short arg6 = -1 ;
    mapcharacter *arg7 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo7 =0 ;
    
    if(!PyArg_ParseTuple(args,"Osh|iiihO:event_list_add_map_event",&argo0,&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&argo7)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo7,(void **) &arg7,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->add_map_event(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_events_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    vector<event*> *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:event_list_events_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_vector_event__,1)) == -1) return NULL;
    arg0->events = *arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_events_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    PyObject * argo0 =0 ;
    vector<event*> *result ;
    
    if(!PyArg_ParseTuple(args,"O:event_list_events_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    result = (vector<event*> *)& (arg0->events);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_vector_event__);
    return resultobj;
}


static PyObject *_wrap_new_event_list(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *result ;
    
    if(!PyArg_ParseTuple(args,":new_event_list")) return NULL;
    result = (event_list *)new event_list();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_event_list);
    return resultobj;
}


static PyObject *_wrap_event_handler_register_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:event_handler_register_event",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    event_handler::register_event(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_handler_remove_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:event_handler_remove_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    event_handler::remove_event(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_handler_raise_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:event_handler_raise_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    event_handler::raise_event(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_handler_get_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    gzFile *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:event_handler_get_state",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )event_handler::get_state(*arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_event_handler_put_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    gzFile *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:event_handler_put_state",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )event_handler::put_state(*arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_event_handler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_handler *result ;
    
    if(!PyArg_ParseTuple(args,":new_event_handler")) return NULL;
    result = (event_handler *)new event_handler();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_event_handler);
    return resultobj;
}


static PyObject *_wrap_delete_event_handler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_handler *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_event_handler",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_handler,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_FilterEvents(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    SDL_Event *arg0 ;
    PyObject * argo0 =0 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"O:input_FilterEvents",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_SDL_Event,1)) == -1) return NULL;
    result = (int )input::FilterEvents((SDL_Event const *)arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_init")) return NULL;
    input::init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_shutdown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_shutdown")) return NULL;
    input::shutdown();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_update")) return NULL;
    input::update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static int _wrap_input__last_key_set(PyObject *val) {
    unsigned short  tval ;
    
    tval = (unsigned short ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'input_last_key'(unsigned short )");
        return 1; 
    }
    input::last_key = tval;
    return 0;
}


static PyObject *_wrap_input__last_key_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) input::last_key);
    return pyobj;
}


static PyObject *_wrap_input_is_pushed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"i:input_is_pushed",&arg0)) return NULL;
    result = (bool )input::is_pushed((SDLKey )arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_has_been_pushed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"i:input_has_been_pushed",&arg0)) return NULL;
    result = (bool )input::has_been_pushed((SDLKey )arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static int _wrap_input__mouse_posx_set(PyObject *val) {
    unsigned short  tval ;
    
    tval = (unsigned short ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'input_mouse_posx'(unsigned short )");
        return 1; 
    }
    input::mouse_posx = tval;
    return 0;
}


static PyObject *_wrap_input__mouse_posx_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) input::mouse_posx);
    return pyobj;
}


static PyObject *_wrap_input_mouse_posy_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    input *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:input_mouse_posy_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_input,1)) == -1) return NULL;
    arg0->mouse_posy = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_mouse_posy_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    input *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:input_mouse_posy_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_input,1)) == -1) return NULL;
    result = (unsigned short ) (arg0->mouse_posy);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_get_next_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result ;
    
    if(!PyArg_ParseTuple(args,":input_get_next_key")) return NULL;
    result = (int )input::get_next_key();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_get_next_unicode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int result ;
    
    if(!PyArg_ParseTuple(args,":input_get_next_unicode")) return NULL;
    result = (int )input::get_next_unicode();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_set_key_repeat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 = SDL_DEFAULT_REPEAT_DELAY ;
    int arg1 = SDL_DEFAULT_REPEAT_INTERVAL ;
    
    if(!PyArg_ParseTuple(args,"|ii:input_set_key_repeat",&arg0,&arg1)) return NULL;
    input::set_key_repeat(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_clear_keys_queue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_clear_keys_queue")) return NULL;
    input::clear_keys_queue();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_input(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    input *result ;
    
    if(!PyArg_ParseTuple(args,":new_input")) return NULL;
    result = (input *)new input();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_input);
    return resultobj;
}


static PyObject *_wrap_delete_input(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    input *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_input",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_input,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    config *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:audio_init",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_config,1)) == -1) return NULL;
    audio::init(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_cleanup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":audio_cleanup")) return NULL;
    audio::cleanup();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_load_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    char *arg1 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"is:audio_load_background",&arg0,&arg1)) return NULL;
    result = (int )audio::load_background(arg0,arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_audio_unload_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    
    if(!PyArg_ParseTuple(args,"i:audio_unload_background",&arg0)) return NULL;
    audio::unload_background(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_set_background_volume(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    
    if(!PyArg_ParseTuple(args,"i:audio_set_background_volume",&arg0)) return NULL;
    audio::set_background_volume(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_pause_music(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":audio_pause_music")) return NULL;
    audio::pause_music();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_unpause_music(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":audio_unpause_music")) return NULL;
    audio::unpause_music();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_load_wave(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    char *arg1 ;
    int result ;
    
    if(!PyArg_ParseTuple(args,"is:audio_load_wave",&arg0,&arg1)) return NULL;
    result = (int )audio::load_wave(arg0,arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_audio_unload_wave(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    
    if(!PyArg_ParseTuple(args,"i:audio_unload_wave",&arg0)) return NULL;
    audio::unload_wave(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_play_wave(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,"ii:audio_play_wave",&arg0,&arg1)) return NULL;
    audio::play_wave(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_play_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    
    if(!PyArg_ParseTuple(args,"i:audio_play_background",&arg0)) return NULL;
    audio::play_background(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_fade_in_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,"ii:audio_fade_in_background",&arg0,&arg1)) return NULL;
    audio::fade_in_background(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_fade_out_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    
    if(!PyArg_ParseTuple(args,"i:audio_fade_out_background",&arg0)) return NULL;
    audio::fade_out_background(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_change_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    int arg1 ;
    
    if(!PyArg_ParseTuple(args,"ii:audio_change_background",&arg0,&arg1)) return NULL;
    audio::change_background(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_audio_is_initialized(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result ;
    
    if(!PyArg_ParseTuple(args,":audio_is_initialized")) return NULL;
    result = (bool )audio::is_initialized();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_audio(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    audio *result ;
    
    if(!PyArg_ParseTuple(args,":new_audio")) return NULL;
    result = (audio *)new audio();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_audio);
    return resultobj;
}


static PyObject *_wrap_delete_audio(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    audio *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_audio",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_audio,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_character_base(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *result ;
    
    if(!PyArg_ParseTuple(args,":new_character_base")) return NULL;
    result = (character_base *)new character_base();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_character_base);
    return resultobj;
}


static PyObject *_wrap_delete_character_base(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_character_base",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_character_base_get_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:character_base_get_name",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    result = (char *)arg0->get_name();
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_character_base_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:character_base_set_name",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    arg0->set_name((char const *)arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_character_base_get_color(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    PyObject * argo0 =0 ;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,"O:character_base_get_color",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    result = (unsigned int )arg0->get_color();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_character_base_set_color(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:character_base_set_color",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    arg0->set_color(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_character_base_get_dialogue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:character_base_get_dialogue",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    result = (char *)arg0->get_dialogue();
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_character_base_set_dialogue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:character_base_set_dialogue",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    arg0->set_dialogue((char const *)arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_quest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    quest *result ;
    
    if(!PyArg_ParseTuple(args,":new_quest")) return NULL;
    result = (quest *)new quest();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_quest);
    return resultobj;
}


static PyObject *_wrap_delete_quest(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    quest *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_quest",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_quest,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_set_video_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned short arg0 ;
    unsigned short arg1 ;
    
    if(!PyArg_ParseTuple(args,"hh:screen_set_video_mode",&arg0,&arg1)) return NULL;
    screen::set_video_mode(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_set_fullscreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg0 ;
    int tempbool0 ;
    
    if(!PyArg_ParseTuple(args,"i:screen_set_fullscreen",&tempbool0)) return NULL;
    arg0 = (bool ) tempbool0;
    screen::set_fullscreen(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_is_fullscreen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result ;
    
    if(!PyArg_ParseTuple(args,":screen_is_fullscreen")) return NULL;
    result = (bool )screen::is_fullscreen();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_screen_init_frame_counter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":screen_init_frame_counter")) return NULL;
    screen::init_frame_counter();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_show(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":screen_show")) return NULL;
    screen::show();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_drawbox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned short arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned int arg4 ;
    drawing_area *arg5 = NULL ;
    PyObject * argo5 =0 ;
    
    if(!PyArg_ParseTuple(args,"hhhhi|O:screen_drawbox",&arg0,&arg1,&arg2,&arg3,&arg4,&argo5)) return NULL;
    if ((SWIG_ConvertPtr(argo5,(void **) &arg5,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    screen::drawbox(arg0,arg1,arg2,arg3,arg4,arg5);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":screen_clear")) return NULL;
    screen::clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_makesquare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned short arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    
    if(!PyArg_ParseTuple(args,"hhh:screen_makesquare",&arg0,&arg1,&arg2)) return NULL;
    screen::makesquare(arg0,arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_set_mouse_cursor_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg0 ;
    int tempbool0 ;
    
    if(!PyArg_ParseTuple(args,"i:screen_set_mouse_cursor_visible",&tempbool0)) return NULL;
    arg0 = (bool ) tempbool0;
    screen::set_mouse_cursor_visible(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_screen_is_mouse_cursor_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result ;
    
    if(!PyArg_ParseTuple(args,":screen_is_mouse_cursor_visible")) return NULL;
    result = (bool )screen::is_mouse_cursor_visible();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_screen_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,":screen_length")) return NULL;
    result = (unsigned short )screen::length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_screen_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,":screen_height")) return NULL;
    result = (unsigned short )screen::height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_screen_trans_col(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,":screen_trans_col")) return NULL;
    result = (unsigned int )screen::trans_col();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_screen_trans_col_rgb(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,":screen_trans_col_rgb")) return NULL;
    result = (unsigned int )screen::trans_col_rgb();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_screen_frames_to_do(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,":screen_frames_to_do")) return NULL;
    result = (unsigned char )screen::frames_to_do();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    screen *result ;
    
    if(!PyArg_ParseTuple(args,":new_screen")) return NULL;
    result = (screen *)new screen();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_screen);
    return resultobj;
}


static PyObject *_wrap_delete_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    screen *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_screen",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_screen,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *result ;
    
    if(!PyArg_ParseTuple(args,":new_image")) return NULL;
    result = (image *)new image();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_image);
    return resultobj;
}


static PyObject *_wrap_delete_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_image",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:image_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:image_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:image_length",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (unsigned short )arg0->length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:image_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (unsigned short )arg0->height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:image_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:image_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_get_raw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:image_get_raw",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get_raw(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_load_raw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:image_load_raw",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (signed char )arg0->load_raw((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_get_pnm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    SDL_RWops *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:image_get_pnm",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_SDL_RWops,1)) == -1) return NULL;
    result = (signed char )arg0->get_pnm(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_load_pnm(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:image_load_pnm",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (signed char )arg0->load_pnm((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_screen_shot(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:image_screen_shot",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->screen_shot();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_assign_drawing_area(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    drawing_area *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:image_assign_drawing_area",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->assign_drawing_area(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_detach_drawing_area(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:image_detach_drawing_area",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->detach_drawing_area();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_is_masked(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:image_is_masked",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (bool )arg0->is_masked();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_set_mask(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:image_set_mask",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_mask(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_alpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:image_alpha",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (unsigned char )arg0->alpha();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_set_alpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:image_set_alpha",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->set_alpha(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    short arg1 ;
    short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:image_draw",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    short arg1 ;
    short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:image_putbox",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->putbox(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_mask(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    short arg1 ;
    short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:image_putbox_mask",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->putbox_mask(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_trans(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    short arg1 ;
    short arg2 ;
    unsigned char arg3 ;
    drawing_area *arg4 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo4 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhb|O:image_putbox_trans",&argo0,&arg1,&arg2,&arg3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->putbox_trans(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_mask_trans(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    short arg1 ;
    short arg2 ;
    unsigned char arg3 ;
    drawing_area *arg4 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo4 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhb|O:image_putbox_mask_trans",&argo0,&arg1,&arg2,&arg3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->putbox_mask_trans(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_get_from_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    short arg1 ;
    short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:image_get_from_screen",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->get_from_screen(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_zoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:image_zoom",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->zoom(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_reverse_lr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:image_reverse_lr",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->reverse_lr(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_reverse_ud(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:image_reverse_ud",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->reverse_ud(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_brightness(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    unsigned short arg2 ;
    bool arg3 = false ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    int tempbool3 = (int) false ;
    
    if(!PyArg_ParseTuple(args,"OOh|i:image_brightness",&argo0,&argo1,&arg2,&tempbool3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg3 = (bool ) tempbool3;
    arg0->brightness(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_tile_img(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:image_putbox_tile_img",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->putbox_tile_img(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_img(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhh:image_putbox_img",&argo0,&argo1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->putbox_img(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_mask_img(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhh:image_putbox_mask_img",&argo0,&argo1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->putbox_mask_img(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_putbox_part_img(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    image *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    unsigned short arg5 ;
    unsigned short arg6 ;
    unsigned short arg7 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhhhhhh:image_putbox_part_img",&argo0,&argo1,&arg2,&arg3,&arg4,&arg5,&arg6,&arg7)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->putbox_part_img(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_get_pix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,"Ohh:image_get_pix",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (unsigned int )arg0->get_pix(arg1,arg2);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_get_rgb_pix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    unsigned int result ;
    
    if(!PyArg_ParseTuple(args,"Ohh:image_get_rgb_pix",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (unsigned int )arg0->get_rgb_pix(arg1,arg2);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_image_put_pix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned int arg3 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhi:image_put_pix",&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->put_pix(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_image_put_rgb_pix(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    image *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned int arg3 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhi:image_put_rgb_pix",&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->put_rgb_pix(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_animationframe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *result ;
    
    if(!PyArg_ParseTuple(args,":new_animationframe")) return NULL;
    result = (animationframe *)new animationframe();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_animationframe);
    return resultobj;
}


static PyObject *_wrap_animationframe_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_animationframe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_animationframe",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_alpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_alpha",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned char )arg0->alpha();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_alpha(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:animationframe_set_alpha",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->set_alpha(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_is_masked(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_is_masked",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (bool )arg0->is_masked();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_mask(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:animationframe_set_mask",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_mask(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_image_nbr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_image_nbr",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned short )arg0->image_nbr();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_image_nbr(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:animationframe_set_image_nbr",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->set_image_nbr(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_delay(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_delay",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned short )arg0->delay();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_delay(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:animationframe_set_delay",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->set_delay(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_nextframe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_nextframe",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned short )arg0->nextframe();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_nextframe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:animationframe_set_nextframe",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->set_nextframe(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:animationframe_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:animationframe_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_offx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_offx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned short )arg0->offx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_offx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:animationframe_set_offx",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->set_offx(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animationframe_offy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animationframe_offy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned short )arg0->offy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animationframe_set_offy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animationframe *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:animationframe_set_offy",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    arg0->set_offy(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_animation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *result ;
    
    if(!PyArg_ParseTuple(args,":new_animation")) return NULL;
    result = (animation *)new animation();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_animation);
    return resultobj;
}


static PyObject *_wrap_animation_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animation_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_animation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_animation",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_is_empty(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_is_empty",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (bool )arg0->is_empty();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_length",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (unsigned short )arg0->length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (unsigned short )arg0->height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_play(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animation_play",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->play();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_stop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animation_stop",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->stop();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_rewind(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animation_rewind",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->rewind();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animation_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    short arg1 ;
    short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:animation_draw",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_draw_border(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:animation_draw_border",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw_border(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:animation_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:animation_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_get_off(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:animation_get_off",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get_off(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_load_off(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:animation_load_off",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (signed char )arg0->load_off((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_nbr_of_frames(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_nbr_of_frames",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (unsigned short )arg0->nbr_of_frames();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_nbr_of_images(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_nbr_of_images",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (unsigned short )arg0->nbr_of_images();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_currentframe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_currentframe",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (unsigned short )arg0->currentframe();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_set_currentframe(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:animation_set_currentframe",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->set_currentframe(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_xoffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_xoffset",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (short )arg0->xoffset();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_yoffset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    short result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_yoffset",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (short )arg0->yoffset();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_set_offset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    short arg1 ;
    short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:animation_set_offset",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->set_offset(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_next_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:animation_next_frame",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->next_frame();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_animation_get_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    animationframe *result ;
    
    if(!PyArg_ParseTuple(args,"Oh:animation_get_frame",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (animationframe *)arg0->get_frame(arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_animationframe);
    return resultobj;
}


static PyObject *_wrap_animation_get_current_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    PyObject * argo0 =0 ;
    animationframe *result ;
    
    if(!PyArg_ParseTuple(args,"O:animation_get_current_frame",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (animationframe *)arg0->get_current_frame();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_animationframe);
    return resultobj;
}


static PyObject *_wrap_animation_get_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    image *result ;
    
    if(!PyArg_ParseTuple(args,"Oh:animation_get_image",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (image *)arg0->get_image(arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_image);
    return resultobj;
}


static PyObject *_wrap_animation_add_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"OO:animation_add_image",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    result = (unsigned short )arg0->add_image(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_add_frame(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    animationframe *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"OO:animation_add_frame",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_animationframe,1)) == -1) return NULL;
    result = (unsigned short )arg0->add_frame(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_animation_zoom(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    animation *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    animation *arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"OhhO:animation_zoom",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_animation,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_animation,1)) == -1) return NULL;
    arg0->zoom(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapobject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapobject")) return NULL;
    result = (mapobject *)new mapobject();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapobject);
    return resultobj;
}


static PyObject *_wrap_mapobject_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_mapobject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapobject",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_length",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (unsigned short )arg0->length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (unsigned short )arg0->height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_play(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_play",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg0->play();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_stop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_stop",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg0->stop();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_rewind(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_rewind",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg0->rewind();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    short arg1 ;
    short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:mapobject_draw",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_draw_free(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    short arg1 ;
    short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:mapobject_draw_free",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw_free(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_draw_border_free(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:mapobject_draw_border_free",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw_border_free(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_draw_border(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:mapobject_draw_border",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw_border(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapobject_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:mapobject_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_set_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapobject_set_schedule",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg0->set_schedule(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_is_schedule_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_is_schedule_activated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (bool )arg0->is_schedule_activated();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_set_schedule_active(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapobject_set_schedule_active",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_schedule_active(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapobject_nbr_of_animations(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapobject_nbr_of_animations",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (unsigned short )arg0->nbr_of_animations();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_get_animation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    animation *result ;
    
    if(!PyArg_ParseTuple(args,"Oh:mapobject_get_animation",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (animation *)arg0->get_animation(arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_animation);
    return resultobj;
}


static PyObject *_wrap_mapobject_insert_animation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    animation *arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OOh:mapobject_insert_animation",&argo0,&argo1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_animation,1)) == -1) return NULL;
    result = (signed char )arg0->insert_animation(arg1,arg2);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapobject_delete_animation(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapobject *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Oh:mapobject_delete_animation",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapobject,1)) == -1) return NULL;
    result = (signed char )arg0->delete_animation(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_init",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapcharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapcharacter")) return NULL;
    result = (mapcharacter *)new mapcharacter();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_delete_mapcharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapcharacter",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_talk(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_talk",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->talk();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:mapcharacter_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_get_state",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get_state(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_put_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_put_state",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->put_state(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_submap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_submap();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_posx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_posx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_posy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_posy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_offx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_offx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (signed char )arg0->get_offx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_offy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_offy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (signed char )arg0->get_offy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_on_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    landmap *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_set_on_map",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->set_on_map(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_remove_from_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_remove_from_map",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->remove_from_map();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhh:mapcharacter_set_pos",&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_pos(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_offset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    signed char arg1 ;
    signed char arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Obb:mapcharacter_set_offset",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_offset(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_remove_from_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_remove_from_pos",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->remove_from_pos();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_jump(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 = 65535 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhh|h:mapcharacter_jump",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->jump(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_move",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_move();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_filename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_filename",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = new string (arg0->filename());    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_string);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapcharacter_set_schedule",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_schedule(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_schedule",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = new string (arg0->get_schedule());    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_string);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_is_schedule_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_is_schedule_activated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->is_schedule_activated();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_schedule_active(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapcharacter_set_schedule_active",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_schedule_active(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapcharacter_set_action",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_action(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_action",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = new string (arg0->get_action());    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_string);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_is_action_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_is_action_activated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->is_action_activated();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_action_active(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapcharacter_set_action_active",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_action_active(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_update_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_update_move",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->update_move();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_launch_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    mapcharacter *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_launch_action",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->launch_action(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    mapview *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhh:mapcharacter_draw",&argo0,&argo1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->draw(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_north();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_south();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_east();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_west();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_north();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_south();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_east();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_west();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_north();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_south();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_east();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_west();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_look_invert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:mapcharacter_look_invert",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->look_invert(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_whosnext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_whosnext",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (mapcharacter *)arg0->whosnext();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_new_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *result ;
    
    if(!PyArg_ParseTuple(args,":new_character")) return NULL;
    result = (character *)new character();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_character);
    return resultobj;
}


static PyObject *_wrap_delete_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_character",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapsquare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapsquare")) return NULL;
    result = (mapsquare *)new mapsquare();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapsquare);
    return resultobj;
}


static PyObject *_wrap_delete_mapsquare(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapsquare",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapsquare_is_free(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapsquare_is_free",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    result = (bool )arg0->is_free();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapsquare_whoshere(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapsquare_whoshere",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    result = (mapcharacter *)arg0->whoshere();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_mapsquare_is_walkable_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapsquare_is_walkable_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    result = (bool )arg0->is_walkable_west();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapsquare_is_walkable_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapsquare_is_walkable_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    result = (bool )arg0->is_walkable_east();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapsquare_is_walkable_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapsquare_is_walkable_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    result = (bool )arg0->is_walkable_north();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapsquare_is_walkable_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapsquare_is_walkable_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    result = (bool )arg0->is_walkable_south();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapsquare_set_walkable_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapsquare_set_walkable_west",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_walkable_west(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapsquare_set_walkable_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapsquare_set_walkable_east",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_walkable_east(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapsquare_set_walkable_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapsquare_set_walkable_north",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_walkable_north(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapsquare_set_walkable_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapsquare *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapsquare_set_walkable_south",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapsquare,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_walkable_south(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_patterns_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_nbr_of_patterns_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->nbr_of_patterns = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_patterns_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_nbr_of_patterns_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short ) (arg0->nbr_of_patterns);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_submaps_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_nbr_of_submaps_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->nbr_of_submaps = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_submaps_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_nbr_of_submaps_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short ) (arg0->nbr_of_submaps);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_landmap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *result ;
    
    if(!PyArg_ParseTuple(args,":new_landmap")) return NULL;
    result = (landmap *)new landmap();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_landmap);
    return resultobj;
}


static PyObject *_wrap_landmap_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_landmap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_landmap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_get_nbr_of_patterns(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_get_nbr_of_patterns",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_nbr_of_patterns();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_get_nbr_of_submaps(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_get_nbr_of_submaps",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_nbr_of_submaps();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_filename(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    string *result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_filename",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = new string (arg0->filename());    resultobj = SWIG_NewPointerObj((void *)result, SWIGTYPE_p_string);
    return resultobj;
}


static PyObject *_wrap_landmap_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:landmap_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:landmap_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_put_mapchar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    mapcharacter *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhhh:landmap_put_mapchar",&argo0,&argo1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->put_mapchar(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_remove_mapchar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    mapcharacter *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhhh:landmap_remove_mapchar",&argo0,&argo1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->remove_mapchar(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_add_mapcharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    mapcharacter *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:landmap_add_mapcharacter",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->add_mapcharacter(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_get_mapchar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_get_mapchar",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (mapcharacter *)arg0->get_mapchar(arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_landmap_remove_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_remove_submap",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (signed char )arg0->remove_submap(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_put_mapobject(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Ohhhh:landmap_put_mapobject",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (signed char )arg0->put_mapobject(arg1,arg2,arg3,arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_init",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapview(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapview")) return NULL;
    result = (mapview *)new mapview();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapview);
    return resultobj;
}


static PyObject *_wrap_delete_mapview(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapview",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_length",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_attach_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    landmap *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapview_attach_map",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->attach_map(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_detach_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_detach_map",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->detach_map();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_set_current_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Oh:mapview_set_current_submap",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (signed char )arg0->set_current_submap(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_set_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    short arg3 = 0 ;
    short arg4 = 0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Ohh|hh:mapview_set_pos",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (signed char )arg0->set_pos(arg1,arg2,arg3,arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_center_on(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    short arg3 = 0 ;
    short arg4 = 0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Ohh|hh:mapview_center_on",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (signed char )arg0->center_on(arg1,arg2,arg3,arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_right",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_right();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_left",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_left();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_up(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_up",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_up();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_down(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_down",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_down();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_right",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_right();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_left",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_left();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_down(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_down",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_down();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_up(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_up",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_up();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_get_current_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_get_current_submap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_current_submap();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_get_posx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_get_posx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_get_posy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_get_posy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:mapview_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_get_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapview_get_state",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get_state(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_put_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapview_put_state",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->put_state(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_set_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapview_set_schedule",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->set_schedule(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:mapview_draw",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapengine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapengine")) return NULL;
    result = (mapengine *)new mapengine();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapengine);
    return resultobj;
}


static PyObject *_wrap_delete_mapengine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapengine",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapengine_set_mapview_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapengine_set_mapview_schedule",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    arg0->set_mapview_schedule(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapengine_load_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapengine_load_map",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    arg0->load_map((char const *)arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapengine_get_landmap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    PyObject * argo0 =0 ;
    landmap *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapengine_get_landmap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    result = (landmap *)arg0->get_landmap();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_landmap);
    return resultobj;
}


static PyObject *_wrap_mapengine_run(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapengine_run",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    arg0->run();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapengine_quit(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapengine_quit",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    arg0->quit();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapengine_get_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapengine_get_state",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get_state(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapengine_put_state(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapengine_put_state",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->put_state(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapengine_mainloop(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapengine *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapengine_mainloop",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapengine,1)) == -1) return NULL;
    arg0->mainloop();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_win_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg0 ;
    win_font *result ;
    
    if(!PyArg_ParseTuple(args,"s:new_win_font",&arg0)) return NULL;
    result = (win_font *)new win_font(arg0);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_font);
    return resultobj;
}


static PyObject *_wrap_delete_win_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_font",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_font_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:win_font_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    arg0->load(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_font_load_font(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:win_font_load_font",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    arg0->load_font(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_font_in_table(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_font_in_table",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    result = (bool )arg0->in_table(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_font_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_font_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    result = (unsigned short )arg0->height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_font_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_font_length",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    result = (unsigned short )arg0->length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_font_cursor_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_font_cursor_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->cursor = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_font_cursor_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_font *arg0 ;
    PyObject * argo0 =0 ;
    image *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_font_cursor_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    result = (image *) (arg0->cursor);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_image);
    return resultobj;
}


static PyObject *_wrap_win_theme_normal_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    win_border *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_theme_normal_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_border,1)) == -1) return NULL;
    arg0->normal = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_theme_normal_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    PyObject * argo0 =0 ;
    win_border *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_theme_normal_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_border *) (arg0->normal);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_border);
    return resultobj;
}


static PyObject *_wrap_win_theme_mini_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    win_border *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_theme_mini_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_border,1)) == -1) return NULL;
    arg0->mini = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_theme_mini_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    PyObject * argo0 =0 ;
    win_border *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_theme_mini_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_border *) (arg0->mini);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_border);
    return resultobj;
}


static PyObject *_wrap_win_theme_background_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    win_background *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_theme_background_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_background,1)) == -1) return NULL;
    arg0->background = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_theme_background_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    PyObject * argo0 =0 ;
    win_background *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_theme_background_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_background *) (arg0->background);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_background);
    return resultobj;
}


static PyObject *_wrap_win_theme_scrollbar_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    win_scrollbar *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_theme_scrollbar_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_scrollbar,1)) == -1) return NULL;
    arg0->scrollbar = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_theme_scrollbar_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    PyObject * argo0 =0 ;
    win_scrollbar *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_theme_scrollbar_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_scrollbar *) (arg0->scrollbar);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_scrollbar);
    return resultobj;
}


static int _wrap_win_theme__theme_set(PyObject *val) {
    char * tval;
    
    tval = (char *) PyString_AsString(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'win_theme_theme'(char *)");
        return 1; 
    }
    if (win_theme::theme) delete [] win_theme::theme;
    win_theme::theme = new char[strlen(tval)+1];
    strcpy((char *)win_theme::theme,tval);
    return 0;
}


static PyObject *_wrap_win_theme__theme_get() {
    PyObject *pyobj;
    
    if (win_theme::theme)
    pyobj = PyString_FromString(win_theme::theme);
    else pyobj = PyString_FromString("(NULL)");
    return pyobj;
}


static PyObject *_wrap_new_win_theme(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg0 ;
    win_theme *result ;
    
    if(!PyArg_ParseTuple(args,"s:new_win_theme",&arg0)) return NULL;
    result = (win_theme *)new win_theme(arg0);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_theme);
    return resultobj;
}


static PyObject *_wrap_win_theme_destroy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_theme_destroy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    arg0->destroy();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_theme_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    win_base *arg1 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"O|O:win_theme_update",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->update(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_win_theme(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_theme *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_theme",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_win_base(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    short arg0 ;
    short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    win_theme *arg4 ;
    PyObject * argo4 =0 ;
    win_base *result ;
    
    if(!PyArg_ParseTuple(args,"hhhhO:new_win_base",&arg0,&arg1,&arg2,&arg3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_base *)new win_base(arg0,arg1,arg2,arg3,arg4);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_base);
    return resultobj;
}


static PyObject *_wrap_win_base_x(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_x",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (short )arg0->x();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_y(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_y",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (short )arg0->y();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_length(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_length",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (unsigned short )arg0->length();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (unsigned short )arg0->height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_padx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    short *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_padx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    short &_result_ref = arg0->padx();
    result = (short *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_short);
    return resultobj;
}


static PyObject *_wrap_win_base_pady(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    short *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_pady",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    short &_result_ref = arg0->pady();
    result = (short *) &_result_ref;
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_short);
    return resultobj;
}


static PyObject *_wrap_win_base_realx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_realx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (short )arg0->realx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_realy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_realy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (short )arg0->realy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    short arg1 ;
    short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_base_move",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->move(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_base_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_set_border_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_base_set_border_size",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->set_border_size(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_set_align(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_base_set_align",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->set_align(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_align(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_align",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (unsigned char )arg0->align();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_visible",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_visible(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_is_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_visible",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_visible();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_background_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_background_visible",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_background_visible(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_is_background_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_background_visible",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_background_visible();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_border_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_border_visible",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_border_visible(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_is_border_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_border_visible",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_border_visible();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_return_code(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    int arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_return_code",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->set_return_code(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_py_signal_connect(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject *arg1 ;
    int arg2 ;
    PyObject *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * obj1  = 0 ;
    PyObject * obj3  = 0 ;
    
    if(!PyArg_ParseTuple(args,"OOi|O:win_base_py_signal_connect",&argo0,&obj1,&arg2,&obj3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    {
        if (!PyCallable_Check(obj1)) 
        {
            PyErr_SetString (PyExc_TypeError, "Need a callable object!");
            return NULL;
        }
        arg1 = obj1; 
    }
    if (obj3)
    {
        arg3 = obj3; 
    }
    arg0->py_signal_connect(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_is_can_be_selected(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_can_be_selected",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_can_be_selected();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_can_be_selected(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_can_be_selected",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_can_be_selected(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_is_in_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_in_select",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_in_select();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_is_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_select",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_select();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_activated",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_activated(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_is_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_activated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_activated();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_is_focus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_is_focus",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->is_focus();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_set_focus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_focus",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_focus(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_set_draw_brightness(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_base_set_draw_brightness",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_draw_brightness(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_set_level_brightness(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_base_set_level_brightness",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->set_level_brightness(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_set_level_trans_background(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_base_set_level_trans_background",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->set_level_trans_background(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_set_theme(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    win_theme *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_base_set_theme",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    arg0->set_theme(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_get_drawing_area(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    drawing_area *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_get_drawing_area",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (drawing_area *)arg0->get_drawing_area();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_drawing_area);
    return resultobj;
}


static PyObject *_wrap_win_base_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_base_update_real_position(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_update_real_position",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->update_real_position();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_base_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_base_draw",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    result = (bool )arg0->draw();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_win_base(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_base *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_base",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_win_container(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    short arg0 ;
    short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    win_theme *arg4 ;
    PyObject * argo4 =0 ;
    win_container *result ;
    
    if(!PyArg_ParseTuple(args,"hhhhO:new_win_container",&arg0,&arg1,&arg2,&arg3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_container *)new win_container(arg0,arg1,arg2,arg3,arg4);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_container);
    return resultobj;
}


static PyObject *_wrap_delete_win_container(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_container",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_container_add",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->add(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_container_remove",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->remove(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_remove_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_remove_all",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->remove_all();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_destroy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_destroy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->destroy();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_container_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_draw",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    result = (bool )arg0->draw();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_container_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    short arg1 ;
    short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_container_move",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->move(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_container_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_set_space_between_border(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_container_set_space_between_border",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->set_space_between_border(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_set_space_between_object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_container_set_space_between_object",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->set_space_between_object(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_space_between_border(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_space_between_border",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    result = (unsigned short )arg0->space_between_border();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_container_space_between_object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_space_between_object",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    result = (unsigned short )arg0->space_between_object();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_container_set_draw_brightness(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_container_set_draw_brightness",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_draw_brightness(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_set_visible_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_container_set_visible_all",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_visible_all(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_set_align_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_container_set_align_all",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->set_align_all(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_set_layout(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_container_set_layout",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->set_layout(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_update_real_position(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_update_real_position",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg0->update_real_position();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_set_focus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_container_set_focus",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_focus(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_container_is_focus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_container_is_focus",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    result = (bool )arg0->is_focus();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_win_label(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    short arg0 ;
    short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    win_theme *arg4 ;
    win_font *arg5 ;
    PyObject * argo4 =0 ;
    PyObject * argo5 =0 ;
    win_label *result ;
    
    if(!PyArg_ParseTuple(args,"hhhhOO:new_win_label",&arg0,&arg1,&arg2,&arg3,&argo4,&argo5)) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo5,(void **) &arg5,SWIGTYPE_p_win_font,1)) == -1) return NULL;
    result = (win_label *)new win_label(arg0,arg1,arg2,arg3,arg4,arg5);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_label);
    return resultobj;
}


static PyObject *_wrap_win_label_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_label_draw",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    result = (bool )arg0->draw();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_label_set_text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:win_label_set_text",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg0->set_text((char const *)arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_add_text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:win_label_add_text",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg0->add_text((char const *)arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_is_auto_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_label_is_auto_size",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    result = (bool )arg0->is_auto_size();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_label_is_auto_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_label_is_auto_height",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    result = (bool )arg0->is_auto_height();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_label_set_auto_size(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_label_set_auto_size",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_auto_size(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_set_auto_height(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_label_set_auto_height",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_auto_height(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_label_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_label_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_label_set_cursor_blinking(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_label_set_cursor_blinking",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_cursor_blinking(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_is_cursor_blinking(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_label_is_cursor_blinking",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    result = (bool )arg0->is_cursor_blinking();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_label_set_cursor_blinking_speed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_label_set_cursor_blinking_speed",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    arg0->set_cursor_blinking_speed(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_label_get_text(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_label_get_text",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    result = (char *)arg0->get_text();
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_delete_win_label(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_label *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_label",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_label,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_win_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    short arg0 ;
    short arg1 ;
    image *arg2 ;
    win_theme *arg3 ;
    PyObject * argo2 =0 ;
    PyObject * argo3 =0 ;
    win_image *result ;
    
    if(!PyArg_ParseTuple(args,"hhOO:new_win_image",&arg0,&arg1,&argo2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo2,(void **) &arg2,SWIGTYPE_p_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_image *)new win_image(arg0,arg1,arg2,arg3);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_image);
    return resultobj;
}


static PyObject *_wrap_delete_win_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_image *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_image",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_image,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_image_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_image *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_image_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_image,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_image_set_image(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_image *arg0 ;
    image *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_image_set_image",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_image,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_image,1)) == -1) return NULL;
    arg0->set_image(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_image_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_image *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_image_draw",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_image,1)) == -1) return NULL;
    result = (bool )arg0->draw();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_image_set_stretch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_image *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_image_set_stretch",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_image,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_stretch(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_image_is_stretch(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_image *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_image_is_stretch",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_image,1)) == -1) return NULL;
    result = (bool )arg0->is_stretch();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_win_scrolled(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    short arg0 ;
    short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    win_theme *arg4 ;
    PyObject * argo4 =0 ;
    win_scrolled *result ;
    
    if(!PyArg_ParseTuple(args,"hhhhO:new_win_scrolled",&arg0,&arg1,&arg2,&arg3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_scrolled *)new win_scrolled(arg0,arg1,arg2,arg3,arg4);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_scrolled);
    return resultobj;
}


static PyObject *_wrap_delete_win_scrolled(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_scrolled",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_up(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_up",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    result = (bool )arg0->up();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_scrolled_down(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_down",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    result = (bool )arg0->down();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_scrolled_amplitude(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_amplitude",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    result = (unsigned short )arg0->amplitude();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_scrolled_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_scrolled_add",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->add(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_scrolled_remove",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->remove(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_remove_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_remove_all",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    arg0->remove_all();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:win_scrolled_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_destroy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_destroy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    arg0->destroy();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_draw",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    result = (bool )arg0->draw();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_scrolled_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_scrolled_set_space_between_border(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_scrolled_set_space_between_border",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    arg0->set_space_between_border(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_set_space_between_object(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:win_scrolled_set_space_between_object",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    arg0->set_space_between_object(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_set_scrollbar_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_scrolled_set_scrollbar_visible",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_scrollbar_visible(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_scrolled_is_scrollbar_visible(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_scrolled *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_scrolled_is_scrollbar_visible",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_scrolled,1)) == -1) return NULL;
    result = (bool )arg0->is_scrollbar_visible();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_win_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    short arg0 ;
    short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    win_theme *arg4 ;
    PyObject * argo4 =0 ;
    win_select *result ;
    
    if(!PyArg_ParseTuple(args,"hhhhO:new_win_select",&arg0,&arg1,&arg2,&arg3,&argo4)) return NULL;
    if ((SWIG_ConvertPtr(argo4,(void **) &arg4,SWIGTYPE_p_win_theme,1)) == -1) return NULL;
    result = (win_select *)new win_select(arg0,arg1,arg2,arg3,arg4);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_select);
    return resultobj;
}


static PyObject *_wrap_delete_win_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_select",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_select_add",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->add(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_select_remove",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->remove(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_remove_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_remove_all",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    arg0->remove_all();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_destroy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_destroy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    arg0->destroy();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_select_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    win_base *result ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    result = (win_base *)arg0->get();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_base);
    return resultobj;
}


static PyObject *_wrap_win_select_get_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_get_pos",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_pos();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_select_set_default(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    win_base *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:win_select_set_default",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_win_base,1)) == -1) return NULL;
    arg0->set_default(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_set_can_be_selected_all(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_select_set_can_be_selected_all",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_can_be_selected_all(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_set_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_select_set_type",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    arg0->set_type(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_type(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_type",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    result = (unsigned char )arg0->type();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_select_set_select_mode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:win_select_set_select_mode",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    arg0->set_select_mode(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_set_select_circle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:win_select_set_select_circle",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_select_circle(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_is_select_circle(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_is_select_circle",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    result = (bool )arg0->is_select_circle();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_select_next(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_select_next")) return NULL;
    win_select::next();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_previous(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_select_previous")) return NULL;
    win_select::previous();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_set_cur_select(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_select *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_select_set_cur_select",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_select,1)) == -1) return NULL;
    win_select::set_cur_select(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_back(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result ;
    
    if(!PyArg_ParseTuple(args,":win_select_back")) return NULL;
    result = (bool )win_select::back();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_select_activate(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_select_activate")) return NULL;
    win_select::activate();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_set_activate_keyboard(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool arg0 ;
    int tempbool0 ;
    
    if(!PyArg_ParseTuple(args,"i:win_select_set_activate_keyboard",&tempbool0)) return NULL;
    arg0 = (bool ) tempbool0;
    win_select::set_activate_keyboard(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_select_is_activate_keyboard(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    bool result ;
    
    if(!PyArg_ParseTuple(args,":win_select_is_activate_keyboard")) return NULL;
    result = (bool )win_select::is_activate_keyboard();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_select_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_select_init")) return NULL;
    win_select::init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static int _wrap_win_select__next_key_set(PyObject *val) {
    int  tval ;
    
    tval = (int ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'win_select_next_key'(int )");
        return 1; 
    }
    win_select::next_key = tval;
    return 0;
}


static PyObject *_wrap_win_select__next_key_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) win_select::next_key);
    return pyobj;
}


static int _wrap_win_select__previous_key_set(PyObject *val) {
    int  tval ;
    
    tval = (int ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'win_select_previous_key'(int )");
        return 1; 
    }
    win_select::previous_key = tval;
    return 0;
}


static PyObject *_wrap_win_select__previous_key_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) win_select::previous_key);
    return pyobj;
}


static int _wrap_win_select__activate_key_set(PyObject *val) {
    int  tval ;
    
    tval = (int ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'win_select_activate_key'(int )");
        return 1; 
    }
    win_select::activate_key = tval;
    return 0;
}


static PyObject *_wrap_win_select__activate_key_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) win_select::activate_key);
    return pyobj;
}


static int _wrap_win_select__back_key_set(PyObject *val) {
    int  tval ;
    
    tval = (int ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'win_select_back_key'(int )");
        return 1; 
    }
    win_select::back_key = tval;
    return 0;
}


static PyObject *_wrap_win_select__back_key_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) win_select::back_key);
    return pyobj;
}


static PyObject *_wrap_win_manager_add(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_manager_add",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    win_manager::add(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_manager_exist(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:win_manager_exist",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    result = (bool )win_manager::exist(arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_win_manager_remove(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_manager_remove",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    win_manager::remove(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_manager_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_manager_update")) return NULL;
    win_manager::update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_manager_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_manager_draw")) return NULL;
    win_manager::draw();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_manager_set_focus(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_container *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:win_manager_set_focus",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_container,1)) == -1) return NULL;
    win_manager::set_focus(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_win_manager_destroy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":win_manager_destroy")) return NULL;
    win_manager::destroy();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_win_manager(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_manager *result ;
    
    if(!PyArg_ParseTuple(args,":new_win_manager")) return NULL;
    result = (win_manager *)new win_manager();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_win_manager);
    return resultobj;
}


static PyObject *_wrap_delete_win_manager(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    win_manager *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_win_manager",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_win_manager,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_dialog_engine_set_portrait(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:dialog_engine_set_portrait",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    arg0->set_portrait(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_dialog_engine_set_name(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:dialog_engine_set_name",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    arg0->set_name(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_dialog_engine_set_npc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:dialog_engine_set_npc",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    arg0->set_npc(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_dialog_engine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character_base *arg0 ;
    char *arg1 ;
    unsigned char arg2 = 1 ;
    PyObject * argo0 =0 ;
    dialog_engine *result ;
    
    if(!PyArg_ParseTuple(args,"Os|b:new_dialog_engine",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    result = (dialog_engine *)new dialog_engine(arg0,arg1,arg2);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_dialog_engine);
    return resultobj;
}


static PyObject *_wrap_dialog_engine_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    character_base *arg1 ;
    char *arg2 ;
    unsigned char arg3 = 1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOs|b:dialog_engine_init",&argo0,&argo1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_character_base,1)) == -1) return NULL;
    arg0->init(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_dialog_engine(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_dialog_engine",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_dialog_engine_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:dialog_engine_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_dialog_engine_run(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    dialog_engine *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:dialog_engine_run",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_dialog_engine,1)) == -1) return NULL;
    arg0->run();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_data_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    data_screen *result ;
    
    if(!PyArg_ParseTuple(args,"i:new_data_screen",&arg0)) return NULL;
    result = (data_screen *)new data_screen(arg0);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_data_screen);
    return resultobj;
}


static PyObject *_wrap_delete_data_screen(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    data_screen *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_data_screen",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_data_screen,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_data_screen_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    data_screen *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:data_screen_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_data_screen,1)) == -1) return NULL;
    result = (bool )arg0->update();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_data_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *arg0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"s:data_init",&arg0)) return NULL;
    result = (bool )data::init(arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_data_cleanup(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":data_cleanup")) return NULL;
    data::cleanup();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_data_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"i:data_load",&arg0)) return NULL;
    result = (bool )data::load(arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_data_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    unsigned int arg0 ;
    char *arg1 ;
    gamedata *result ;
    
    if(!PyArg_ParseTuple(args,"is:data_save",&arg0,&arg1)) return NULL;
    result = (gamedata *)data::save(arg0,arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_gamedata);
    return resultobj;
}


static PyObject *_wrap_data_next_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    gamedata *result ;
    
    if(!PyArg_ParseTuple(args,":data_next_save")) return NULL;
    result = (gamedata *)data::next_save();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_gamedata);
    return resultobj;
}


static PyObject *_wrap_data_get_adonthell_dir(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    char *result ;
    
    if(!PyArg_ParseTuple(args,":data_get_adonthell_dir")) return NULL;
    result = (char *)data::get_adonthell_dir();
    resultobj = PyString_FromString(result);
    return resultobj;
}


static int _wrap_data__globals_set(PyObject *val) {
    PyObject * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_PyObject,1)) == -1) return 1;
    data::globals = temp;
    return 0;
}


static PyObject *_wrap_data__globals_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)data::globals, SWIGTYPE_p_PyObject);
    return pyobj;
}


static int _wrap_data__py_module_set(PyObject *val) {
    PyObject * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_PyObject,1)) == -1) return 1;
    data::py_module = temp;
    return 0;
}


static PyObject *_wrap_data__py_module_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)data::py_module, SWIGTYPE_p_PyObject);
    return pyobj;
}


static int _wrap_data__time_set(PyObject *val) {
    gametime * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_gametime,1)) == -1) return 1;
    data::time = temp;
    return 0;
}


static PyObject *_wrap_data__time_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)data::time, SWIGTYPE_p_gametime);
    return pyobj;
}


static int _wrap_data__characters_set(PyObject *val) {
    objects * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_objects,1)) == -1) return 1;
    data::characters = *temp;
    return 0;
}


static PyObject *_wrap_data__characters_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &data::characters, SWIGTYPE_p_objects);
    return pyobj;
}


static int _wrap_data__quests_set(PyObject *val) {
    objects * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_objects,1)) == -1) return 1;
    data::quests = *temp;
    return 0;
}


static PyObject *_wrap_data__quests_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *) &data::quests, SWIGTYPE_p_objects);
    return pyobj;
}


static int _wrap_data__the_player_set(PyObject *val) {
    character * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_character,1)) == -1) return 1;
    data::the_player = temp;
    return 0;
}


static PyObject *_wrap_data__the_player_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)data::the_player, SWIGTYPE_p_character);
    return pyobj;
}


static int _wrap_data__map_engine_set(PyObject *val) {
    mapengine * temp ;
    
    if ((SWIG_ConvertPtr(val,(void **) &temp,SWIGTYPE_p_mapengine,1)) == -1) return 1;
    data::map_engine = temp;
    return 0;
}


static PyObject *_wrap_data__map_engine_get() {
    PyObject *pyobj;
    
    pyobj = SWIG_NewPointerObj((void *)data::map_engine, SWIGTYPE_p_mapengine);
    return pyobj;
}


static PyObject *_wrap_new_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    data *result ;
    
    if(!PyArg_ParseTuple(args,":new_data")) return NULL;
    result = (data *)new data();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_data);
    return resultobj;
}


static PyObject *_wrap_delete_data(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    data *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_data",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_data,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyMethodDef adonthellcMethods[] = {
	 { "new_equal_key", _wrap_new_equal_key, METH_VARARGS },
	 { "delete_equal_key", _wrap_delete_equal_key, METH_VARARGS },
	 { "new_ltstr", _wrap_new_ltstr, METH_VARARGS },
	 { "delete_ltstr", _wrap_delete_ltstr, METH_VARARGS },
	 { "new_storage", _wrap_new_storage, METH_VARARGS },
	 { "storage_set", _wrap_storage_set, METH_VARARGS },
	 { "storage_get", _wrap_storage_get, METH_VARARGS },
	 { "storage_next", _wrap_storage_next, METH_VARARGS },
	 { "delete_storage", _wrap_delete_storage, METH_VARARGS },
	 { "new_objects", _wrap_new_objects, METH_VARARGS },
	 { "objects_set", _wrap_objects_set, METH_VARARGS },
	 { "objects_get", _wrap_objects_get, METH_VARARGS },
	 { "objects_erase", _wrap_objects_erase, METH_VARARGS },
	 { "objects_next", _wrap_objects_next, METH_VARARGS },
	 { "delete_objects", _wrap_delete_objects, METH_VARARGS },
	 { "event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "event_save", _wrap_event_save, METH_VARARGS },
	 { "delete_event", _wrap_delete_event, METH_VARARGS },
	 { "base_map_event_save", _wrap_base_map_event_save, METH_VARARGS },
	 { "base_map_event_submap_set", _wrap_base_map_event_submap_set, METH_VARARGS },
	 { "base_map_event_submap_get", _wrap_base_map_event_submap_get, METH_VARARGS },
	 { "base_map_event_x_set", _wrap_base_map_event_x_set, METH_VARARGS },
	 { "base_map_event_x_get", _wrap_base_map_event_x_get, METH_VARARGS },
	 { "base_map_event_y_set", _wrap_base_map_event_y_set, METH_VARARGS },
	 { "base_map_event_y_get", _wrap_base_map_event_y_get, METH_VARARGS },
	 { "base_map_event_dir_set", _wrap_base_map_event_dir_set, METH_VARARGS },
	 { "base_map_event_dir_get", _wrap_base_map_event_dir_get, METH_VARARGS },
	 { "base_map_event_map_set", _wrap_base_map_event_map_set, METH_VARARGS },
	 { "base_map_event_map_get", _wrap_base_map_event_map_get, METH_VARARGS },
	 { "base_map_event_c_set", _wrap_base_map_event_c_set, METH_VARARGS },
	 { "base_map_event_c_get", _wrap_base_map_event_c_get, METH_VARARGS },
	 { "new_base_map_event", _wrap_new_base_map_event, METH_VARARGS },
	 { "delete_base_map_event", _wrap_delete_base_map_event, METH_VARARGS },
	 { "base_map_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "base_map_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "new_enter_event", _wrap_new_enter_event, METH_VARARGS },
	 { "delete_enter_event", _wrap_delete_enter_event, METH_VARARGS },
	 { "enter_event_submap_set", _wrap_base_map_event_submap_set, METH_VARARGS },
	 { "enter_event_submap_get", _wrap_base_map_event_submap_get, METH_VARARGS },
	 { "enter_event_x_set", _wrap_base_map_event_x_set, METH_VARARGS },
	 { "enter_event_x_get", _wrap_base_map_event_x_get, METH_VARARGS },
	 { "enter_event_y_set", _wrap_base_map_event_y_set, METH_VARARGS },
	 { "enter_event_y_get", _wrap_base_map_event_y_get, METH_VARARGS },
	 { "enter_event_dir_set", _wrap_base_map_event_dir_set, METH_VARARGS },
	 { "enter_event_dir_get", _wrap_base_map_event_dir_get, METH_VARARGS },
	 { "enter_event_map_set", _wrap_base_map_event_map_set, METH_VARARGS },
	 { "enter_event_map_get", _wrap_base_map_event_map_get, METH_VARARGS },
	 { "enter_event_c_set", _wrap_base_map_event_c_set, METH_VARARGS },
	 { "enter_event_c_get", _wrap_base_map_event_c_get, METH_VARARGS },
	 { "enter_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "enter_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "new_leave_event", _wrap_new_leave_event, METH_VARARGS },
	 { "delete_leave_event", _wrap_delete_leave_event, METH_VARARGS },
	 { "leave_event_submap_set", _wrap_base_map_event_submap_set, METH_VARARGS },
	 { "leave_event_submap_get", _wrap_base_map_event_submap_get, METH_VARARGS },
	 { "leave_event_x_set", _wrap_base_map_event_x_set, METH_VARARGS },
	 { "leave_event_x_get", _wrap_base_map_event_x_get, METH_VARARGS },
	 { "leave_event_y_set", _wrap_base_map_event_y_set, METH_VARARGS },
	 { "leave_event_y_get", _wrap_base_map_event_y_get, METH_VARARGS },
	 { "leave_event_dir_set", _wrap_base_map_event_dir_set, METH_VARARGS },
	 { "leave_event_dir_get", _wrap_base_map_event_dir_get, METH_VARARGS },
	 { "leave_event_map_set", _wrap_base_map_event_map_set, METH_VARARGS },
	 { "leave_event_map_get", _wrap_base_map_event_map_get, METH_VARARGS },
	 { "leave_event_c_set", _wrap_base_map_event_c_set, METH_VARARGS },
	 { "leave_event_c_get", _wrap_base_map_event_c_get, METH_VARARGS },
	 { "leave_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "leave_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "new_time_event", _wrap_new_time_event, METH_VARARGS },
	 { "time_event_save", _wrap_time_event_save, METH_VARARGS },
	 { "time_event_minute_set", _wrap_time_event_minute_set, METH_VARARGS },
	 { "time_event_minute_get", _wrap_time_event_minute_get, METH_VARARGS },
	 { "time_event_m_step_set", _wrap_time_event_m_step_set, METH_VARARGS },
	 { "time_event_m_step_get", _wrap_time_event_m_step_get, METH_VARARGS },
	 { "time_event_hour_set", _wrap_time_event_hour_set, METH_VARARGS },
	 { "time_event_hour_get", _wrap_time_event_hour_get, METH_VARARGS },
	 { "time_event_h_step_set", _wrap_time_event_h_step_set, METH_VARARGS },
	 { "time_event_h_step_get", _wrap_time_event_h_step_get, METH_VARARGS },
	 { "time_event_day_set", _wrap_time_event_day_set, METH_VARARGS },
	 { "time_event_day_get", _wrap_time_event_day_get, METH_VARARGS },
	 { "time_event_d_step_set", _wrap_time_event_d_step_set, METH_VARARGS },
	 { "time_event_d_step_get", _wrap_time_event_d_step_get, METH_VARARGS },
	 { "time_event_time_set", _wrap_time_event_time_set, METH_VARARGS },
	 { "time_event_time_get", _wrap_time_event_time_get, METH_VARARGS },
	 { "delete_time_event", _wrap_delete_time_event, METH_VARARGS },
	 { "time_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "time_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "delete_event_list", _wrap_delete_event_list, METH_VARARGS },
	 { "event_list_add_event", _wrap_event_list_add_event, METH_VARARGS },
	 { "event_list_add_map_event", _wrap_event_list_add_map_event, METH_VARARGS },
	 { "event_list_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "event_list_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "new_event_list", _wrap_new_event_list, METH_VARARGS },
	 { "event_handler_register_event", _wrap_event_handler_register_event, METH_VARARGS },
	 { "event_handler_remove_event", _wrap_event_handler_remove_event, METH_VARARGS },
	 { "event_handler_raise_event", _wrap_event_handler_raise_event, METH_VARARGS },
	 { "event_handler_get_state", _wrap_event_handler_get_state, METH_VARARGS },
	 { "event_handler_put_state", _wrap_event_handler_put_state, METH_VARARGS },
	 { "new_event_handler", _wrap_new_event_handler, METH_VARARGS },
	 { "delete_event_handler", _wrap_delete_event_handler, METH_VARARGS },
	 { "input_FilterEvents", _wrap_input_FilterEvents, METH_VARARGS },
	 { "input_init", _wrap_input_init, METH_VARARGS },
	 { "input_shutdown", _wrap_input_shutdown, METH_VARARGS },
	 { "input_update", _wrap_input_update, METH_VARARGS },
	 { "input_is_pushed", _wrap_input_is_pushed, METH_VARARGS },
	 { "input_has_been_pushed", _wrap_input_has_been_pushed, METH_VARARGS },
	 { "input_mouse_posy_set", _wrap_input_mouse_posy_set, METH_VARARGS },
	 { "input_mouse_posy_get", _wrap_input_mouse_posy_get, METH_VARARGS },
	 { "input_get_next_key", _wrap_input_get_next_key, METH_VARARGS },
	 { "input_get_next_unicode", _wrap_input_get_next_unicode, METH_VARARGS },
	 { "input_set_key_repeat", _wrap_input_set_key_repeat, METH_VARARGS },
	 { "input_clear_keys_queue", _wrap_input_clear_keys_queue, METH_VARARGS },
	 { "new_input", _wrap_new_input, METH_VARARGS },
	 { "delete_input", _wrap_delete_input, METH_VARARGS },
	 { "audio_init", _wrap_audio_init, METH_VARARGS },
	 { "audio_cleanup", _wrap_audio_cleanup, METH_VARARGS },
	 { "audio_load_background", _wrap_audio_load_background, METH_VARARGS },
	 { "audio_unload_background", _wrap_audio_unload_background, METH_VARARGS },
	 { "audio_set_background_volume", _wrap_audio_set_background_volume, METH_VARARGS },
	 { "audio_pause_music", _wrap_audio_pause_music, METH_VARARGS },
	 { "audio_unpause_music", _wrap_audio_unpause_music, METH_VARARGS },
	 { "audio_load_wave", _wrap_audio_load_wave, METH_VARARGS },
	 { "audio_unload_wave", _wrap_audio_unload_wave, METH_VARARGS },
	 { "audio_play_wave", _wrap_audio_play_wave, METH_VARARGS },
	 { "audio_play_background", _wrap_audio_play_background, METH_VARARGS },
	 { "audio_fade_in_background", _wrap_audio_fade_in_background, METH_VARARGS },
	 { "audio_fade_out_background", _wrap_audio_fade_out_background, METH_VARARGS },
	 { "audio_change_background", _wrap_audio_change_background, METH_VARARGS },
	 { "audio_is_initialized", _wrap_audio_is_initialized, METH_VARARGS },
	 { "new_audio", _wrap_new_audio, METH_VARARGS },
	 { "delete_audio", _wrap_delete_audio, METH_VARARGS },
	 { "new_character_base", _wrap_new_character_base, METH_VARARGS },
	 { "delete_character_base", _wrap_delete_character_base, METH_VARARGS },
	 { "character_base_get_name", _wrap_character_base_get_name, METH_VARARGS },
	 { "character_base_set_name", _wrap_character_base_set_name, METH_VARARGS },
	 { "character_base_get_color", _wrap_character_base_get_color, METH_VARARGS },
	 { "character_base_set_color", _wrap_character_base_set_color, METH_VARARGS },
	 { "character_base_get_dialogue", _wrap_character_base_get_dialogue, METH_VARARGS },
	 { "character_base_set_dialogue", _wrap_character_base_set_dialogue, METH_VARARGS },
	 { "new_quest", _wrap_new_quest, METH_VARARGS },
	 { "delete_quest", _wrap_delete_quest, METH_VARARGS },
	 { "screen_set_video_mode", _wrap_screen_set_video_mode, METH_VARARGS },
	 { "screen_set_fullscreen", _wrap_screen_set_fullscreen, METH_VARARGS },
	 { "screen_is_fullscreen", _wrap_screen_is_fullscreen, METH_VARARGS },
	 { "screen_init_frame_counter", _wrap_screen_init_frame_counter, METH_VARARGS },
	 { "screen_show", _wrap_screen_show, METH_VARARGS },
	 { "screen_drawbox", _wrap_screen_drawbox, METH_VARARGS },
	 { "screen_clear", _wrap_screen_clear, METH_VARARGS },
	 { "screen_makesquare", _wrap_screen_makesquare, METH_VARARGS },
	 { "screen_set_mouse_cursor_visible", _wrap_screen_set_mouse_cursor_visible, METH_VARARGS },
	 { "screen_is_mouse_cursor_visible", _wrap_screen_is_mouse_cursor_visible, METH_VARARGS },
	 { "screen_length", _wrap_screen_length, METH_VARARGS },
	 { "screen_height", _wrap_screen_height, METH_VARARGS },
	 { "screen_trans_col", _wrap_screen_trans_col, METH_VARARGS },
	 { "screen_trans_col_rgb", _wrap_screen_trans_col_rgb, METH_VARARGS },
	 { "screen_frames_to_do", _wrap_screen_frames_to_do, METH_VARARGS },
	 { "new_screen", _wrap_new_screen, METH_VARARGS },
	 { "delete_screen", _wrap_delete_screen, METH_VARARGS },
	 { "new_image", _wrap_new_image, METH_VARARGS },
	 { "delete_image", _wrap_delete_image, METH_VARARGS },
	 { "image_clear", _wrap_image_clear, METH_VARARGS },
	 { "image_resize", _wrap_image_resize, METH_VARARGS },
	 { "image_length", _wrap_image_length, METH_VARARGS },
	 { "image_height", _wrap_image_height, METH_VARARGS },
	 { "image_get", _wrap_image_get, METH_VARARGS },
	 { "image_load", _wrap_image_load, METH_VARARGS },
	 { "image_get_raw", _wrap_image_get_raw, METH_VARARGS },
	 { "image_load_raw", _wrap_image_load_raw, METH_VARARGS },
	 { "image_get_pnm", _wrap_image_get_pnm, METH_VARARGS },
	 { "image_load_pnm", _wrap_image_load_pnm, METH_VARARGS },
	 { "image_screen_shot", _wrap_image_screen_shot, METH_VARARGS },
	 { "image_assign_drawing_area", _wrap_image_assign_drawing_area, METH_VARARGS },
	 { "image_detach_drawing_area", _wrap_image_detach_drawing_area, METH_VARARGS },
	 { "image_is_masked", _wrap_image_is_masked, METH_VARARGS },
	 { "image_set_mask", _wrap_image_set_mask, METH_VARARGS },
	 { "image_alpha", _wrap_image_alpha, METH_VARARGS },
	 { "image_set_alpha", _wrap_image_set_alpha, METH_VARARGS },
	 { "image_draw", _wrap_image_draw, METH_VARARGS },
	 { "image_putbox", _wrap_image_putbox, METH_VARARGS },
	 { "image_putbox_mask", _wrap_image_putbox_mask, METH_VARARGS },
	 { "image_putbox_trans", _wrap_image_putbox_trans, METH_VARARGS },
	 { "image_putbox_mask_trans", _wrap_image_putbox_mask_trans, METH_VARARGS },
	 { "image_get_from_screen", _wrap_image_get_from_screen, METH_VARARGS },
	 { "image_zoom", _wrap_image_zoom, METH_VARARGS },
	 { "image_reverse_lr", _wrap_image_reverse_lr, METH_VARARGS },
	 { "image_reverse_ud", _wrap_image_reverse_ud, METH_VARARGS },
	 { "image_brightness", _wrap_image_brightness, METH_VARARGS },
	 { "image_putbox_tile_img", _wrap_image_putbox_tile_img, METH_VARARGS },
	 { "image_putbox_img", _wrap_image_putbox_img, METH_VARARGS },
	 { "image_putbox_mask_img", _wrap_image_putbox_mask_img, METH_VARARGS },
	 { "image_putbox_part_img", _wrap_image_putbox_part_img, METH_VARARGS },
	 { "image_get_pix", _wrap_image_get_pix, METH_VARARGS },
	 { "image_get_rgb_pix", _wrap_image_get_rgb_pix, METH_VARARGS },
	 { "image_put_pix", _wrap_image_put_pix, METH_VARARGS },
	 { "image_put_rgb_pix", _wrap_image_put_rgb_pix, METH_VARARGS },
	 { "new_animationframe", _wrap_new_animationframe, METH_VARARGS },
	 { "animationframe_clear", _wrap_animationframe_clear, METH_VARARGS },
	 { "delete_animationframe", _wrap_delete_animationframe, METH_VARARGS },
	 { "animationframe_alpha", _wrap_animationframe_alpha, METH_VARARGS },
	 { "animationframe_set_alpha", _wrap_animationframe_set_alpha, METH_VARARGS },
	 { "animationframe_is_masked", _wrap_animationframe_is_masked, METH_VARARGS },
	 { "animationframe_set_mask", _wrap_animationframe_set_mask, METH_VARARGS },
	 { "animationframe_image_nbr", _wrap_animationframe_image_nbr, METH_VARARGS },
	 { "animationframe_set_image_nbr", _wrap_animationframe_set_image_nbr, METH_VARARGS },
	 { "animationframe_delay", _wrap_animationframe_delay, METH_VARARGS },
	 { "animationframe_set_delay", _wrap_animationframe_set_delay, METH_VARARGS },
	 { "animationframe_nextframe", _wrap_animationframe_nextframe, METH_VARARGS },
	 { "animationframe_set_nextframe", _wrap_animationframe_set_nextframe, METH_VARARGS },
	 { "animationframe_get", _wrap_animationframe_get, METH_VARARGS },
	 { "animationframe_load", _wrap_animationframe_load, METH_VARARGS },
	 { "animationframe_offx", _wrap_animationframe_offx, METH_VARARGS },
	 { "animationframe_set_offx", _wrap_animationframe_set_offx, METH_VARARGS },
	 { "animationframe_offy", _wrap_animationframe_offy, METH_VARARGS },
	 { "animationframe_set_offy", _wrap_animationframe_set_offy, METH_VARARGS },
	 { "new_animation", _wrap_new_animation, METH_VARARGS },
	 { "animation_clear", _wrap_animation_clear, METH_VARARGS },
	 { "delete_animation", _wrap_delete_animation, METH_VARARGS },
	 { "animation_is_empty", _wrap_animation_is_empty, METH_VARARGS },
	 { "animation_length", _wrap_animation_length, METH_VARARGS },
	 { "animation_height", _wrap_animation_height, METH_VARARGS },
	 { "animation_play", _wrap_animation_play, METH_VARARGS },
	 { "animation_stop", _wrap_animation_stop, METH_VARARGS },
	 { "animation_rewind", _wrap_animation_rewind, METH_VARARGS },
	 { "animation_update", _wrap_animation_update, METH_VARARGS },
	 { "animation_draw", _wrap_animation_draw, METH_VARARGS },
	 { "animation_draw_border", _wrap_animation_draw_border, METH_VARARGS },
	 { "animation_get", _wrap_animation_get, METH_VARARGS },
	 { "animation_load", _wrap_animation_load, METH_VARARGS },
	 { "animation_get_off", _wrap_animation_get_off, METH_VARARGS },
	 { "animation_load_off", _wrap_animation_load_off, METH_VARARGS },
	 { "animation_nbr_of_frames", _wrap_animation_nbr_of_frames, METH_VARARGS },
	 { "animation_nbr_of_images", _wrap_animation_nbr_of_images, METH_VARARGS },
	 { "animation_currentframe", _wrap_animation_currentframe, METH_VARARGS },
	 { "animation_set_currentframe", _wrap_animation_set_currentframe, METH_VARARGS },
	 { "animation_xoffset", _wrap_animation_xoffset, METH_VARARGS },
	 { "animation_yoffset", _wrap_animation_yoffset, METH_VARARGS },
	 { "animation_set_offset", _wrap_animation_set_offset, METH_VARARGS },
	 { "animation_next_frame", _wrap_animation_next_frame, METH_VARARGS },
	 { "animation_get_frame", _wrap_animation_get_frame, METH_VARARGS },
	 { "animation_get_current_frame", _wrap_animation_get_current_frame, METH_VARARGS },
	 { "animation_get_image", _wrap_animation_get_image, METH_VARARGS },
	 { "animation_add_image", _wrap_animation_add_image, METH_VARARGS },
	 { "animation_add_frame", _wrap_animation_add_frame, METH_VARARGS },
	 { "animation_zoom", _wrap_animation_zoom, METH_VARARGS },
	 { "new_mapobject", _wrap_new_mapobject, METH_VARARGS },
	 { "mapobject_clear", _wrap_mapobject_clear, METH_VARARGS },
	 { "delete_mapobject", _wrap_delete_mapobject, METH_VARARGS },
	 { "mapobject_length", _wrap_mapobject_length, METH_VARARGS },
	 { "mapobject_height", _wrap_mapobject_height, METH_VARARGS },
	 { "mapobject_play", _wrap_mapobject_play, METH_VARARGS },
	 { "mapobject_stop", _wrap_mapobject_stop, METH_VARARGS },
	 { "mapobject_rewind", _wrap_mapobject_rewind, METH_VARARGS },
	 { "mapobject_update", _wrap_mapobject_update, METH_VARARGS },
	 { "mapobject_draw", _wrap_mapobject_draw, METH_VARARGS },
	 { "mapobject_draw_free", _wrap_mapobject_draw_free, METH_VARARGS },
	 { "mapobject_draw_border_free", _wrap_mapobject_draw_border_free, METH_VARARGS },
	 { "mapobject_draw_border", _wrap_mapobject_draw_border, METH_VARARGS },
	 { "mapobject_get", _wrap_mapobject_get, METH_VARARGS },
	 { "mapobject_load", _wrap_mapobject_load, METH_VARARGS },
	 { "mapobject_set_schedule", _wrap_mapobject_set_schedule, METH_VARARGS },
	 { "mapobject_is_schedule_activated", _wrap_mapobject_is_schedule_activated, METH_VARARGS },
	 { "mapobject_set_schedule_active", _wrap_mapobject_set_schedule_active, METH_VARARGS },
	 { "mapobject_nbr_of_animations", _wrap_mapobject_nbr_of_animations, METH_VARARGS },
	 { "mapobject_get_animation", _wrap_mapobject_get_animation, METH_VARARGS },
	 { "mapobject_insert_animation", _wrap_mapobject_insert_animation, METH_VARARGS },
	 { "mapobject_delete_animation", _wrap_mapobject_delete_animation, METH_VARARGS },
	 { "mapcharacter_init", _wrap_mapcharacter_init, METH_VARARGS },
	 { "mapcharacter_clear", _wrap_mapcharacter_clear, METH_VARARGS },
	 { "new_mapcharacter", _wrap_new_mapcharacter, METH_VARARGS },
	 { "delete_mapcharacter", _wrap_delete_mapcharacter, METH_VARARGS },
	 { "mapcharacter_talk", _wrap_mapcharacter_talk, METH_VARARGS },
	 { "mapcharacter_get", _wrap_mapcharacter_get, METH_VARARGS },
	 { "mapcharacter_load", _wrap_mapcharacter_load, METH_VARARGS },
	 { "mapcharacter_get_state", _wrap_mapcharacter_get_state, METH_VARARGS },
	 { "mapcharacter_put_state", _wrap_mapcharacter_put_state, METH_VARARGS },
	 { "mapcharacter_get_submap", _wrap_mapcharacter_get_submap, METH_VARARGS },
	 { "mapcharacter_get_posx", _wrap_mapcharacter_get_posx, METH_VARARGS },
	 { "mapcharacter_get_posy", _wrap_mapcharacter_get_posy, METH_VARARGS },
	 { "mapcharacter_get_offx", _wrap_mapcharacter_get_offx, METH_VARARGS },
	 { "mapcharacter_get_offy", _wrap_mapcharacter_get_offy, METH_VARARGS },
	 { "mapcharacter_set_on_map", _wrap_mapcharacter_set_on_map, METH_VARARGS },
	 { "mapcharacter_remove_from_map", _wrap_mapcharacter_remove_from_map, METH_VARARGS },
	 { "mapcharacter_set_pos", _wrap_mapcharacter_set_pos, METH_VARARGS },
	 { "mapcharacter_set_offset", _wrap_mapcharacter_set_offset, METH_VARARGS },
	 { "mapcharacter_remove_from_pos", _wrap_mapcharacter_remove_from_pos, METH_VARARGS },
	 { "mapcharacter_jump", _wrap_mapcharacter_jump, METH_VARARGS },
	 { "mapcharacter_get_move", _wrap_mapcharacter_get_move, METH_VARARGS },
	 { "mapcharacter_filename", _wrap_mapcharacter_filename, METH_VARARGS },
	 { "mapcharacter_set_schedule", _wrap_mapcharacter_set_schedule, METH_VARARGS },
	 { "mapcharacter_get_schedule", _wrap_mapcharacter_get_schedule, METH_VARARGS },
	 { "mapcharacter_is_schedule_activated", _wrap_mapcharacter_is_schedule_activated, METH_VARARGS },
	 { "mapcharacter_set_schedule_active", _wrap_mapcharacter_set_schedule_active, METH_VARARGS },
	 { "mapcharacter_set_action", _wrap_mapcharacter_set_action, METH_VARARGS },
	 { "mapcharacter_get_action", _wrap_mapcharacter_get_action, METH_VARARGS },
	 { "mapcharacter_is_action_activated", _wrap_mapcharacter_is_action_activated, METH_VARARGS },
	 { "mapcharacter_set_action_active", _wrap_mapcharacter_set_action_active, METH_VARARGS },
	 { "mapcharacter_update_move", _wrap_mapcharacter_update_move, METH_VARARGS },
	 { "mapcharacter_update", _wrap_mapcharacter_update, METH_VARARGS },
	 { "mapcharacter_launch_action", _wrap_mapcharacter_launch_action, METH_VARARGS },
	 { "mapcharacter_draw", _wrap_mapcharacter_draw, METH_VARARGS },
	 { "mapcharacter_can_go_north", _wrap_mapcharacter_can_go_north, METH_VARARGS },
	 { "mapcharacter_can_go_south", _wrap_mapcharacter_can_go_south, METH_VARARGS },
	 { "mapcharacter_can_go_east", _wrap_mapcharacter_can_go_east, METH_VARARGS },
	 { "mapcharacter_can_go_west", _wrap_mapcharacter_can_go_west, METH_VARARGS },
	 { "mapcharacter_stand", _wrap_mapcharacter_stand, METH_VARARGS },
	 { "mapcharacter_stand_north", _wrap_mapcharacter_stand_north, METH_VARARGS },
	 { "mapcharacter_stand_south", _wrap_mapcharacter_stand_south, METH_VARARGS },
	 { "mapcharacter_stand_east", _wrap_mapcharacter_stand_east, METH_VARARGS },
	 { "mapcharacter_stand_west", _wrap_mapcharacter_stand_west, METH_VARARGS },
	 { "mapcharacter_go_north", _wrap_mapcharacter_go_north, METH_VARARGS },
	 { "mapcharacter_go_south", _wrap_mapcharacter_go_south, METH_VARARGS },
	 { "mapcharacter_go_east", _wrap_mapcharacter_go_east, METH_VARARGS },
	 { "mapcharacter_go_west", _wrap_mapcharacter_go_west, METH_VARARGS },
	 { "mapcharacter_look_invert", _wrap_mapcharacter_look_invert, METH_VARARGS },
	 { "mapcharacter_whosnext", _wrap_mapcharacter_whosnext, METH_VARARGS },
	 { "new_character", _wrap_new_character, METH_VARARGS },
	 { "delete_character", _wrap_delete_character, METH_VARARGS },
	 { "new_mapsquare", _wrap_new_mapsquare, METH_VARARGS },
	 { "delete_mapsquare", _wrap_delete_mapsquare, METH_VARARGS },
	 { "mapsquare_is_free", _wrap_mapsquare_is_free, METH_VARARGS },
	 { "mapsquare_whoshere", _wrap_mapsquare_whoshere, METH_VARARGS },
	 { "mapsquare_is_walkable_west", _wrap_mapsquare_is_walkable_west, METH_VARARGS },
	 { "mapsquare_is_walkable_east", _wrap_mapsquare_is_walkable_east, METH_VARARGS },
	 { "mapsquare_is_walkable_north", _wrap_mapsquare_is_walkable_north, METH_VARARGS },
	 { "mapsquare_is_walkable_south", _wrap_mapsquare_is_walkable_south, METH_VARARGS },
	 { "mapsquare_set_walkable_west", _wrap_mapsquare_set_walkable_west, METH_VARARGS },
	 { "mapsquare_set_walkable_east", _wrap_mapsquare_set_walkable_east, METH_VARARGS },
	 { "mapsquare_set_walkable_north", _wrap_mapsquare_set_walkable_north, METH_VARARGS },
	 { "mapsquare_set_walkable_south", _wrap_mapsquare_set_walkable_south, METH_VARARGS },
	 { "landmap_nbr_of_patterns_set", _wrap_landmap_nbr_of_patterns_set, METH_VARARGS },
	 { "landmap_nbr_of_patterns_get", _wrap_landmap_nbr_of_patterns_get, METH_VARARGS },
	 { "landmap_nbr_of_submaps_set", _wrap_landmap_nbr_of_submaps_set, METH_VARARGS },
	 { "landmap_nbr_of_submaps_get", _wrap_landmap_nbr_of_submaps_get, METH_VARARGS },
	 { "new_landmap", _wrap_new_landmap, METH_VARARGS },
	 { "landmap_clear", _wrap_landmap_clear, METH_VARARGS },
	 { "delete_landmap", _wrap_delete_landmap, METH_VARARGS },
	 { "landmap_get_nbr_of_patterns", _wrap_landmap_get_nbr_of_patterns, METH_VARARGS },
	 { "landmap_get_nbr_of_submaps", _wrap_landmap_get_nbr_of_submaps, METH_VARARGS },
	 { "landmap_filename", _wrap_landmap_filename, METH_VARARGS },
	 { "landmap_get", _wrap_landmap_get, METH_VARARGS },
	 { "landmap_load", _wrap_landmap_load, METH_VARARGS },
	 { "landmap_put_mapchar", _wrap_landmap_put_mapchar, METH_VARARGS },
	 { "landmap_remove_mapchar", _wrap_landmap_remove_mapchar, METH_VARARGS },
	 { "landmap_add_mapcharacter", _wrap_landmap_add_mapcharacter, METH_VARARGS },
	 { "landmap_get_mapchar", _wrap_landmap_get_mapchar, METH_VARARGS },
	 { "landmap_remove_submap", _wrap_landmap_remove_submap, METH_VARARGS },
	 { "landmap_put_mapobject", _wrap_landmap_put_mapobject, METH_VARARGS },
	 { "landmap_update", _wrap_landmap_update, METH_VARARGS },
	 { "landmap_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "landmap_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "mapview_init", _wrap_mapview_init, METH_VARARGS },
	 { "new_mapview", _wrap_new_mapview, METH_VARARGS },
	 { "delete_mapview", _wrap_delete_mapview, METH_VARARGS },
	 { "mapview_length", _wrap_mapview_length, METH_VARARGS },
	 { "mapview_height", _wrap_mapview_height, METH_VARARGS },
	 { "mapview_attach_map", _wrap_mapview_attach_map, METH_VARARGS },
	 { "mapview_detach_map", _wrap_mapview_detach_map, METH_VARARGS },
	 { "mapview_set_current_submap", _wrap_mapview_set_current_submap, METH_VARARGS },
	 { "mapview_set_pos", _wrap_mapview_set_pos, METH_VARARGS },
	 { "mapview_center_on", _wrap_mapview_center_on, METH_VARARGS },
	 { "mapview_can_scroll_right", _wrap_mapview_can_scroll_right, METH_VARARGS },
	 { "mapview_can_scroll_left", _wrap_mapview_can_scroll_left, METH_VARARGS },
	 { "mapview_can_scroll_up", _wrap_mapview_can_scroll_up, METH_VARARGS },
	 { "mapview_can_scroll_down", _wrap_mapview_can_scroll_down, METH_VARARGS },
	 { "mapview_scroll_right", _wrap_mapview_scroll_right, METH_VARARGS },
	 { "mapview_scroll_left", _wrap_mapview_scroll_left, METH_VARARGS },
	 { "mapview_scroll_down", _wrap_mapview_scroll_down, METH_VARARGS },
	 { "mapview_scroll_up", _wrap_mapview_scroll_up, METH_VARARGS },
	 { "mapview_get_current_submap", _wrap_mapview_get_current_submap, METH_VARARGS },
	 { "mapview_get_posx", _wrap_mapview_get_posx, METH_VARARGS },
	 { "mapview_get_posy", _wrap_mapview_get_posy, METH_VARARGS },
	 { "mapview_resize", _wrap_mapview_resize, METH_VARARGS },
	 { "mapview_get_state", _wrap_mapview_get_state, METH_VARARGS },
	 { "mapview_put_state", _wrap_mapview_put_state, METH_VARARGS },
	 { "mapview_set_schedule", _wrap_mapview_set_schedule, METH_VARARGS },
	 { "mapview_update", _wrap_mapview_update, METH_VARARGS },
	 { "mapview_draw", _wrap_mapview_draw, METH_VARARGS },
	 { "new_mapengine", _wrap_new_mapengine, METH_VARARGS },
	 { "delete_mapengine", _wrap_delete_mapengine, METH_VARARGS },
	 { "mapengine_set_mapview_schedule", _wrap_mapengine_set_mapview_schedule, METH_VARARGS },
	 { "mapengine_load_map", _wrap_mapengine_load_map, METH_VARARGS },
	 { "mapengine_get_landmap", _wrap_mapengine_get_landmap, METH_VARARGS },
	 { "mapengine_run", _wrap_mapengine_run, METH_VARARGS },
	 { "mapengine_quit", _wrap_mapengine_quit, METH_VARARGS },
	 { "mapengine_get_state", _wrap_mapengine_get_state, METH_VARARGS },
	 { "mapengine_put_state", _wrap_mapengine_put_state, METH_VARARGS },
	 { "mapengine_mainloop", _wrap_mapengine_mainloop, METH_VARARGS },
	 { "new_win_font", _wrap_new_win_font, METH_VARARGS },
	 { "delete_win_font", _wrap_delete_win_font, METH_VARARGS },
	 { "win_font_load", _wrap_win_font_load, METH_VARARGS },
	 { "win_font_load_font", _wrap_win_font_load_font, METH_VARARGS },
	 { "win_font_in_table", _wrap_win_font_in_table, METH_VARARGS },
	 { "win_font_height", _wrap_win_font_height, METH_VARARGS },
	 { "win_font_length", _wrap_win_font_length, METH_VARARGS },
	 { "win_font_cursor_set", _wrap_win_font_cursor_set, METH_VARARGS },
	 { "win_font_cursor_get", _wrap_win_font_cursor_get, METH_VARARGS },
	 { "win_theme_normal_set", _wrap_win_theme_normal_set, METH_VARARGS },
	 { "win_theme_normal_get", _wrap_win_theme_normal_get, METH_VARARGS },
	 { "win_theme_mini_set", _wrap_win_theme_mini_set, METH_VARARGS },
	 { "win_theme_mini_get", _wrap_win_theme_mini_get, METH_VARARGS },
	 { "win_theme_background_set", _wrap_win_theme_background_set, METH_VARARGS },
	 { "win_theme_background_get", _wrap_win_theme_background_get, METH_VARARGS },
	 { "win_theme_scrollbar_set", _wrap_win_theme_scrollbar_set, METH_VARARGS },
	 { "win_theme_scrollbar_get", _wrap_win_theme_scrollbar_get, METH_VARARGS },
	 { "new_win_theme", _wrap_new_win_theme, METH_VARARGS },
	 { "win_theme_destroy", _wrap_win_theme_destroy, METH_VARARGS },
	 { "win_theme_update", _wrap_win_theme_update, METH_VARARGS },
	 { "delete_win_theme", _wrap_delete_win_theme, METH_VARARGS },
	 { "new_win_base", _wrap_new_win_base, METH_VARARGS },
	 { "win_base_x", _wrap_win_base_x, METH_VARARGS },
	 { "win_base_y", _wrap_win_base_y, METH_VARARGS },
	 { "win_base_length", _wrap_win_base_length, METH_VARARGS },
	 { "win_base_height", _wrap_win_base_height, METH_VARARGS },
	 { "win_base_padx", _wrap_win_base_padx, METH_VARARGS },
	 { "win_base_pady", _wrap_win_base_pady, METH_VARARGS },
	 { "win_base_realx", _wrap_win_base_realx, METH_VARARGS },
	 { "win_base_realy", _wrap_win_base_realy, METH_VARARGS },
	 { "win_base_move", _wrap_win_base_move, METH_VARARGS },
	 { "win_base_resize", _wrap_win_base_resize, METH_VARARGS },
	 { "win_base_set_border_size", _wrap_win_base_set_border_size, METH_VARARGS },
	 { "win_base_set_align", _wrap_win_base_set_align, METH_VARARGS },
	 { "win_base_align", _wrap_win_base_align, METH_VARARGS },
	 { "win_base_set_visible", _wrap_win_base_set_visible, METH_VARARGS },
	 { "win_base_is_visible", _wrap_win_base_is_visible, METH_VARARGS },
	 { "win_base_set_background_visible", _wrap_win_base_set_background_visible, METH_VARARGS },
	 { "win_base_is_background_visible", _wrap_win_base_is_background_visible, METH_VARARGS },
	 { "win_base_set_border_visible", _wrap_win_base_set_border_visible, METH_VARARGS },
	 { "win_base_is_border_visible", _wrap_win_base_is_border_visible, METH_VARARGS },
	 { "win_base_set_return_code", _wrap_win_base_set_return_code, METH_VARARGS },
	 { "win_base_py_signal_connect", _wrap_win_base_py_signal_connect, METH_VARARGS },
	 { "win_base_is_can_be_selected", _wrap_win_base_is_can_be_selected, METH_VARARGS },
	 { "win_base_set_can_be_selected", _wrap_win_base_set_can_be_selected, METH_VARARGS },
	 { "win_base_is_in_select", _wrap_win_base_is_in_select, METH_VARARGS },
	 { "win_base_is_select", _wrap_win_base_is_select, METH_VARARGS },
	 { "win_base_set_activated", _wrap_win_base_set_activated, METH_VARARGS },
	 { "win_base_is_activated", _wrap_win_base_is_activated, METH_VARARGS },
	 { "win_base_is_focus", _wrap_win_base_is_focus, METH_VARARGS },
	 { "win_base_set_focus", _wrap_win_base_set_focus, METH_VARARGS },
	 { "win_base_set_draw_brightness", _wrap_win_base_set_draw_brightness, METH_VARARGS },
	 { "win_base_set_level_brightness", _wrap_win_base_set_level_brightness, METH_VARARGS },
	 { "win_base_set_level_trans_background", _wrap_win_base_set_level_trans_background, METH_VARARGS },
	 { "win_base_set_theme", _wrap_win_base_set_theme, METH_VARARGS },
	 { "win_base_get_drawing_area", _wrap_win_base_get_drawing_area, METH_VARARGS },
	 { "win_base_update", _wrap_win_base_update, METH_VARARGS },
	 { "win_base_update_real_position", _wrap_win_base_update_real_position, METH_VARARGS },
	 { "win_base_draw", _wrap_win_base_draw, METH_VARARGS },
	 { "delete_win_base", _wrap_delete_win_base, METH_VARARGS },
	 { "new_win_container", _wrap_new_win_container, METH_VARARGS },
	 { "delete_win_container", _wrap_delete_win_container, METH_VARARGS },
	 { "win_container_add", _wrap_win_container_add, METH_VARARGS },
	 { "win_container_remove", _wrap_win_container_remove, METH_VARARGS },
	 { "win_container_remove_all", _wrap_win_container_remove_all, METH_VARARGS },
	 { "win_container_destroy", _wrap_win_container_destroy, METH_VARARGS },
	 { "win_container_update", _wrap_win_container_update, METH_VARARGS },
	 { "win_container_draw", _wrap_win_container_draw, METH_VARARGS },
	 { "win_container_move", _wrap_win_container_move, METH_VARARGS },
	 { "win_container_resize", _wrap_win_container_resize, METH_VARARGS },
	 { "win_container_set_space_between_border", _wrap_win_container_set_space_between_border, METH_VARARGS },
	 { "win_container_set_space_between_object", _wrap_win_container_set_space_between_object, METH_VARARGS },
	 { "win_container_space_between_border", _wrap_win_container_space_between_border, METH_VARARGS },
	 { "win_container_space_between_object", _wrap_win_container_space_between_object, METH_VARARGS },
	 { "win_container_set_draw_brightness", _wrap_win_container_set_draw_brightness, METH_VARARGS },
	 { "win_container_set_visible_all", _wrap_win_container_set_visible_all, METH_VARARGS },
	 { "win_container_set_align_all", _wrap_win_container_set_align_all, METH_VARARGS },
	 { "win_container_set_layout", _wrap_win_container_set_layout, METH_VARARGS },
	 { "win_container_update_real_position", _wrap_win_container_update_real_position, METH_VARARGS },
	 { "win_container_set_focus", _wrap_win_container_set_focus, METH_VARARGS },
	 { "win_container_is_focus", _wrap_win_container_is_focus, METH_VARARGS },
	 { "new_win_label", _wrap_new_win_label, METH_VARARGS },
	 { "win_label_draw", _wrap_win_label_draw, METH_VARARGS },
	 { "win_label_set_text", _wrap_win_label_set_text, METH_VARARGS },
	 { "win_label_add_text", _wrap_win_label_add_text, METH_VARARGS },
	 { "win_label_is_auto_size", _wrap_win_label_is_auto_size, METH_VARARGS },
	 { "win_label_is_auto_height", _wrap_win_label_is_auto_height, METH_VARARGS },
	 { "win_label_set_auto_size", _wrap_win_label_set_auto_size, METH_VARARGS },
	 { "win_label_set_auto_height", _wrap_win_label_set_auto_height, METH_VARARGS },
	 { "win_label_resize", _wrap_win_label_resize, METH_VARARGS },
	 { "win_label_update", _wrap_win_label_update, METH_VARARGS },
	 { "win_label_set_cursor_blinking", _wrap_win_label_set_cursor_blinking, METH_VARARGS },
	 { "win_label_is_cursor_blinking", _wrap_win_label_is_cursor_blinking, METH_VARARGS },
	 { "win_label_set_cursor_blinking_speed", _wrap_win_label_set_cursor_blinking_speed, METH_VARARGS },
	 { "win_label_get_text", _wrap_win_label_get_text, METH_VARARGS },
	 { "delete_win_label", _wrap_delete_win_label, METH_VARARGS },
	 { "new_win_image", _wrap_new_win_image, METH_VARARGS },
	 { "delete_win_image", _wrap_delete_win_image, METH_VARARGS },
	 { "win_image_resize", _wrap_win_image_resize, METH_VARARGS },
	 { "win_image_set_image", _wrap_win_image_set_image, METH_VARARGS },
	 { "win_image_draw", _wrap_win_image_draw, METH_VARARGS },
	 { "win_image_set_stretch", _wrap_win_image_set_stretch, METH_VARARGS },
	 { "win_image_is_stretch", _wrap_win_image_is_stretch, METH_VARARGS },
	 { "new_win_scrolled", _wrap_new_win_scrolled, METH_VARARGS },
	 { "delete_win_scrolled", _wrap_delete_win_scrolled, METH_VARARGS },
	 { "win_scrolled_up", _wrap_win_scrolled_up, METH_VARARGS },
	 { "win_scrolled_down", _wrap_win_scrolled_down, METH_VARARGS },
	 { "win_scrolled_amplitude", _wrap_win_scrolled_amplitude, METH_VARARGS },
	 { "win_scrolled_add", _wrap_win_scrolled_add, METH_VARARGS },
	 { "win_scrolled_remove", _wrap_win_scrolled_remove, METH_VARARGS },
	 { "win_scrolled_remove_all", _wrap_win_scrolled_remove_all, METH_VARARGS },
	 { "win_scrolled_resize", _wrap_win_scrolled_resize, METH_VARARGS },
	 { "win_scrolled_destroy", _wrap_win_scrolled_destroy, METH_VARARGS },
	 { "win_scrolled_draw", _wrap_win_scrolled_draw, METH_VARARGS },
	 { "win_scrolled_update", _wrap_win_scrolled_update, METH_VARARGS },
	 { "win_scrolled_set_space_between_border", _wrap_win_scrolled_set_space_between_border, METH_VARARGS },
	 { "win_scrolled_set_space_between_object", _wrap_win_scrolled_set_space_between_object, METH_VARARGS },
	 { "win_scrolled_set_scrollbar_visible", _wrap_win_scrolled_set_scrollbar_visible, METH_VARARGS },
	 { "win_scrolled_is_scrollbar_visible", _wrap_win_scrolled_is_scrollbar_visible, METH_VARARGS },
	 { "new_win_select", _wrap_new_win_select, METH_VARARGS },
	 { "delete_win_select", _wrap_delete_win_select, METH_VARARGS },
	 { "win_select_add", _wrap_win_select_add, METH_VARARGS },
	 { "win_select_remove", _wrap_win_select_remove, METH_VARARGS },
	 { "win_select_remove_all", _wrap_win_select_remove_all, METH_VARARGS },
	 { "win_select_destroy", _wrap_win_select_destroy, METH_VARARGS },
	 { "win_select_update", _wrap_win_select_update, METH_VARARGS },
	 { "win_select_get", _wrap_win_select_get, METH_VARARGS },
	 { "win_select_get_pos", _wrap_win_select_get_pos, METH_VARARGS },
	 { "win_select_set_default", _wrap_win_select_set_default, METH_VARARGS },
	 { "win_select_set_can_be_selected_all", _wrap_win_select_set_can_be_selected_all, METH_VARARGS },
	 { "win_select_set_type", _wrap_win_select_set_type, METH_VARARGS },
	 { "win_select_type", _wrap_win_select_type, METH_VARARGS },
	 { "win_select_set_select_mode", _wrap_win_select_set_select_mode, METH_VARARGS },
	 { "win_select_set_select_circle", _wrap_win_select_set_select_circle, METH_VARARGS },
	 { "win_select_is_select_circle", _wrap_win_select_is_select_circle, METH_VARARGS },
	 { "win_select_next", _wrap_win_select_next, METH_VARARGS },
	 { "win_select_previous", _wrap_win_select_previous, METH_VARARGS },
	 { "win_select_set_cur_select", _wrap_win_select_set_cur_select, METH_VARARGS },
	 { "win_select_back", _wrap_win_select_back, METH_VARARGS },
	 { "win_select_activate", _wrap_win_select_activate, METH_VARARGS },
	 { "win_select_set_activate_keyboard", _wrap_win_select_set_activate_keyboard, METH_VARARGS },
	 { "win_select_is_activate_keyboard", _wrap_win_select_is_activate_keyboard, METH_VARARGS },
	 { "win_select_init", _wrap_win_select_init, METH_VARARGS },
	 { "win_manager_add", _wrap_win_manager_add, METH_VARARGS },
	 { "win_manager_exist", _wrap_win_manager_exist, METH_VARARGS },
	 { "win_manager_remove", _wrap_win_manager_remove, METH_VARARGS },
	 { "win_manager_update", _wrap_win_manager_update, METH_VARARGS },
	 { "win_manager_draw", _wrap_win_manager_draw, METH_VARARGS },
	 { "win_manager_set_focus", _wrap_win_manager_set_focus, METH_VARARGS },
	 { "win_manager_destroy", _wrap_win_manager_destroy, METH_VARARGS },
	 { "new_win_manager", _wrap_new_win_manager, METH_VARARGS },
	 { "delete_win_manager", _wrap_delete_win_manager, METH_VARARGS },
	 { "dialog_engine_set_portrait", _wrap_dialog_engine_set_portrait, METH_VARARGS },
	 { "dialog_engine_set_name", _wrap_dialog_engine_set_name, METH_VARARGS },
	 { "dialog_engine_set_npc", _wrap_dialog_engine_set_npc, METH_VARARGS },
	 { "new_dialog_engine", _wrap_new_dialog_engine, METH_VARARGS },
	 { "dialog_engine_init", _wrap_dialog_engine_init, METH_VARARGS },
	 { "delete_dialog_engine", _wrap_delete_dialog_engine, METH_VARARGS },
	 { "dialog_engine_update", _wrap_dialog_engine_update, METH_VARARGS },
	 { "dialog_engine_run", _wrap_dialog_engine_run, METH_VARARGS },
	 { "new_data_screen", _wrap_new_data_screen, METH_VARARGS },
	 { "delete_data_screen", _wrap_delete_data_screen, METH_VARARGS },
	 { "data_screen_update", _wrap_data_screen_update, METH_VARARGS },
	 { "data_init", _wrap_data_init, METH_VARARGS },
	 { "data_cleanup", _wrap_data_cleanup, METH_VARARGS },
	 { "data_load", _wrap_data_load, METH_VARARGS },
	 { "data_save", _wrap_data_save, METH_VARARGS },
	 { "data_next_save", _wrap_data_next_save, METH_VARARGS },
	 { "data_get_adonthell_dir", _wrap_data_get_adonthell_dir, METH_VARARGS },
	 { "new_data", _wrap_new_data, METH_VARARGS },
	 { "delete_data", _wrap_delete_data, METH_VARARGS },
	 { NULL, NULL }
};

#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_character_baseTo_p_storage(void *x) {
    return (void *)((storage *) ((character_base *) x));
}
static void *_p_questTo_p_storage(void *x) {
    return (void *)((storage *) ((quest *) x));
}
static void *_p_mapcharacterTo_p_storage(void *x) {
    return (void *)((storage *) ((mapcharacter *) x));
}
static void *_p_characterTo_p_storage(void *x) {
    return (void *)((storage *) ((character *) x));
}
static void *_p_mapcharacterTo_p_character_base(void *x) {
    return (void *)((character_base *) ((mapcharacter *) x));
}
static void *_p_characterTo_p_character_base(void *x) {
    return (void *)((character_base *) ((character *) x));
}
static void *_p_landmapTo_p_event_list(void *x) {
    return (void *)((event_list *) ((landmap *) x));
}
static void *_p_characterTo_p_mapcharacter(void *x) {
    return (void *)((mapcharacter *) ((character *) x));
}
static void *_p_dialog_engineTo_p_win_container(void *x) {
    return (void *)((win_container *) ((dialog_engine *) x));
}
static void *_p_win_selectTo_p_win_container(void *x) {
    return (void *)((win_container *) ((win_select *) x));
}
static void *_p_data_screenTo_p_win_container(void *x) {
    return (void *)((win_container *) ((data_screen *) x));
}
static void *_p_win_scrolledTo_p_win_container(void *x) {
    return (void *)((win_container *) ((win_scrolled *) x));
}
static void *_p_leave_eventTo_p_base_map_event(void *x) {
    return (void *)((base_map_event *) ((leave_event *) x));
}
static void *_p_enter_eventTo_p_base_map_event(void *x) {
    return (void *)((base_map_event *) ((enter_event *) x));
}
static void *_p_leave_eventTo_p_event(void *x) {
    return (void *)((event *) ((leave_event *) x));
}
static void *_p_time_eventTo_p_event(void *x) {
    return (void *)((event *) ((time_event *) x));
}
static void *_p_base_map_eventTo_p_event(void *x) {
    return (void *)((event *) ((base_map_event *) x));
}
static void *_p_enter_eventTo_p_event(void *x) {
    return (void *)((event *) ((enter_event *) x));
}
static void *_p_win_selectTo_p_win_scrolled(void *x) {
    return (void *)((win_scrolled *) ((win_select *) x));
}
static void *_p_dialog_engineTo_p_win_base(void *x) {
    return (void *)((win_base *) ((dialog_engine *) x));
}
static void *_p_win_imageTo_p_win_base(void *x) {
    return (void *)((win_base *) ((win_image *) x));
}
static void *_p_win_labelTo_p_win_base(void *x) {
    return (void *)((win_base *) ((win_label *) x));
}
static void *_p_win_selectTo_p_win_base(void *x) {
    return (void *)((win_base *) ((win_select *) x));
}
static void *_p_data_screenTo_p_win_base(void *x) {
    return (void *)((win_base *) ((data_screen *) x));
}
static void *_p_win_containerTo_p_win_base(void *x) {
    return (void *)((win_base *) ((win_container *) x));
}
static void *_p_win_scrolledTo_p_win_base(void *x) {
    return (void *)((win_base *) ((win_scrolled *) x));
}
static swig_type_info _swigt__p_screen[] = {{"_p_screen", 0, "screen *"},{"_p_screen"},{0}};
static swig_type_info _swigt__p_data_screen[] = {{"_p_data_screen", 0, "data_screen *"},{"_p_data_screen"},{0}};
static swig_type_info _swigt__p_storage[] = {{"_p_storage", 0, "storage *"},{"_p_character_base", _p_character_baseTo_p_storage},{"_p_quest", _p_questTo_p_storage},{"_p_storage"},{"_p_mapcharacter", _p_mapcharacterTo_p_storage},{"_p_character", _p_characterTo_p_storage},{0}};
static swig_type_info _swigt__p_data[] = {{"_p_data", 0, "data *"},{"_p_data"},{0}};
static swig_type_info _swigt__p_win_scrollbar[] = {{"_p_win_scrollbar", 0, "win_scrollbar *"},{"_p_win_scrollbar"},{0}};
static swig_type_info _swigt__p_character_base[] = {{"_p_character_base", 0, "character_base *"},{"_p_character_base"},{"_p_mapcharacter", _p_mapcharacterTo_p_character_base},{"_p_character", _p_characterTo_p_character_base},{0}};
static swig_type_info _swigt__p_drawing_area[] = {{"_p_drawing_area", 0, "drawing_area *"},{"_p_drawing_area"},{0}};
static swig_type_info _swigt__p_quest[] = {{"_p_quest", 0, "quest *"},{"_p_quest"},{0}};
static swig_type_info _swigt__p_win_theme[] = {{"_p_win_theme", 0, "win_theme *"},{"_p_win_theme"},{0}};
static swig_type_info _swigt__p_SDL_Event[] = {{"_p_SDL_Event", 0, "SDL_Event *"},{"_p_SDL_Event"},{0}};
static swig_type_info _swigt__p_gametime[] = {{"_p_gametime", 0, "gametime *"},{"_p_gametime"},{0}};
static swig_type_info _swigt__p_gzFile[] = {{"_p_gzFile", 0, "gzFile *"},{"_p_gzFile"},{0}};
static swig_type_info _swigt__p_mapview[] = {{"_p_mapview", 0, "mapview *"},{"_p_mapview"},{0}};
static swig_type_info _swigt__p_ltstr[] = {{"_p_ltstr", 0, "ltstr *"},{"_p_ltstr"},{0}};
static swig_type_info _swigt__p_win_background[] = {{"_p_win_background", 0, "win_background *"},{"_p_win_background"},{0}};
static swig_type_info _swigt__p_audio[] = {{"_p_audio", 0, "audio *"},{"_p_audio"},{0}};
static swig_type_info _swigt__p_pair_const_char___signed_int_[] = {{"_p_pair_const_char___signed_int_", 0, "pair<const char*, signed int> *"},{"_p_pair_const_char___signed_int_"},{0}};
static swig_type_info _swigt__p_leave_event[] = {{"_p_leave_event", 0, "leave_event *"},{"_p_leave_event"},{0}};
static swig_type_info _swigt__p_time_event[] = {{"_p_time_event", 0, "time_event *"},{"_p_time_event"},{0}};
static swig_type_info _swigt__p_string[] = {{"_p_string", 0, "string *"},{"_p_string"},{0}};
static swig_type_info _swigt__p_vector_event__[] = {{"_p_vector_event__", 0, "vector<event*> *"},{"_p_vector_event__"},{0}};
static swig_type_info _swigt__p_win_select[] = {{"_p_win_select", 0, "win_select *"},{"_p_win_select"},{0}};
static swig_type_info _swigt__p_image[] = {{"_p_image", 0, "image *"},{"_p_image"},{0}};
static swig_type_info _swigt__p_config[] = {{"_p_config", 0, "config *"},{"_p_config"},{0}};
static swig_type_info _swigt__p_event_list[] = {{"_p_event_list", 0, "event_list *"},{"_p_landmap", _p_landmapTo_p_event_list},{"_p_event_list"},{0}};
static swig_type_info _swigt__p_event_handler[] = {{"_p_event_handler", 0, "event_handler *"},{"_p_event_handler"},{0}};
static swig_type_info _swigt__p_win_image[] = {{"_p_win_image", 0, "win_image *"},{"_p_win_image"},{0}};
static swig_type_info _swigt__p_animation[] = {{"_p_animation", 0, "animation *"},{"_p_animation"},{0}};
static swig_type_info _swigt__p_character[] = {{"_p_character", 0, "character *"},{"_p_character"},{0}};
static swig_type_info _swigt__p_mapcharacter[] = {{"_p_mapcharacter", 0, "mapcharacter *"},{"_p_mapcharacter"},{"_p_character", _p_characterTo_p_mapcharacter},{0}};
static swig_type_info _swigt__p_win_container[] = {{"_p_win_container", 0, "win_container *"},{"_p_dialog_engine", _p_dialog_engineTo_p_win_container},{"_p_data_screen", _p_data_screenTo_p_win_container},{"_p_win_select", _p_win_selectTo_p_win_container},{"_p_win_container"},{"_p_win_scrolled", _p_win_scrolledTo_p_win_container},{0}};
static swig_type_info _swigt__p_dialog_engine[] = {{"_p_dialog_engine", 0, "dialog_engine *"},{"_p_dialog_engine"},{0}};
static swig_type_info _swigt__p_landmap[] = {{"_p_landmap", 0, "landmap *"},{"_p_landmap"},{0}};
static swig_type_info _swigt__p_mapobject[] = {{"_p_mapobject", 0, "mapobject *"},{"_p_mapobject"},{0}};
static swig_type_info _swigt__p_event[] = {{"_p_event", 0, "event *"},{"_p_time_event", _p_time_eventTo_p_event},{"_p_leave_event", _p_leave_eventTo_p_event},{"_p_event"},{"_p_base_map_event", _p_base_map_eventTo_p_event},{"_p_enter_event", _p_enter_eventTo_p_event},{0}};
static swig_type_info _swigt__p_base_map_event[] = {{"_p_base_map_event", 0, "base_map_event *"},{"_p_leave_event", _p_leave_eventTo_p_base_map_event},{"_p_base_map_event"},{"_p_enter_event", _p_enter_eventTo_p_base_map_event},{0}};
static swig_type_info _swigt__p_enter_event[] = {{"_p_enter_event", 0, "enter_event *"},{"_p_enter_event"},{0}};
static swig_type_info _swigt__p_short[] = {{"_p_short", 0, "short *"},{"_p_short"},{0}};
static swig_type_info _swigt__p_PyObject[] = {{"_p_PyObject", 0, "PyObject *"},{"_p_PyObject"},{0}};
static swig_type_info _swigt__p_objects[] = {{"_p_objects", 0, "objects *"},{"_p_objects"},{0}};
static swig_type_info _swigt__p_gamedata[] = {{"_p_gamedata", 0, "gamedata *"},{"_p_gamedata"},{0}};
static swig_type_info _swigt__p_input[] = {{"_p_input", 0, "input *"},{"_p_input"},{0}};
static swig_type_info _swigt__p_equal_key[] = {{"_p_equal_key", 0, "equal_key *"},{"_p_equal_key"},{0}};
static swig_type_info _swigt__p_win_label[] = {{"_p_win_label", 0, "win_label *"},{"_p_win_label"},{0}};
static swig_type_info _swigt__p_win_scrolled[] = {{"_p_win_scrolled", 0, "win_scrolled *"},{"_p_win_select", _p_win_selectTo_p_win_scrolled},{"_p_win_scrolled"},{0}};
static swig_type_info _swigt__p_animationframe[] = {{"_p_animationframe", 0, "animationframe *"},{"_p_animationframe"},{0}};
static swig_type_info _swigt__p_mapsquare[] = {{"_p_mapsquare", 0, "mapsquare *"},{"_p_mapsquare"},{0}};
static swig_type_info _swigt__p_SDL_RWops[] = {{"_p_SDL_RWops", 0, "SDL_RWops *"},{"_p_SDL_RWops"},{0}};
static swig_type_info _swigt__p_mapengine[] = {{"_p_mapengine", 0, "mapengine *"},{"_p_mapengine"},{0}};
static swig_type_info _swigt__p_win_border[] = {{"_p_win_border", 0, "win_border *"},{"_p_win_border"},{0}};
static swig_type_info _swigt__p_win_base[] = {{"_p_win_base", 0, "win_base *"},{"_p_win_base"},{"_p_dialog_engine", _p_dialog_engineTo_p_win_base},{"_p_win_image", _p_win_imageTo_p_win_base},{"_p_win_label", _p_win_labelTo_p_win_base},{"_p_data_screen", _p_data_screenTo_p_win_base},{"_p_win_select", _p_win_selectTo_p_win_base},{"_p_win_container", _p_win_containerTo_p_win_base},{"_p_win_scrolled", _p_win_scrolledTo_p_win_base},{0}};
static swig_type_info _swigt__p_win_font[] = {{"_p_win_font", 0, "win_font *"},{"_p_win_font"},{0}};
static swig_type_info _swigt__p_win_manager[] = {{"_p_win_manager", 0, "win_manager *"},{"_p_win_manager"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_screen, 
_swigt__p_data_screen, 
_swigt__p_storage, 
_swigt__p_data, 
_swigt__p_win_scrollbar, 
_swigt__p_character_base, 
_swigt__p_drawing_area, 
_swigt__p_quest, 
_swigt__p_win_theme, 
_swigt__p_SDL_Event, 
_swigt__p_gametime, 
_swigt__p_gzFile, 
_swigt__p_mapview, 
_swigt__p_ltstr, 
_swigt__p_win_background, 
_swigt__p_audio, 
_swigt__p_pair_const_char___signed_int_, 
_swigt__p_leave_event, 
_swigt__p_time_event, 
_swigt__p_string, 
_swigt__p_vector_event__, 
_swigt__p_win_select, 
_swigt__p_image, 
_swigt__p_config, 
_swigt__p_event_list, 
_swigt__p_event_handler, 
_swigt__p_win_image, 
_swigt__p_animation, 
_swigt__p_character, 
_swigt__p_mapcharacter, 
_swigt__p_win_container, 
_swigt__p_dialog_engine, 
_swigt__p_landmap, 
_swigt__p_mapobject, 
_swigt__p_event, 
_swigt__p_base_map_event, 
_swigt__p_enter_event, 
_swigt__p_short, 
_swigt__p_PyObject, 
_swigt__p_objects, 
_swigt__p_gamedata, 
_swigt__p_input, 
_swigt__p_equal_key, 
_swigt__p_win_label, 
_swigt__p_win_scrolled, 
_swigt__p_animationframe, 
_swigt__p_mapsquare, 
_swigt__p_SDL_RWops, 
_swigt__p_mapengine, 
_swigt__p_win_border, 
_swigt__p_win_base, 
_swigt__p_win_font, 
_swigt__p_win_manager, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
    { SWIG_PY_STRING, "EVENTS_DIR", 0, 0, (void *) "scripts/events/", 0 }, 
    { SWIG_PY_INT,     "ENTER_EVENT", (long) ENTER_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "LEAVE_EVENT", (long) LEAVE_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "TIME_EVENT", (long) TIME_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "MAX_EVENT", (long) MAX_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_UNKNOWN", (long) SDLK_UNKNOWN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_FIRST", (long) SDLK_FIRST, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BACKSPACE", (long) SDLK_BACKSPACE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_TAB", (long) SDLK_TAB, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_CLEAR", (long) SDLK_CLEAR, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RETURN", (long) SDLK_RETURN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PAUSE", (long) SDLK_PAUSE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_ESCAPE", (long) SDLK_ESCAPE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SPACE", (long) SDLK_SPACE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_EXCLAIM", (long) SDLK_EXCLAIM, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_QUOTEDBL", (long) SDLK_QUOTEDBL, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_HASH", (long) SDLK_HASH, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_DOLLAR", (long) SDLK_DOLLAR, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_AMPERSAND", (long) SDLK_AMPERSAND, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_QUOTE", (long) SDLK_QUOTE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LEFTPAREN", (long) SDLK_LEFTPAREN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RIGHTPAREN", (long) SDLK_RIGHTPAREN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_ASTERISK", (long) SDLK_ASTERISK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PLUS", (long) SDLK_PLUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_COMMA", (long) SDLK_COMMA, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_MINUS", (long) SDLK_MINUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PERIOD", (long) SDLK_PERIOD, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SLASH", (long) SDLK_SLASH, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_0", (long) SDLK_0, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_1", (long) SDLK_1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_2", (long) SDLK_2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_3", (long) SDLK_3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_4", (long) SDLK_4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_5", (long) SDLK_5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_6", (long) SDLK_6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_7", (long) SDLK_7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_8", (long) SDLK_8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_9", (long) SDLK_9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_COLON", (long) SDLK_COLON, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SEMICOLON", (long) SDLK_SEMICOLON, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LESS", (long) SDLK_LESS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_EQUALS", (long) SDLK_EQUALS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_GREATER", (long) SDLK_GREATER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_QUESTION", (long) SDLK_QUESTION, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_AT", (long) SDLK_AT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LEFTBRACKET", (long) SDLK_LEFTBRACKET, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BACKSLASH", (long) SDLK_BACKSLASH, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RIGHTBRACKET", (long) SDLK_RIGHTBRACKET, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_CARET", (long) SDLK_CARET, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_UNDERSCORE", (long) SDLK_UNDERSCORE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BACKQUOTE", (long) SDLK_BACKQUOTE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_a", (long) SDLK_a, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_b", (long) SDLK_b, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_c", (long) SDLK_c, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_d", (long) SDLK_d, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_e", (long) SDLK_e, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_f", (long) SDLK_f, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_g", (long) SDLK_g, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_h", (long) SDLK_h, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_i", (long) SDLK_i, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_j", (long) SDLK_j, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_k", (long) SDLK_k, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_l", (long) SDLK_l, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_m", (long) SDLK_m, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_n", (long) SDLK_n, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_o", (long) SDLK_o, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_p", (long) SDLK_p, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_q", (long) SDLK_q, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_r", (long) SDLK_r, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_s", (long) SDLK_s, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_t", (long) SDLK_t, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_u", (long) SDLK_u, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_v", (long) SDLK_v, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_w", (long) SDLK_w, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_x", (long) SDLK_x, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_y", (long) SDLK_y, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_z", (long) SDLK_z, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_DELETE", (long) SDLK_DELETE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_0", (long) SDLK_WORLD_0, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_1", (long) SDLK_WORLD_1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_2", (long) SDLK_WORLD_2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_3", (long) SDLK_WORLD_3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_4", (long) SDLK_WORLD_4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_5", (long) SDLK_WORLD_5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_6", (long) SDLK_WORLD_6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_7", (long) SDLK_WORLD_7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_8", (long) SDLK_WORLD_8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_9", (long) SDLK_WORLD_9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_10", (long) SDLK_WORLD_10, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_11", (long) SDLK_WORLD_11, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_12", (long) SDLK_WORLD_12, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_13", (long) SDLK_WORLD_13, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_14", (long) SDLK_WORLD_14, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_15", (long) SDLK_WORLD_15, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_16", (long) SDLK_WORLD_16, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_17", (long) SDLK_WORLD_17, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_18", (long) SDLK_WORLD_18, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_19", (long) SDLK_WORLD_19, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_20", (long) SDLK_WORLD_20, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_21", (long) SDLK_WORLD_21, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_22", (long) SDLK_WORLD_22, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_23", (long) SDLK_WORLD_23, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_24", (long) SDLK_WORLD_24, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_25", (long) SDLK_WORLD_25, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_26", (long) SDLK_WORLD_26, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_27", (long) SDLK_WORLD_27, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_28", (long) SDLK_WORLD_28, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_29", (long) SDLK_WORLD_29, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_30", (long) SDLK_WORLD_30, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_31", (long) SDLK_WORLD_31, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_32", (long) SDLK_WORLD_32, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_33", (long) SDLK_WORLD_33, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_34", (long) SDLK_WORLD_34, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_35", (long) SDLK_WORLD_35, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_36", (long) SDLK_WORLD_36, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_37", (long) SDLK_WORLD_37, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_38", (long) SDLK_WORLD_38, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_39", (long) SDLK_WORLD_39, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_40", (long) SDLK_WORLD_40, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_41", (long) SDLK_WORLD_41, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_42", (long) SDLK_WORLD_42, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_43", (long) SDLK_WORLD_43, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_44", (long) SDLK_WORLD_44, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_45", (long) SDLK_WORLD_45, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_46", (long) SDLK_WORLD_46, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_47", (long) SDLK_WORLD_47, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_48", (long) SDLK_WORLD_48, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_49", (long) SDLK_WORLD_49, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_50", (long) SDLK_WORLD_50, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_51", (long) SDLK_WORLD_51, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_52", (long) SDLK_WORLD_52, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_53", (long) SDLK_WORLD_53, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_54", (long) SDLK_WORLD_54, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_55", (long) SDLK_WORLD_55, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_56", (long) SDLK_WORLD_56, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_57", (long) SDLK_WORLD_57, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_58", (long) SDLK_WORLD_58, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_59", (long) SDLK_WORLD_59, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_60", (long) SDLK_WORLD_60, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_61", (long) SDLK_WORLD_61, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_62", (long) SDLK_WORLD_62, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_63", (long) SDLK_WORLD_63, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_64", (long) SDLK_WORLD_64, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_65", (long) SDLK_WORLD_65, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_66", (long) SDLK_WORLD_66, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_67", (long) SDLK_WORLD_67, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_68", (long) SDLK_WORLD_68, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_69", (long) SDLK_WORLD_69, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_70", (long) SDLK_WORLD_70, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_71", (long) SDLK_WORLD_71, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_72", (long) SDLK_WORLD_72, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_73", (long) SDLK_WORLD_73, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_74", (long) SDLK_WORLD_74, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_75", (long) SDLK_WORLD_75, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_76", (long) SDLK_WORLD_76, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_77", (long) SDLK_WORLD_77, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_78", (long) SDLK_WORLD_78, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_79", (long) SDLK_WORLD_79, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_80", (long) SDLK_WORLD_80, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_81", (long) SDLK_WORLD_81, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_82", (long) SDLK_WORLD_82, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_83", (long) SDLK_WORLD_83, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_84", (long) SDLK_WORLD_84, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_85", (long) SDLK_WORLD_85, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_86", (long) SDLK_WORLD_86, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_87", (long) SDLK_WORLD_87, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_88", (long) SDLK_WORLD_88, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_89", (long) SDLK_WORLD_89, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_90", (long) SDLK_WORLD_90, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_91", (long) SDLK_WORLD_91, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_92", (long) SDLK_WORLD_92, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_93", (long) SDLK_WORLD_93, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_94", (long) SDLK_WORLD_94, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_95", (long) SDLK_WORLD_95, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP0", (long) SDLK_KP0, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP1", (long) SDLK_KP1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP2", (long) SDLK_KP2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP3", (long) SDLK_KP3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP4", (long) SDLK_KP4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP5", (long) SDLK_KP5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP6", (long) SDLK_KP6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP7", (long) SDLK_KP7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP8", (long) SDLK_KP8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP9", (long) SDLK_KP9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_PERIOD", (long) SDLK_KP_PERIOD, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_DIVIDE", (long) SDLK_KP_DIVIDE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_MULTIPLY", (long) SDLK_KP_MULTIPLY, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_MINUS", (long) SDLK_KP_MINUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_PLUS", (long) SDLK_KP_PLUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_ENTER", (long) SDLK_KP_ENTER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_EQUALS", (long) SDLK_KP_EQUALS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_UP", (long) SDLK_UP, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_DOWN", (long) SDLK_DOWN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RIGHT", (long) SDLK_RIGHT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LEFT", (long) SDLK_LEFT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_INSERT", (long) SDLK_INSERT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_HOME", (long) SDLK_HOME, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_END", (long) SDLK_END, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PAGEUP", (long) SDLK_PAGEUP, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PAGEDOWN", (long) SDLK_PAGEDOWN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F1", (long) SDLK_F1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F2", (long) SDLK_F2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F3", (long) SDLK_F3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F4", (long) SDLK_F4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F5", (long) SDLK_F5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F6", (long) SDLK_F6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F7", (long) SDLK_F7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F8", (long) SDLK_F8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F9", (long) SDLK_F9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F10", (long) SDLK_F10, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F11", (long) SDLK_F11, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F12", (long) SDLK_F12, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F13", (long) SDLK_F13, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F14", (long) SDLK_F14, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F15", (long) SDLK_F15, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_NUMLOCK", (long) SDLK_NUMLOCK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_CAPSLOCK", (long) SDLK_CAPSLOCK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SCROLLOCK", (long) SDLK_SCROLLOCK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RSHIFT", (long) SDLK_RSHIFT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LSHIFT", (long) SDLK_LSHIFT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RCTRL", (long) SDLK_RCTRL, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LCTRL", (long) SDLK_LCTRL, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RALT", (long) SDLK_RALT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LALT", (long) SDLK_LALT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RMETA", (long) SDLK_RMETA, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LMETA", (long) SDLK_LMETA, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LSUPER", (long) SDLK_LSUPER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RSUPER", (long) SDLK_RSUPER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_MODE", (long) SDLK_MODE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_COMPOSE", (long) SDLK_COMPOSE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_HELP", (long) SDLK_HELP, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PRINT", (long) SDLK_PRINT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SYSREQ", (long) SDLK_SYSREQ, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BREAK", (long) SDLK_BREAK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_MENU", (long) SDLK_MENU, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_POWER", (long) SDLK_POWER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_EURO", (long) SDLK_EURO, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LAST", (long) SDLK_LAST, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_NONE", (long) KMOD_NONE, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_LSHIFT", (long) KMOD_LSHIFT, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_RSHIFT", (long) KMOD_RSHIFT, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_LCTRL", (long) KMOD_LCTRL, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_RCTRL", (long) KMOD_RCTRL, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_LALT", (long) KMOD_LALT, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_RALT", (long) KMOD_RALT, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_LMETA", (long) KMOD_LMETA, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_RMETA", (long) KMOD_RMETA, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_NUM", (long) KMOD_NUM, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_CAPS", (long) KMOD_CAPS, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_MODE", (long) KMOD_MODE, 0, 0, 0},
    { SWIG_PY_INT,     "KMOD_RESERVED", (long) KMOD_RESERVED, 0, 0, 0},
    { SWIG_PY_INT,     "LEFT_BUTTON", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "MIDDLE_BUTTON", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "RIGHT_BUTTON", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "NUM_WAVES", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "NUM_MUSIC", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "NUM_CHANNELS", (long) 4, 0, 0, 0},
    { SWIG_PY_STRING, "DIALOG_DIR", 0, 0, (void *) "dialogues/", 0 }, 
    { SWIG_PY_INT,     "DWARF", (long) DWARF, 0, 0, 0},
    { SWIG_PY_INT,     "ELF", (long) ELF, 0, 0, 0},
    { SWIG_PY_INT,     "HALFELF", (long) HALFELF, 0, 0, 0},
    { SWIG_PY_INT,     "HUMAN", (long) HUMAN, 0, 0, 0},
    { SWIG_PY_INT,     "FEMALE", (long) FEMALE, 0, 0, 0},
    { SWIG_PY_INT,     "MALE", (long) MALE, 0, 0, 0},
    { SWIG_PY_INT,     "FTD_LIMIT", (long) 100, 0, 0, 0},
    { SWIG_PY_STRING, "MAPOBJECTS_DIR", 0, 0, (void *) "gfx/mapobjects/", 0 }, 
    { SWIG_PY_STRING, "MAPCHAR_DIR", 0, 0, (void *) "gfx/mapcharacters/", 0 }, 
    { SWIG_PY_INT,     "STAND_NORTH", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_SOUTH", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_WEST", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_EAST", (long) 3, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_NORTH", (long) 4, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_SOUTH", (long) 5, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_WEST", (long) 6, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_EAST", (long) 7, 0, 0, 0},
    { SWIG_PY_INT,     "NBR_MOVES", (long) 8, 0, 0, 0},
    { SWIG_PY_INT,     "NO_MOVE", (long) 65535, 0, 0, 0},
    { SWIG_PY_STRING, "MAPS_DIR", 0, 0, (void *) "maps/", 0 }, 
    { SWIG_PY_INT,     "WIN_NB_TABLE_CHAR", (long) 127, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_TEXT_MAX_LENGTH", (long) 5000, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_FONT_HEIGHT", (long) 8, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_FONT_LENGHT", (long) 8, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SPACE_LENGHT", (long) 8, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_ALIGN_LEFT", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_ALIGN_RIGHT", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_ALIGN_CENTER", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_ALIGN_NONE", (long) 3, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_LAYOUT_NO", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_LAYOUT_LIST", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_LAYOUT_AUTO", (long) 2, 0, 0, 0},
    { SWIG_PY_STRING, "WIN_DIRECTORY", 0, 0, (void *) "gfx/window/", 0 }, 
    { SWIG_PY_STRING, "WIN_FONT_DIRECTORY", 0, 0, (void *) "font/", 0 }, 
    { SWIG_PY_STRING, "WIN_BORDER_DIRECTORY", 0, 0, (void *) "border/", 0 }, 
    { SWIG_PY_STRING, "WIN_BACKGROUND_DIRECTORY", 0, 0, (void *) "background/", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_DIRECTORY", 0, 0, (void *) "scrollbar/", 0 }, 
    { SWIG_PY_STRING, "WIN_CURSOR_DIRECTORY", 0, 0, (void *) "cursor/", 0 }, 
    { SWIG_PY_STRING, "WIN_FONT_FILE_IDX", 0, 0, (void *) "font.idx", 0 }, 
    { SWIG_PY_STRING, "WIN_FONT_FILE_PIC", 0, 0, (void *) "font.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_FONT_FILE", 0, 0, (void *) "font.font", 0 }, 
    { SWIG_PY_INT,     "WIN_CURSOR_BLINKING", (long) 75, 0, 0, 0},
    { SWIG_PY_STRING, "WIN_V_BORDER_TEMPLATE_FILE", 0, 0, (void *) "v_border.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_H_BORDER_TEMPLATE_FILE", 0, 0, (void *) "h_border.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_CORNER_TOP_LEFT_FILE", 0, 0, (void *) "corner_top_left.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_CORNER_TOP_RIGHT_FILE", 0, 0, (void *) "corner_top_right.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_CORNER_BOTTOM_LEFT_FILE", 0, 0, (void *) "corner_bottom_left.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_CORNER_BOTTOM_RIGHT_FILE", 0, 0, (void *) "corner_bottom_right.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_BACKGROUND_FILE", 0, 0, (void *) "background.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BAR_TOP", 0, 0, (void *) "scroll_bar_top.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BAR_MID", 0, 0, (void *) "scroll_bar_mid.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BAR_BOT", 0, 0, (void *) "scroll_bar_bot.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BAR_FLEX", 0, 0, (void *) "scroll_bar_flex.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BACK_TOP", 0, 0, (void *) "scroll_back_top.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BACK_MID", 0, 0, (void *) "scroll_back_mid.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_SCROLLBAR_BACK_BOT", 0, 0, (void *) "scroll_back_bot.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_CURSOR_FILE", 0, 0, (void *) "cursor.pnm", 0 }, 
    { SWIG_PY_STRING, "WIN_BORDER_NORMAL_SIZE", 0, 0, (void *) "normal/", 0 }, 
    { SWIG_PY_STRING, "WIN_BORDER_MINI_SIZE", 0, 0, (void *) "mini/", 0 }, 
    { SWIG_PY_STRING, "WIN_THEME_ORIGINAL", 0, 0, (void *) "original/", 0 }, 
    { SWIG_PY_STRING, "WIN_THEME_ELFE", 0, 0, (void *) "silverleaf/", 0 }, 
    { SWIG_PY_INT,     "WIN_OBJ_BASE", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_OBJ_LABEL", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_OBJ_WRITE", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_OBJ_IMAGE", (long) 3, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_OBJ_CONTAINER", (long) 4, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_OBJ_SCROLLED", (long) 5, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_OBJ_SELECT", (long) 6, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_ACTIVATE", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_UNACTIVATE", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_UPDATE", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_DRAW", (long) 3, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_DRAW_ONLY_VISIBLE", (long) 11, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_ACTIVATE_KEY", (long) 4, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_NEXT_KEY", (long) 5, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_PREVIOUS_KEY", (long) 6, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_SCROLL_UP", (long) 7, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_SCROLL_DOWN", (long) 8, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_SELECT", (long) 9, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_UNSELECT", (long) 10, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_KEYBOARD", (long) 12, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_DESTROY", (long) 20, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIG_CLOSE", (long) 21, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SELECT_MODE_BRIGHTNESS", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SELECT_MODE_BORDER", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SELECT_MODE_CURSOR", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIZE_NORMAL", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SIZE_MINI", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SELECT_TYPE_NORMAL", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SELECT_TYPE_SCROLL", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SCROLLBAR_PAD_DEFAULT", (long) 10, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SPACE_BETWEEN_BORDER", (long) 10, 0, 0, 0},
    { SWIG_PY_INT,     "WIN_SPACE_BETWEEN_OBJECT", (long) 5, 0, 0, 0},
    { SWIG_PY_INT,     "MAX_COLOR", (long) 6, 0, 0, 0},
    { SWIG_PY_INT,     "LOAD_SCREEN", (long) LOAD_SCREEN, 0, 0, 0},
    { SWIG_PY_INT,     "SAVE_SCREEN", (long) SAVE_SCREEN, 0, 0, 0},
{0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initadonthellc(void) {
    PyObject *m, *d;
    int i;
    SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule("adonthellc", adonthellcMethods);
    d = PyModule_GetDict(m);
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
    PyDict_SetItemString(d,"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,"input_last_key",_wrap_input__last_key_get, _wrap_input__last_key_set);
    SWIG_addvarlink(SWIG_globals,"input_mouse_posx",_wrap_input__mouse_posx_get, _wrap_input__mouse_posx_set);
    SWIG_addvarlink(SWIG_globals,"win_theme_theme",_wrap_win_theme__theme_get, _wrap_win_theme__theme_set);
    SWIG_addvarlink(SWIG_globals,"win_select_next_key",_wrap_win_select__next_key_get, _wrap_win_select__next_key_set);
    SWIG_addvarlink(SWIG_globals,"win_select_previous_key",_wrap_win_select__previous_key_get, _wrap_win_select__previous_key_set);
    SWIG_addvarlink(SWIG_globals,"win_select_activate_key",_wrap_win_select__activate_key_get, _wrap_win_select__activate_key_set);
    SWIG_addvarlink(SWIG_globals,"win_select_back_key",_wrap_win_select__back_key_get, _wrap_win_select__back_key_set);
    SWIG_addvarlink(SWIG_globals,"data_globals",_wrap_data__globals_get, _wrap_data__globals_set);
    SWIG_addvarlink(SWIG_globals,"data_py_module",_wrap_data__py_module_get, _wrap_data__py_module_set);
    SWIG_addvarlink(SWIG_globals,"data_time",_wrap_data__time_get, _wrap_data__time_set);
    SWIG_addvarlink(SWIG_globals,"data_characters",_wrap_data__characters_get, _wrap_data__characters_set);
    SWIG_addvarlink(SWIG_globals,"data_quests",_wrap_data__quests_get, _wrap_data__quests_set);
    SWIG_addvarlink(SWIG_globals,"data_the_player",_wrap_data__the_player_get, _wrap_data__the_player_set);
    SWIG_addvarlink(SWIG_globals,"data_map_engine",_wrap_data__map_engine_get, _wrap_data__map_engine_set);
    SWIG_InstallConstants(d,swig_const_table);
}

