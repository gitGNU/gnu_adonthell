/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3u-20001014-1904 (Alpha 5)
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include <stdlib.h>
#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(void)              SWIG_MakePtr(char *c, void *, swig_type_info *);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  "swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}
/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  unsigned long p;
  register int d;
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;

  if (!obj || (obj == Py_None)) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) Py_DECREF(obj);
      return 0;
    } else {
      if (newref) Py_DECREF(obj);
      goto type_error;
    }
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (newref) Py_DECREF(obj);
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*)p);
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[32], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[512];
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, type->name, NULL);
#else
  SWIG_MakePtr(result,ptr,type);
  robj = PyString_FromString(result);
#endif
  return robj;
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_input swig_types[0] 
static swig_type_info *swig_types[2];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= inputc.so
  ------------------------------------------------*/
#define SWIG_init    initinputc

#define SWIG_name    "inputc"


#include "input.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_input_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_init")) return NULL;
    input::init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_shutdown(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_shutdown")) return NULL;
    input::shutdown();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_update")) return NULL;
    input::update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static int _wrap_input__last_key_set(PyObject *val) {
    unsigned short  tval ;
    
    tval = (unsigned short ) PyInt_AsLong(val);
    if (PyErr_Occurred()) {
        PyErr_SetString(PyExc_TypeError,"C variable 'input_last_key'(unsigned short )");
        return 1; 
    }
    input::last_key = tval;
    return 0;
}


static PyObject *_wrap_input__last_key_get() {
    PyObject *pyobj;
    
    pyobj = PyInt_FromLong((long) input::last_key);
    return pyobj;
}


static PyObject *_wrap_input_is_pushed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"i:input_is_pushed",&arg0)) return NULL;
    result = (bool )input::is_pushed((SDLKey )arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_has_been_pushed(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"i:input_has_been_pushed",&arg0)) return NULL;
    result = (bool )input::has_been_pushed((SDLKey )arg0);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_get_next_key(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    long result ;
    
    if(!PyArg_ParseTuple(args,":input_get_next_key")) return NULL;
    result = (long )input::get_next_key();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_get_next_unicode(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    long result ;
    
    if(!PyArg_ParseTuple(args,":input_get_next_unicode")) return NULL;
    result = (long )input::get_next_unicode();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_input_set_key_repeat(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    int arg0 = SDL_DEFAULT_REPEAT_DELAY ;
    int arg1 = SDL_DEFAULT_REPEAT_INTERVAL ;
    
    if(!PyArg_ParseTuple(args,"|ii:input_set_key_repeat",&arg0,&arg1)) return NULL;
    input::set_key_repeat(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_input_clear_keys_queue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    
    if(!PyArg_ParseTuple(args,":input_clear_keys_queue")) return NULL;
    input::clear_keys_queue();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_input(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    input *result ;
    
    if(!PyArg_ParseTuple(args,":new_input")) return NULL;
    result = (input *)new input();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_input);
    return resultobj;
}


static PyObject *_wrap_delete_input(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    input *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_input",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_input,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyMethodDef inputcMethods[] = {
	 { "input_init", _wrap_input_init, METH_VARARGS },
	 { "input_shutdown", _wrap_input_shutdown, METH_VARARGS },
	 { "input_update", _wrap_input_update, METH_VARARGS },
	 { "input_is_pushed", _wrap_input_is_pushed, METH_VARARGS },
	 { "input_has_been_pushed", _wrap_input_has_been_pushed, METH_VARARGS },
	 { "input_get_next_key", _wrap_input_get_next_key, METH_VARARGS },
	 { "input_get_next_unicode", _wrap_input_get_next_unicode, METH_VARARGS },
	 { "input_set_key_repeat", _wrap_input_set_key_repeat, METH_VARARGS },
	 { "input_clear_keys_queue", _wrap_input_clear_keys_queue, METH_VARARGS },
	 { "new_input", _wrap_new_input, METH_VARARGS },
	 { "delete_input", _wrap_delete_input, METH_VARARGS },
	 { NULL, NULL }
};

#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static swig_type_info _swigt__p_input[] = {{"_p_input", 0, "input *"},{"_p_input"},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_input, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
    { SWIG_PY_INT,     "SDLK_UNKNOWN", (long) SDLK_UNKNOWN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_FIRST", (long) SDLK_FIRST, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BACKSPACE", (long) SDLK_BACKSPACE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_TAB", (long) SDLK_TAB, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_CLEAR", (long) SDLK_CLEAR, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RETURN", (long) SDLK_RETURN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PAUSE", (long) SDLK_PAUSE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_ESCAPE", (long) SDLK_ESCAPE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SPACE", (long) SDLK_SPACE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_EXCLAIM", (long) SDLK_EXCLAIM, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_QUOTEDBL", (long) SDLK_QUOTEDBL, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_HASH", (long) SDLK_HASH, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_DOLLAR", (long) SDLK_DOLLAR, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_AMPERSAND", (long) SDLK_AMPERSAND, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_QUOTE", (long) SDLK_QUOTE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LEFTPAREN", (long) SDLK_LEFTPAREN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RIGHTPAREN", (long) SDLK_RIGHTPAREN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_ASTERISK", (long) SDLK_ASTERISK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PLUS", (long) SDLK_PLUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_COMMA", (long) SDLK_COMMA, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_MINUS", (long) SDLK_MINUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PERIOD", (long) SDLK_PERIOD, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SLASH", (long) SDLK_SLASH, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_0", (long) SDLK_0, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_1", (long) SDLK_1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_2", (long) SDLK_2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_3", (long) SDLK_3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_4", (long) SDLK_4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_5", (long) SDLK_5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_6", (long) SDLK_6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_7", (long) SDLK_7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_8", (long) SDLK_8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_9", (long) SDLK_9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_COLON", (long) SDLK_COLON, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SEMICOLON", (long) SDLK_SEMICOLON, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LESS", (long) SDLK_LESS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_EQUALS", (long) SDLK_EQUALS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_GREATER", (long) SDLK_GREATER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_QUESTION", (long) SDLK_QUESTION, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_AT", (long) SDLK_AT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LEFTBRACKET", (long) SDLK_LEFTBRACKET, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BACKSLASH", (long) SDLK_BACKSLASH, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RIGHTBRACKET", (long) SDLK_RIGHTBRACKET, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_CARET", (long) SDLK_CARET, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_UNDERSCORE", (long) SDLK_UNDERSCORE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BACKQUOTE", (long) SDLK_BACKQUOTE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_a", (long) SDLK_a, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_b", (long) SDLK_b, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_c", (long) SDLK_c, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_d", (long) SDLK_d, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_e", (long) SDLK_e, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_f", (long) SDLK_f, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_g", (long) SDLK_g, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_h", (long) SDLK_h, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_i", (long) SDLK_i, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_j", (long) SDLK_j, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_k", (long) SDLK_k, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_l", (long) SDLK_l, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_m", (long) SDLK_m, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_n", (long) SDLK_n, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_o", (long) SDLK_o, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_p", (long) SDLK_p, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_q", (long) SDLK_q, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_r", (long) SDLK_r, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_s", (long) SDLK_s, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_t", (long) SDLK_t, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_u", (long) SDLK_u, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_v", (long) SDLK_v, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_w", (long) SDLK_w, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_x", (long) SDLK_x, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_y", (long) SDLK_y, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_z", (long) SDLK_z, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_DELETE", (long) SDLK_DELETE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_0", (long) SDLK_WORLD_0, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_1", (long) SDLK_WORLD_1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_2", (long) SDLK_WORLD_2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_3", (long) SDLK_WORLD_3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_4", (long) SDLK_WORLD_4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_5", (long) SDLK_WORLD_5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_6", (long) SDLK_WORLD_6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_7", (long) SDLK_WORLD_7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_8", (long) SDLK_WORLD_8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_9", (long) SDLK_WORLD_9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_10", (long) SDLK_WORLD_10, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_11", (long) SDLK_WORLD_11, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_12", (long) SDLK_WORLD_12, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_13", (long) SDLK_WORLD_13, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_14", (long) SDLK_WORLD_14, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_15", (long) SDLK_WORLD_15, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_16", (long) SDLK_WORLD_16, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_17", (long) SDLK_WORLD_17, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_18", (long) SDLK_WORLD_18, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_19", (long) SDLK_WORLD_19, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_20", (long) SDLK_WORLD_20, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_21", (long) SDLK_WORLD_21, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_22", (long) SDLK_WORLD_22, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_23", (long) SDLK_WORLD_23, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_24", (long) SDLK_WORLD_24, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_25", (long) SDLK_WORLD_25, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_26", (long) SDLK_WORLD_26, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_27", (long) SDLK_WORLD_27, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_28", (long) SDLK_WORLD_28, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_29", (long) SDLK_WORLD_29, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_30", (long) SDLK_WORLD_30, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_31", (long) SDLK_WORLD_31, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_32", (long) SDLK_WORLD_32, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_33", (long) SDLK_WORLD_33, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_34", (long) SDLK_WORLD_34, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_35", (long) SDLK_WORLD_35, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_36", (long) SDLK_WORLD_36, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_37", (long) SDLK_WORLD_37, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_38", (long) SDLK_WORLD_38, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_39", (long) SDLK_WORLD_39, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_40", (long) SDLK_WORLD_40, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_41", (long) SDLK_WORLD_41, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_42", (long) SDLK_WORLD_42, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_43", (long) SDLK_WORLD_43, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_44", (long) SDLK_WORLD_44, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_45", (long) SDLK_WORLD_45, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_46", (long) SDLK_WORLD_46, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_47", (long) SDLK_WORLD_47, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_48", (long) SDLK_WORLD_48, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_49", (long) SDLK_WORLD_49, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_50", (long) SDLK_WORLD_50, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_51", (long) SDLK_WORLD_51, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_52", (long) SDLK_WORLD_52, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_53", (long) SDLK_WORLD_53, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_54", (long) SDLK_WORLD_54, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_55", (long) SDLK_WORLD_55, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_56", (long) SDLK_WORLD_56, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_57", (long) SDLK_WORLD_57, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_58", (long) SDLK_WORLD_58, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_59", (long) SDLK_WORLD_59, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_60", (long) SDLK_WORLD_60, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_61", (long) SDLK_WORLD_61, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_62", (long) SDLK_WORLD_62, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_63", (long) SDLK_WORLD_63, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_64", (long) SDLK_WORLD_64, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_65", (long) SDLK_WORLD_65, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_66", (long) SDLK_WORLD_66, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_67", (long) SDLK_WORLD_67, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_68", (long) SDLK_WORLD_68, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_69", (long) SDLK_WORLD_69, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_70", (long) SDLK_WORLD_70, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_71", (long) SDLK_WORLD_71, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_72", (long) SDLK_WORLD_72, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_73", (long) SDLK_WORLD_73, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_74", (long) SDLK_WORLD_74, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_75", (long) SDLK_WORLD_75, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_76", (long) SDLK_WORLD_76, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_77", (long) SDLK_WORLD_77, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_78", (long) SDLK_WORLD_78, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_79", (long) SDLK_WORLD_79, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_80", (long) SDLK_WORLD_80, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_81", (long) SDLK_WORLD_81, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_82", (long) SDLK_WORLD_82, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_83", (long) SDLK_WORLD_83, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_84", (long) SDLK_WORLD_84, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_85", (long) SDLK_WORLD_85, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_86", (long) SDLK_WORLD_86, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_87", (long) SDLK_WORLD_87, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_88", (long) SDLK_WORLD_88, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_89", (long) SDLK_WORLD_89, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_90", (long) SDLK_WORLD_90, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_91", (long) SDLK_WORLD_91, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_92", (long) SDLK_WORLD_92, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_93", (long) SDLK_WORLD_93, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_94", (long) SDLK_WORLD_94, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_WORLD_95", (long) SDLK_WORLD_95, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP0", (long) SDLK_KP0, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP1", (long) SDLK_KP1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP2", (long) SDLK_KP2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP3", (long) SDLK_KP3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP4", (long) SDLK_KP4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP5", (long) SDLK_KP5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP6", (long) SDLK_KP6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP7", (long) SDLK_KP7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP8", (long) SDLK_KP8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP9", (long) SDLK_KP9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_PERIOD", (long) SDLK_KP_PERIOD, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_DIVIDE", (long) SDLK_KP_DIVIDE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_MULTIPLY", (long) SDLK_KP_MULTIPLY, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_MINUS", (long) SDLK_KP_MINUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_PLUS", (long) SDLK_KP_PLUS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_ENTER", (long) SDLK_KP_ENTER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_KP_EQUALS", (long) SDLK_KP_EQUALS, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_UP", (long) SDLK_UP, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_DOWN", (long) SDLK_DOWN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RIGHT", (long) SDLK_RIGHT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LEFT", (long) SDLK_LEFT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_INSERT", (long) SDLK_INSERT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_HOME", (long) SDLK_HOME, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_END", (long) SDLK_END, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PAGEUP", (long) SDLK_PAGEUP, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PAGEDOWN", (long) SDLK_PAGEDOWN, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F1", (long) SDLK_F1, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F2", (long) SDLK_F2, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F3", (long) SDLK_F3, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F4", (long) SDLK_F4, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F5", (long) SDLK_F5, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F6", (long) SDLK_F6, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F7", (long) SDLK_F7, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F8", (long) SDLK_F8, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F9", (long) SDLK_F9, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F10", (long) SDLK_F10, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F11", (long) SDLK_F11, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F12", (long) SDLK_F12, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F13", (long) SDLK_F13, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F14", (long) SDLK_F14, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_F15", (long) SDLK_F15, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_NUMLOCK", (long) SDLK_NUMLOCK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_CAPSLOCK", (long) SDLK_CAPSLOCK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SCROLLOCK", (long) SDLK_SCROLLOCK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RSHIFT", (long) SDLK_RSHIFT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LSHIFT", (long) SDLK_LSHIFT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RCTRL", (long) SDLK_RCTRL, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LCTRL", (long) SDLK_LCTRL, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RALT", (long) SDLK_RALT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LALT", (long) SDLK_LALT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RMETA", (long) SDLK_RMETA, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LMETA", (long) SDLK_LMETA, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LSUPER", (long) SDLK_LSUPER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_RSUPER", (long) SDLK_RSUPER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_MODE", (long) SDLK_MODE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_COMPOSE", (long) SDLK_COMPOSE, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_HELP", (long) SDLK_HELP, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_PRINT", (long) SDLK_PRINT, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_SYSREQ", (long) SDLK_SYSREQ, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_BREAK", (long) SDLK_BREAK, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_MENU", (long) SDLK_MENU, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_POWER", (long) SDLK_POWER, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_EURO", (long) SDLK_EURO, 0, 0, 0},
    { SWIG_PY_INT,     "SDLK_LAST", (long) SDLK_LAST, 0, 0, 0},
{0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initinputc(void) {
    PyObject *m, *d;
    int i;
    SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule("inputc", inputcMethods);
    d = PyModule_GetDict(m);
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
    PyDict_SetItemString(d,"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,"input_last_key",_wrap_input__last_key_get, _wrap_input__last_key_set);
    SWIG_InstallConstants(d,swig_const_table);
}

