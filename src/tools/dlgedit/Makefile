# This file was automatically generated by makemake.
# Do not edit it directly!
# Any changes you make will be silently overwritten.

# Edit this file to define constants and custom build targets.
# Please refer to the makemake documentation for more information.
#
# To compile multiple versions of a program or library, please study
#     http://www.its.caltech.edu/~jafl/jcc/multi_version.html

# Useful directories

MYCODEDIR := .

# Directories to search for header files

SEARCHDIRS := -I- -I${MYCODEDIR}

# makemake variables

DEPENDFLAGS := -g -Wall -Werror -D_DEBUG_ -D_DLGEDIT_ `gtk-config --cflags`

# C preprocessor (C, C++, FORTRAN)

CPPFLAGS =

# C compiler

CC     := g++
CFLAGS  = ${DEPENDFLAGS}

%.o : %.c
	${CC} ${CPPFLAGS} ${CFLAGS} -c $< -o $@

# C++ compiler

CXX      := g++
CXXFLAGS  = ${DEPENDFLAGS}

%.o : %.cc
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c $< -o $@

%.o : %.C
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c $< -o $@

%.o : %.cpp
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c $< -o $@

%.o : %.cxx
	${CXX} ${CPPFLAGS} ${CXXFLAGS} -c $< -o $@

# linker

LINKER    := gcc
LDFLAGS    =
LOADLIBES := -lm -lstdc++ `gtk-config --libs`


OBJECTS := ./callbacks.o ../../commands.o ./circle.o ./compile.o ./cond.tab.o ./crcle_callbacks.o ./crcle_interface.o ./create_code.o ./dlgnode.o ./events.o ../../generic_cmds.o ./geometrie.o ./graph.o ./interface.o ../../interpreter.o  ../../dialog_cmds.o ./lex.cond.o ./lex.loadlg.o ./lex.vars.o ./main.o ./pjt_interface.o ./pjt_callbacks.o ./preset.o ./project.o ./pset_callbacks.o ./pset_interface.o ./run.o ./run_callbacks.o ./run_interface.o ../../storage.o ./vars.tab.o ../../yarg.o

# dlgedit

dlgedit : ${OBJECTS}
	${LINKER} ${LDFLAGS} -o $@ ${filter-out %.a %.so, $^} ${LOADLIBES}

# target for making everything

.PHONY : all
all: parser dlgedit


parser :
	flex -olex.loadlg.cc loadlg.l
	flex -olex.vars.cc variable.l
	bison -d -p vars -o vars.tab.c variable.y
	mv vars.tab.c vars.tab.cc
	flex -olex.cond.cc condition.l
	bison -d -p cond -o cond.tab.c condition.y
	mv cond.tab.c cond.tab.cc

# target for removing all object files

.PHONY : tidy
tidy::
	@${RM} core ${OBJECTS} *~

# target for removing all object files

.PHONY : clean
clean:: tidy
	@${RM} dlgedit

# list of all source files

MM_ALL_SOURCES := ./callbacks.cc ./compile.cc ./dlgrun.cc ./events.cc ./function.cc ./geometrie.cc ./graph.cc ./interface.cc ./main.cc


# target for checking a source file

CHECKSYNTAXFILE := ${basename ${filter %${CHECKSTRING}, ${MM_ALL_SOURCES}}}

.PHONY : checksyntax
checksyntax:
  ifneq (${CHECKSYNTAXFILE},)
	@${MAKE} ${addsuffix .o, ${CHECKSYNTAXFILE}}
  else
	@echo No target to make ${CHECKSTRING}
  endif


# target for touching appropriate source files

.PHONY : touch
touch::
	@list=$$(grep -l ${TOUCHSTRING} ${MM_ALL_SOURCES}); \
     for file in $$list; do { echo $$file; touch $$file; } done


