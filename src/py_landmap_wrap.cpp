/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3u-20001216-1131 (Alpha 5)
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON
/***********************************************************************
 * common.swg
 *
 *     This file contains generic SWIG runtime support for pointer
 *     type checking as well as a few commonly used macros to control
 *     external linkage.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 *
 * Copyright (c) 1999-2000, The University of Chicago
 * 
 * This file may be freely redistributed without license or fee provided
 * this copyright message remains intact.
 ************************************************************************/

#include <string.h>

#if defined(_WIN32) || defined(__WIN32__)
#       if defined(_MSC_VER)
#               if defined(STATIC_LINKED)
#                       define SWIGEXPORT(a) a
#               else
#                       define SWIGEXPORT(a) __declspec(dllexport) a
#               endif
#       else
#               if defined(__BORLANDC__)
#                       define SWIGEXPORT(a) a _export
#               else
#                       define SWIGEXPORT(a) a
#       endif
#endif
#else
#       define SWIGEXPORT(a) a
#endif

#ifdef SWIG_GLOBAL
#define SWIGRUNTIME(a) SWIGEXPORT(a)
#else
#define SWIGRUNTIME(a) static a
#endif

#ifdef __cplusplus
extern "C" {
#endif

typedef struct swig_type_info {
  char  *name;                 
  void *(*converter)(void *);
  char  *str;
  struct swig_type_info  *next;
  struct swig_type_info  *prev;
} swig_type_info;

#ifdef SWIG_NOINCLUDE
SWIGEXPORT(swig_type_info *) SWIG_TypeRegister(swig_type_info *);
SWIGEXPORT(swig_type_info *) SWIG_TypeCheck(char *c, swig_type_info *);
SWIGEXPORT(void *) SWIG_TypeCast(swig_type_info *, void *);
#else

static swig_type_info *swig_type_list = 0;

/* Register a type mapping with the type-checking */
SWIGRUNTIME(swig_type_info *)
SWIG_TypeRegister(swig_type_info *ti)
{
  swig_type_info *tc, *head, *ret, *next;
  /* Check to see if this type has already been registered */
  tc = swig_type_list;
  while (tc) {
    if (strcmp(tc->name, ti->name) == 0) {
      /* Already exists in the table.  Just add additional types to the list */
      head = tc;
      next = tc->next;
      goto l1;
    }
    tc = tc->prev;
  }
  head = ti;
  next = 0;

  /* Place in list */
  ti->prev = swig_type_list;
  swig_type_list = ti;

  /* Build linked lists */
 l1:
  ret = head;
  tc = ti + 1;
  /* Patch up the rest of the links */
  while (tc->name) {
    head->next = tc;
    tc->prev = head;
    head = tc;
    tc++;
  }
  head->next = next;
  return ret;
}

/* Check the typename */
SWIGRUNTIME(swig_type_info *) 
SWIG_TypeCheck(char *c, swig_type_info *ty)
{
  swig_type_info *s;
  if (!ty) return 0;        /* Void pointer */
  s = ty->next;             /* First element always just a name */
  while (s) {
    if (strcmp(s->name,c) == 0) {
      if (s == ty->next) return s;
      /* Move s to the top of the linked list */
      s->prev->next = s->next;
      if (s->next) {
	s->next->prev = s->prev;
      }
      /* Insert s as second element in the list */
      s->next = ty->next;
      if (ty->next) ty->next->prev = s;
      ty->next = s;
      return s;
    }
    s = s->next;
  }
  return 0;
}

/* Cast a pointer (needed for C++ inheritance */
SWIGRUNTIME(void *) 
SWIG_TypeCast(swig_type_info *ty, void *ptr) 
{
  if ((!ty) || (!ty->converter)) return ptr;
  return (*ty->converter)(ptr);
}

/* Search for a swig_type_info structure */
SWIGRUNTIME(void *)
SWIG_TypeQuery(const char *name) {
  swig_type_info *ty = swig_type_list;
  while (ty) {
    if (ty->str && (strcmp(name,ty->str) == 0)) return ty;
    if (ty->name && (strcmp(name,ty->name) == 0)) return ty;
    ty = ty->prev;
  }
  return 0;
}

#endif

#ifdef __cplusplus
}
#endif



/***********************************************************************
 * python.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

#include <stdlib.h>
#include "Python.h"

#ifdef __cplusplus
extern "C" {
#endif

#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;

#ifdef SWIG_NOINCLUDE

SWIGEXPORT(PyObject *)        SWIG_newvarlink();
SWIGEXPORT(void)              SWIG_addvarlink(PyObject *, char *, PyObject *(*)(void), int (*)(PyObject *));
SWIGEXPORT(int)               SWIG_ConvertPtr(PyObject *, void **, swig_type_info *, int);
SWIGEXPORT(void)              SWIG_MakePtr(char *c, void *, swig_type_info *);
SWIGEXPORT(PyObject *)        SWIG_NewPointerObj(void *, swig_type_info *);
SWIGEXPORT(void)              SWIG_InstallConstants(PyObject *d, swig_const_info constants[]);

#else

/* -----------------------------------------------------------------------------
 * global variable support code.
 * ----------------------------------------------------------------------------- */

typedef struct swig_globalvar {   
  char       *name;                  /* Name of global variable */
  PyObject *(*get_attr)(void);       /* Return the current value */
  int       (*set_attr)(PyObject *); /* Set the value */
  struct swig_globalvar *next;
} swig_globalvar;

typedef struct swig_varlinkobject {
  PyObject_HEAD
  swig_globalvar *vars;
} swig_varlinkobject;

static PyObject *
swig_varlink_repr(swig_varlinkobject *v) {
  v = v;
  return PyString_FromString("<Global variables>");
}

static int
swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
  swig_globalvar  *var;
  flags = flags;
  fprintf(fp,"Global variables { ");
  for (var = v->vars; var; var=var->next) {
    fprintf(fp,"%s", var->name);
    if (var->next) fprintf(fp,", ");
  }
  fprintf(fp," }\n");
  return 0;
}

static PyObject *
swig_varlink_getattr(swig_varlinkobject *v, char *n) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->get_attr)();
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return NULL;
}

static int
swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
  swig_globalvar *var = v->vars;
  while (var) {
    if (strcmp(var->name,n) == 0) {
      return (*var->set_attr)(p);
    }
    var = var->next;
  }
  PyErr_SetString(PyExc_NameError,"Unknown C global variable");
  return 1;
}

statichere PyTypeObject varlinktype = {
  PyObject_HEAD_INIT(0)              
  0,
  "swigvarlink",                      /* Type name    */
  sizeof(swig_varlinkobject),         /* Basic size   */
  0,                                  /* Itemsize     */
  0,                                  /* Deallocator  */ 
  (printfunc) swig_varlink_print,     /* Print        */
  (getattrfunc) swig_varlink_getattr, /* get attr     */
  (setattrfunc) swig_varlink_setattr, /* Set attr     */
  0,                                  /* tp_compare   */
  (reprfunc) swig_varlink_repr,       /* tp_repr      */    
  0,                                  /* tp_as_number */
  0,                                  /* tp_as_mapping*/
  0,                                  /* tp_hash      */
};

/* Create a variable linking object for use later */
SWIGRUNTIME(PyObject *)
SWIG_newvarlink(void) {
  swig_varlinkobject *result = 0;
  result = PyMem_NEW(swig_varlinkobject,1);
  varlinktype.ob_type = &PyType_Type;    /* Patch varlinktype into a PyType */
  result->ob_type = &varlinktype;
  result->vars = 0;
  result->ob_refcnt = 0;
  Py_XINCREF((PyObject *) result);
  return ((PyObject*) result);
}

SWIGRUNTIME(void)
SWIG_addvarlink(PyObject *p, char *name,
	   PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
  swig_varlinkobject *v;
  swig_globalvar *gv;
  v= (swig_varlinkobject *) p;
  gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
  gv->name = (char *) malloc(strlen(name)+1);
  strcpy(gv->name,name);
  gv->get_attr = get_attr;
  gv->set_attr = set_attr;
  gv->next = v->vars;
  v->vars = gv;
}
/* Convert a pointer value */
SWIGRUNTIME(int)
SWIG_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  unsigned long p;
  register int d;
  swig_type_info *tc;
  char  *c;
  static PyObject *SWIG_this = 0;
  int    newref = 0;

  if (!obj || (obj == Py_None)) {
    *ptr = 0;
    return 0;
  }
#ifdef SWIG_COBJECT_TYPES
  if (!(PyCObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyCObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  *ptr = PyCObject_AsVoidPtr(obj);
  c = (char *) PyCObject_GetDesc(obj);
  if (newref) Py_DECREF(obj);
  goto cobject;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_InternFromString("this");
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AsString(obj);
  p = 0;
  /* Pointer values must start with leading underscore */
  if (*c != '_') {
    *ptr = (void *) 0;
    if (strcmp(c,"NULL") == 0) {
      if (newref) Py_DECREF(obj);
      return 0;
    } else {
      if (newref) Py_DECREF(obj);
      goto type_error;
    }
  }
  c++;
  /* Extract hex value from pointer */
  while ((d = *c)) {
    if ((d >= '0') && (d <= '9'))
      p = (p << 4) + (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      p = (p << 4) + (d - ('a'-10));
    else
      break; 
    c++;
  }
  *ptr = (void *) p;
  if (newref) Py_DECREF(obj);
#endif

#ifdef SWIG_COBJECT_TYPES
cobject:
#endif

  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,(void*)p);
  }
  return 0;

type_error:

  if (flags) {
    if (ty) {
      char *temp = (char *) malloc(64+strlen(ty->name));
      sprintf(temp,"Type error. Expected %s", ty->name);
      PyErr_SetString(PyExc_TypeError, temp);
      free((char *) temp);
    } else {
      PyErr_SetString(PyExc_TypeError,"Expected a pointer");
    }
  }
  return -1;
}

/* Take a pointer and convert it to a string */
SWIGRUNTIME(void) 
SWIG_MakePtr(char *c, void *ptr, swig_type_info *ty) {
  static char hex[17] = "0123456789abcdef";
  unsigned long p, s;
  char result[32], *r; 
  r = result;
  p = (unsigned long) ptr;
  if (p > 0) {
    while (p > 0) {
      s = p & 0xf;
      *(r++) = hex[s];
      p = p >> 4;
    }
    *r = '_';
    while (r >= result)
      *(c++) = *(r--);
    strcpy (c, ty->name);
  } else {
    strcpy (c, "NULL");
  }
}

/* Create a new pointer object */
SWIGRUNTIME(PyObject *)
SWIG_NewPointerObj(void *ptr, swig_type_info *type) {
  char result[512];
  PyObject *robj;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PyCObject_FromVoidPtrAndDesc((void *) ptr, type->name, NULL);
#else
  SWIG_MakePtr(result,ptr,type);
  robj = PyString_FromString(result);
#endif
  return robj;
}

/* Install Constants */
SWIGRUNTIME(void)
SWIG_InstallConstants(PyObject *d, swig_const_info constants[]) {
  int i;
  PyObject *obj;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_PY_INT:
      obj = PyInt_FromLong(constants[i].lvalue);
      break;
    case SWIG_PY_FLOAT:
      obj = PyFloat_FromDouble(constants[i].dvalue);
      break;
    case SWIG_PY_STRING:
      obj = PyString_FromString((char *) constants[i].pvalue);
      break;
    case SWIG_PY_POINTER:
      obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype);
      break;
    default:
      obj = 0;
      break;
    }
    if (obj) {
      PyDict_SetItemString(d,constants[i].name,obj);
      Py_DECREF(obj);
    }
  }
}

#endif

#ifdef __cplusplus
}
#endif



/* -------- TYPES TABLE (BEGIN) -------- */

#define  SWIGTYPE_p_drawing_area swig_types[0] 
#define  SWIGTYPE_p_time_event swig_types[1] 
#define  SWIGTYPE_p_leave_event swig_types[2] 
#define  SWIGTYPE_p_landmap swig_types[3] 
#define  SWIGTYPE_p_player swig_types[4] 
#define  SWIGTYPE_p_vector_event__ swig_types[5] 
#define  SWIGTYPE_p_event_handler swig_types[6] 
#define  SWIGTYPE_p_gzFile swig_types[7] 
#define  SWIGTYPE_p_event_list swig_types[8] 
#define  SWIGTYPE_p_mapview swig_types[9] 
#define  SWIGTYPE_p_enter_event swig_types[10] 
#define  SWIGTYPE_p_base_map_event swig_types[11] 
#define  SWIGTYPE_p_event swig_types[12] 
#define  SWIGTYPE_p_npc swig_types[13] 
#define  SWIGTYPE_p_character swig_types[14] 
#define  SWIGTYPE_p_mapcharacter swig_types[15] 
static swig_type_info *swig_types[17];

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= landmapc.so
  ------------------------------------------------*/
#define SWIG_init    initlandmapc

#define SWIG_name    "landmapc"


#include "character.h"
#include "landmap.h"
#include "mapview.h"

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_event_script_file_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:event_script_file_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    arg0->script_file = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_script_file_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:event_script_file_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    result = (char *) (arg0->script_file);
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_event_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:event_save",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    arg0->save(*arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:base_map_event_save",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    arg0->save(*arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_submap_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    long arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ol:base_map_event_submap_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->submap = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_submap_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    long result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_submap_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (long ) (arg0->submap);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_x_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    long arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ol:base_map_event_x_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->x = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_x_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    long result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_x_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (long ) (arg0->x);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_y_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    long arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ol:base_map_event_y_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->y = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_y_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    long result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_y_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (long ) (arg0->y);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_dir_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    signed char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:base_map_event_dir_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->dir = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_dir_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_dir_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (signed char ) (arg0->dir);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_map_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    long arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ol:base_map_event_map_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    arg0->map = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_map_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    long result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_map_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (long ) (arg0->map);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_base_map_event_c_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    mapcharacter *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:base_map_event_c_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->c = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_base_map_event_c_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"O:base_map_event_c_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    result = (mapcharacter *) (arg0->c);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_new_base_map_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_base_map_event")) return NULL;
    result = (base_map_event *)new base_map_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_base_map_event);
    return resultobj;
}


static PyObject *_wrap_delete_base_map_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    base_map_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_base_map_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_base_map_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_enter_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    enter_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_enter_event")) return NULL;
    result = (enter_event *)new enter_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_enter_event);
    return resultobj;
}


static PyObject *_wrap_delete_enter_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    enter_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_enter_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_enter_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_leave_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    leave_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_leave_event")) return NULL;
    result = (leave_event *)new leave_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_leave_event);
    return resultobj;
}


static PyObject *_wrap_delete_leave_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    leave_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_leave_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_leave_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_time_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *result ;
    
    if(!PyArg_ParseTuple(args,":new_time_event")) return NULL;
    result = (time_event *)new time_event();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_time_event);
    return resultobj;
}


static PyObject *_wrap_time_event_save(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:time_event_save",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    arg0->save(*arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_minute_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_minute_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->minute = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_minute_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_minute_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->minute);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_m_step_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_m_step_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->m_step = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_m_step_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_m_step_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->m_step);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_hour_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_hour_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->hour = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_hour_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_hour_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->hour);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_h_step_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_h_step_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->h_step = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_h_step_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_h_step_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->h_step);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_day_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_day_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->day = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_day_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_day_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->day);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_d_step_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned char arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ob:time_event_d_step_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->d_step = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_d_step_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned char result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_d_step_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned char ) (arg0->d_step);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_time_event_time_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    unsigned long arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ol:time_event_time_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    arg0->time = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_time_event_time_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    unsigned long result ;
    
    if(!PyArg_ParseTuple(args,"O:time_event_time_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    result = (unsigned long ) (arg0->time);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_delete_time_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    time_event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_time_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_time_event,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_event_list(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_event_list",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_add_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    event *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:event_list_add_event",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_event,1)) == -1) return NULL;
    arg0->add_event(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_add_map_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    char *arg1 ;
    unsigned short arg2 ;
    long arg3 = -1 ;
    long arg4 = -1 ;
    long arg5 = -1 ;
    short arg6 = -1 ;
    mapcharacter *arg7 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo7 =0 ;
    
    if(!PyArg_ParseTuple(args,"Osh|lllhO:event_list_add_map_event",&argo0,&arg1,&arg2,&arg3,&arg4,&arg5,&arg6,&argo7)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo7,(void **) &arg7,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->add_map_event(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_events_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    vector<event*> *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:event_list_events_set",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_vector_event__,1)) == -1) return NULL;
    arg0->events = *arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_list_events_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *arg0 ;
    PyObject * argo0 =0 ;
    vector<event*> *result ;
    
    if(!PyArg_ParseTuple(args,"O:event_list_events_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_list,1)) == -1) return NULL;
    result = (vector<event*> *)& (arg0->events);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_vector_event__);
    return resultobj;
}


static PyObject *_wrap_new_event_list(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_list *result ;
    
    if(!PyArg_ParseTuple(args,":new_event_list")) return NULL;
    result = (event_list *)new event_list();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_event_list);
    return resultobj;
}


static PyObject *_wrap_event_handler_register_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:event_handler_register_event",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    event_handler::register_event(arg0,arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_handler_remove_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:event_handler_remove_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    event_handler::remove_event(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_event_handler_raise_event(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:event_handler_raise_event",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event,1)) == -1) return NULL;
    event_handler::raise_event(arg0);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_event_handler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_handler *result ;
    
    if(!PyArg_ParseTuple(args,":new_event_handler")) return NULL;
    result = (event_handler *)new event_handler();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_event_handler);
    return resultobj;
}


static PyObject *_wrap_delete_event_handler(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    event_handler *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_event_handler",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_event_handler,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    character *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_character",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (character *)arg0->get_character();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_character);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_npc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    npc *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_npc",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (npc *)arg0->get_npc();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_npc);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_init",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapcharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapcharacter")) return NULL;
    result = (mapcharacter *)new mapcharacter();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_delete_mapcharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapcharacter",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:mapcharacter_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_submap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_submap();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_posx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_posx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_posy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_posy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_offx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_offx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (signed char )arg0->get_offx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_get_offy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_get_offy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (signed char )arg0->get_offy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_on_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    landmap *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_set_on_map",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->set_on_map(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_remove_from_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_remove_from_map",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->remove_from_map();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhh:mapcharacter_set_pos",&argo0,&arg1,&arg2,&arg3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_pos(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_offset(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    signed char arg1 ;
    signed char arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Obb:mapcharacter_set_offset",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_offset(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_jump(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 = 65535 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhh|h:mapcharacter_jump",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->jump(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_move",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (unsigned short )arg0->move();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapcharacter_set_schedule",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_schedule(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_is_schedule_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_is_schedule_activated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->is_schedule_activated();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_schedule_active(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapcharacter_set_schedule_active",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_schedule_active(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapcharacter_set_action",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->set_action(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_is_action_activated(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_is_action_activated",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->is_action_activated();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_set_action_active(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    bool arg1 ;
    PyObject * argo0 =0 ;
    int tempbool1 ;
    
    if(!PyArg_ParseTuple(args,"Oi:mapcharacter_set_action_active",&argo0,&tempbool1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg1 = (bool ) tempbool1;
    arg0->set_action_active(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_update_move(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_update_move",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->update_move();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_launch_action(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    mapcharacter *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_launch_action",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->launch_action(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    mapview *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapcharacter_draw",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->draw(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_north();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_south();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_east();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_can_go_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_can_go_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (bool )arg0->can_go_west();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_north();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_south();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_east();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_stand_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_stand_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->stand_west();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_north(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_north",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_north();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_south(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_south",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_south();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_east(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_east",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_east();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_go_west(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_go_west",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->go_west();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_look_invert(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:mapcharacter_look_invert",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->look_invert(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapcharacter_whosnext(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapcharacter *arg0 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"O:mapcharacter_whosnext",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    result = (mapcharacter *)arg0->whosnext();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_character_name_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:character_name_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character,1)) == -1) return NULL;
    arg0->name = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_character_name_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:character_name_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character,1)) == -1) return NULL;
    result = (char *) (arg0->name);
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_character_color_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg0 ;
    unsigned long arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ol:character_color_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character,1)) == -1) return NULL;
    arg0->color = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_character_color_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg0 ;
    PyObject * argo0 =0 ;
    unsigned long result ;
    
    if(!PyArg_ParseTuple(args,"O:character_color_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character,1)) == -1) return NULL;
    result = (unsigned long ) (arg0->color);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *result ;
    
    if(!PyArg_ParseTuple(args,":new_character")) return NULL;
    result = (character *)new character();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_character);
    return resultobj;
}


static PyObject *_wrap_delete_character(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    character *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_character",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_character,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_npc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    npc *result ;
    
    if(!PyArg_ParseTuple(args,":new_npc")) return NULL;
    result = (npc *)new npc();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_npc);
    return resultobj;
}


static PyObject *_wrap_delete_npc(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    npc *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_npc",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_npc,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_npc_set_dialogue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    npc *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:npc_set_dialogue",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_npc,1)) == -1) return NULL;
    arg0->set_dialogue(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_npc_get_dialogue(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    npc *arg0 ;
    PyObject * argo0 =0 ;
    char *result ;
    
    if(!PyArg_ParseTuple(args,"O:npc_get_dialogue",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_npc,1)) == -1) return NULL;
    result = (char *)arg0->get_dialogue();
    resultobj = PyString_FromString(result);
    return resultobj;
}


static PyObject *_wrap_new_player(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    player *result ;
    
    if(!PyArg_ParseTuple(args,":new_player")) return NULL;
    result = (player *)new player();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_player);
    return resultobj;
}


static PyObject *_wrap_delete_player(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    player *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_player",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_player,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_patterns_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_nbr_of_patterns_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->nbr_of_patterns = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_patterns_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_nbr_of_patterns_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short ) (arg0->nbr_of_patterns);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_submaps_set(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_nbr_of_submaps_set",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->nbr_of_submaps = arg1;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_nbr_of_submaps_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_nbr_of_submaps_get",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short ) (arg0->nbr_of_submaps);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_new_landmap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *result ;
    
    if(!PyArg_ParseTuple(args,":new_landmap")) return NULL;
    result = (landmap *)new landmap();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_landmap);
    return resultobj;
}


static PyObject *_wrap_landmap_clear(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_clear",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->clear();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_delete_landmap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_landmap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_get_mapview(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    mapview *result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_get_mapview",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (mapview *)arg0->get_mapview();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapview);
    return resultobj;
}


static PyObject *_wrap_landmap_get_nbr_of_patterns(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_get_nbr_of_patterns",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_nbr_of_patterns();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_get_nbr_of_submaps(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_get_nbr_of_submaps",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_nbr_of_submaps();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_get(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    gzFile *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"OO:landmap_get",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_gzFile,1)) == -1) return NULL;
    result = (signed char )arg0->get(*arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_load(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Os:landmap_load",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (signed char )arg0->load((char const *)arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_put_mapchar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    mapcharacter *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhhh:landmap_put_mapchar",&argo0,&argo1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->put_mapchar(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_remove_mapchar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    mapcharacter *arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OOhhh:landmap_remove_mapchar",&argo0,&argo1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->remove_mapchar(arg1,arg2,arg3,arg4);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_add_mapcharacter(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    mapcharacter *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:landmap_add_mapcharacter",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_mapcharacter,1)) == -1) return NULL;
    arg0->add_mapcharacter(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_get_mapchar(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    mapcharacter *result ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_get_mapchar",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (mapcharacter *)arg0->get_mapchar(arg1);
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapcharacter);
    return resultobj;
}


static PyObject *_wrap_landmap_remove_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Oh:landmap_remove_submap",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (signed char )arg0->remove_submap(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_set_square_pattern(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Ohhhh:landmap_set_square_pattern",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    result = (signed char )arg0->set_square_pattern(arg1,arg2,arg3,arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_landmap_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:landmap_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_landmap_draw_square(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    landmap *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    unsigned short arg3 ;
    unsigned short arg4 ;
    unsigned short arg5 ;
    drawing_area *arg6 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo6 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohhhhh|O:landmap_draw_square",&argo0,&arg1,&arg2,&arg3,&arg4,&arg5,&argo6)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo6,(void **) &arg6,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw_square(arg1,arg2,arg3,arg4,arg5,arg6);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_init(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_init",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->init();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_new_mapview(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *result ;
    
    if(!PyArg_ParseTuple(args,":new_mapview")) return NULL;
    result = (mapview *)new mapview();
    resultobj = SWIG_NewPointerObj((void *) result, SWIGTYPE_p_mapview);
    return resultobj;
}


static PyObject *_wrap_delete_mapview(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:delete_mapview",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    delete arg0;
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_attach_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    landmap *arg1 ;
    PyObject * argo0 =0 ;
    PyObject * argo1 =0 ;
    
    if(!PyArg_ParseTuple(args,"OO:mapview_attach_map",&argo0,&argo1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo1,(void **) &arg1,SWIGTYPE_p_landmap,1)) == -1) return NULL;
    arg0->attach_map(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_detach_map(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_detach_map",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->detach_map();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_set_screen_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:mapview_set_screen_pos",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->set_screen_pos(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_set_current_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Oh:mapview_set_current_submap",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (signed char )arg0->set_current_submap(arg1);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_set_pos(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    short arg3 = 0 ;
    short arg4 = 0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Ohh|hh:mapview_set_pos",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (signed char )arg0->set_pos(arg1,arg2,arg3,arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_center_on(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    short arg3 = 0 ;
    short arg4 = 0 ;
    PyObject * argo0 =0 ;
    signed char result ;
    
    if(!PyArg_ParseTuple(args,"Ohh|hh:mapview_center_on",&argo0,&arg1,&arg2,&arg3,&arg4)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (signed char )arg0->center_on(arg1,arg2,arg3,arg4);
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_right",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_right();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_left",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_left();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_up(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_up",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_up();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_can_scroll_down(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    bool result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_can_scroll_down",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (bool )arg0->can_scroll_down();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_right(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_right",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_right();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_left(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_left",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_left();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_down(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_down",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_down();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_scroll_up(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_scroll_up",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->scroll_up();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_get_current_submap(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_get_current_submap",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_current_submap();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_get_posx(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_get_posx",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posx();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_get_posy(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    unsigned short result ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_get_posy",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    result = (unsigned short )arg0->get_posy();
    resultobj = PyInt_FromLong((long)result);
    return resultobj;
}


static PyObject *_wrap_mapview_resize(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh:mapview_resize",&argo0,&arg1,&arg2)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->resize(arg1,arg2);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_set_schedule(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    char *arg1 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"Os:mapview_set_schedule",&argo0,&arg1)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->set_schedule(arg1);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_update(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    PyObject * argo0 =0 ;
    
    if(!PyArg_ParseTuple(args,"O:mapview_update",&argo0)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    arg0->update();
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyObject *_wrap_mapview_draw(PyObject *self, PyObject *args) {
    PyObject *resultobj;
    mapview *arg0 ;
    unsigned short arg1 ;
    unsigned short arg2 ;
    drawing_area *arg3 = NULL ;
    PyObject * argo0 =0 ;
    PyObject * argo3 =0 ;
    
    if(!PyArg_ParseTuple(args,"Ohh|O:mapview_draw",&argo0,&arg1,&arg2,&argo3)) return NULL;
    if ((SWIG_ConvertPtr(argo0,(void **) &arg0,SWIGTYPE_p_mapview,1)) == -1) return NULL;
    if ((SWIG_ConvertPtr(argo3,(void **) &arg3,SWIGTYPE_p_drawing_area,1)) == -1) return NULL;
    arg0->draw(arg1,arg2,arg3);
    Py_INCREF(Py_None);
    resultobj = Py_None;
    return resultobj;
}


static PyMethodDef landmapcMethods[] = {
	 { "event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "event_save", _wrap_event_save, METH_VARARGS },
	 { "delete_event", _wrap_delete_event, METH_VARARGS },
	 { "base_map_event_save", _wrap_base_map_event_save, METH_VARARGS },
	 { "base_map_event_submap_set", _wrap_base_map_event_submap_set, METH_VARARGS },
	 { "base_map_event_submap_get", _wrap_base_map_event_submap_get, METH_VARARGS },
	 { "base_map_event_x_set", _wrap_base_map_event_x_set, METH_VARARGS },
	 { "base_map_event_x_get", _wrap_base_map_event_x_get, METH_VARARGS },
	 { "base_map_event_y_set", _wrap_base_map_event_y_set, METH_VARARGS },
	 { "base_map_event_y_get", _wrap_base_map_event_y_get, METH_VARARGS },
	 { "base_map_event_dir_set", _wrap_base_map_event_dir_set, METH_VARARGS },
	 { "base_map_event_dir_get", _wrap_base_map_event_dir_get, METH_VARARGS },
	 { "base_map_event_map_set", _wrap_base_map_event_map_set, METH_VARARGS },
	 { "base_map_event_map_get", _wrap_base_map_event_map_get, METH_VARARGS },
	 { "base_map_event_c_set", _wrap_base_map_event_c_set, METH_VARARGS },
	 { "base_map_event_c_get", _wrap_base_map_event_c_get, METH_VARARGS },
	 { "new_base_map_event", _wrap_new_base_map_event, METH_VARARGS },
	 { "delete_base_map_event", _wrap_delete_base_map_event, METH_VARARGS },
	 { "base_map_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "base_map_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "new_enter_event", _wrap_new_enter_event, METH_VARARGS },
	 { "delete_enter_event", _wrap_delete_enter_event, METH_VARARGS },
	 { "enter_event_submap_set", _wrap_base_map_event_submap_set, METH_VARARGS },
	 { "enter_event_submap_get", _wrap_base_map_event_submap_get, METH_VARARGS },
	 { "enter_event_x_set", _wrap_base_map_event_x_set, METH_VARARGS },
	 { "enter_event_x_get", _wrap_base_map_event_x_get, METH_VARARGS },
	 { "enter_event_y_set", _wrap_base_map_event_y_set, METH_VARARGS },
	 { "enter_event_y_get", _wrap_base_map_event_y_get, METH_VARARGS },
	 { "enter_event_dir_set", _wrap_base_map_event_dir_set, METH_VARARGS },
	 { "enter_event_dir_get", _wrap_base_map_event_dir_get, METH_VARARGS },
	 { "enter_event_map_set", _wrap_base_map_event_map_set, METH_VARARGS },
	 { "enter_event_map_get", _wrap_base_map_event_map_get, METH_VARARGS },
	 { "enter_event_c_set", _wrap_base_map_event_c_set, METH_VARARGS },
	 { "enter_event_c_get", _wrap_base_map_event_c_get, METH_VARARGS },
	 { "enter_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "enter_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "new_leave_event", _wrap_new_leave_event, METH_VARARGS },
	 { "delete_leave_event", _wrap_delete_leave_event, METH_VARARGS },
	 { "leave_event_submap_set", _wrap_base_map_event_submap_set, METH_VARARGS },
	 { "leave_event_submap_get", _wrap_base_map_event_submap_get, METH_VARARGS },
	 { "leave_event_x_set", _wrap_base_map_event_x_set, METH_VARARGS },
	 { "leave_event_x_get", _wrap_base_map_event_x_get, METH_VARARGS },
	 { "leave_event_y_set", _wrap_base_map_event_y_set, METH_VARARGS },
	 { "leave_event_y_get", _wrap_base_map_event_y_get, METH_VARARGS },
	 { "leave_event_dir_set", _wrap_base_map_event_dir_set, METH_VARARGS },
	 { "leave_event_dir_get", _wrap_base_map_event_dir_get, METH_VARARGS },
	 { "leave_event_map_set", _wrap_base_map_event_map_set, METH_VARARGS },
	 { "leave_event_map_get", _wrap_base_map_event_map_get, METH_VARARGS },
	 { "leave_event_c_set", _wrap_base_map_event_c_set, METH_VARARGS },
	 { "leave_event_c_get", _wrap_base_map_event_c_get, METH_VARARGS },
	 { "leave_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "leave_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "new_time_event", _wrap_new_time_event, METH_VARARGS },
	 { "time_event_save", _wrap_time_event_save, METH_VARARGS },
	 { "time_event_minute_set", _wrap_time_event_minute_set, METH_VARARGS },
	 { "time_event_minute_get", _wrap_time_event_minute_get, METH_VARARGS },
	 { "time_event_m_step_set", _wrap_time_event_m_step_set, METH_VARARGS },
	 { "time_event_m_step_get", _wrap_time_event_m_step_get, METH_VARARGS },
	 { "time_event_hour_set", _wrap_time_event_hour_set, METH_VARARGS },
	 { "time_event_hour_get", _wrap_time_event_hour_get, METH_VARARGS },
	 { "time_event_h_step_set", _wrap_time_event_h_step_set, METH_VARARGS },
	 { "time_event_h_step_get", _wrap_time_event_h_step_get, METH_VARARGS },
	 { "time_event_day_set", _wrap_time_event_day_set, METH_VARARGS },
	 { "time_event_day_get", _wrap_time_event_day_get, METH_VARARGS },
	 { "time_event_d_step_set", _wrap_time_event_d_step_set, METH_VARARGS },
	 { "time_event_d_step_get", _wrap_time_event_d_step_get, METH_VARARGS },
	 { "time_event_time_set", _wrap_time_event_time_set, METH_VARARGS },
	 { "time_event_time_get", _wrap_time_event_time_get, METH_VARARGS },
	 { "delete_time_event", _wrap_delete_time_event, METH_VARARGS },
	 { "time_event_script_file_set", _wrap_event_script_file_set, METH_VARARGS },
	 { "time_event_script_file_get", _wrap_event_script_file_get, METH_VARARGS },
	 { "delete_event_list", _wrap_delete_event_list, METH_VARARGS },
	 { "event_list_add_event", _wrap_event_list_add_event, METH_VARARGS },
	 { "event_list_add_map_event", _wrap_event_list_add_map_event, METH_VARARGS },
	 { "event_list_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "event_list_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "new_event_list", _wrap_new_event_list, METH_VARARGS },
	 { "event_handler_register_event", _wrap_event_handler_register_event, METH_VARARGS },
	 { "event_handler_remove_event", _wrap_event_handler_remove_event, METH_VARARGS },
	 { "event_handler_raise_event", _wrap_event_handler_raise_event, METH_VARARGS },
	 { "new_event_handler", _wrap_new_event_handler, METH_VARARGS },
	 { "delete_event_handler", _wrap_delete_event_handler, METH_VARARGS },
	 { "mapcharacter_get_character", _wrap_mapcharacter_get_character, METH_VARARGS },
	 { "mapcharacter_get_npc", _wrap_mapcharacter_get_npc, METH_VARARGS },
	 { "mapcharacter_init", _wrap_mapcharacter_init, METH_VARARGS },
	 { "mapcharacter_clear", _wrap_mapcharacter_clear, METH_VARARGS },
	 { "new_mapcharacter", _wrap_new_mapcharacter, METH_VARARGS },
	 { "delete_mapcharacter", _wrap_delete_mapcharacter, METH_VARARGS },
	 { "mapcharacter_get", _wrap_mapcharacter_get, METH_VARARGS },
	 { "mapcharacter_load", _wrap_mapcharacter_load, METH_VARARGS },
	 { "mapcharacter_get_submap", _wrap_mapcharacter_get_submap, METH_VARARGS },
	 { "mapcharacter_get_posx", _wrap_mapcharacter_get_posx, METH_VARARGS },
	 { "mapcharacter_get_posy", _wrap_mapcharacter_get_posy, METH_VARARGS },
	 { "mapcharacter_get_offx", _wrap_mapcharacter_get_offx, METH_VARARGS },
	 { "mapcharacter_get_offy", _wrap_mapcharacter_get_offy, METH_VARARGS },
	 { "mapcharacter_set_on_map", _wrap_mapcharacter_set_on_map, METH_VARARGS },
	 { "mapcharacter_remove_from_map", _wrap_mapcharacter_remove_from_map, METH_VARARGS },
	 { "mapcharacter_set_pos", _wrap_mapcharacter_set_pos, METH_VARARGS },
	 { "mapcharacter_set_offset", _wrap_mapcharacter_set_offset, METH_VARARGS },
	 { "mapcharacter_jump", _wrap_mapcharacter_jump, METH_VARARGS },
	 { "mapcharacter_move", _wrap_mapcharacter_move, METH_VARARGS },
	 { "mapcharacter_set_schedule", _wrap_mapcharacter_set_schedule, METH_VARARGS },
	 { "mapcharacter_is_schedule_activated", _wrap_mapcharacter_is_schedule_activated, METH_VARARGS },
	 { "mapcharacter_set_schedule_active", _wrap_mapcharacter_set_schedule_active, METH_VARARGS },
	 { "mapcharacter_set_action", _wrap_mapcharacter_set_action, METH_VARARGS },
	 { "mapcharacter_is_action_activated", _wrap_mapcharacter_is_action_activated, METH_VARARGS },
	 { "mapcharacter_set_action_active", _wrap_mapcharacter_set_action_active, METH_VARARGS },
	 { "mapcharacter_update_move", _wrap_mapcharacter_update_move, METH_VARARGS },
	 { "mapcharacter_update", _wrap_mapcharacter_update, METH_VARARGS },
	 { "mapcharacter_launch_action", _wrap_mapcharacter_launch_action, METH_VARARGS },
	 { "mapcharacter_draw", _wrap_mapcharacter_draw, METH_VARARGS },
	 { "mapcharacter_can_go_north", _wrap_mapcharacter_can_go_north, METH_VARARGS },
	 { "mapcharacter_can_go_south", _wrap_mapcharacter_can_go_south, METH_VARARGS },
	 { "mapcharacter_can_go_east", _wrap_mapcharacter_can_go_east, METH_VARARGS },
	 { "mapcharacter_can_go_west", _wrap_mapcharacter_can_go_west, METH_VARARGS },
	 { "mapcharacter_stand", _wrap_mapcharacter_stand, METH_VARARGS },
	 { "mapcharacter_stand_north", _wrap_mapcharacter_stand_north, METH_VARARGS },
	 { "mapcharacter_stand_south", _wrap_mapcharacter_stand_south, METH_VARARGS },
	 { "mapcharacter_stand_east", _wrap_mapcharacter_stand_east, METH_VARARGS },
	 { "mapcharacter_stand_west", _wrap_mapcharacter_stand_west, METH_VARARGS },
	 { "mapcharacter_go_north", _wrap_mapcharacter_go_north, METH_VARARGS },
	 { "mapcharacter_go_south", _wrap_mapcharacter_go_south, METH_VARARGS },
	 { "mapcharacter_go_east", _wrap_mapcharacter_go_east, METH_VARARGS },
	 { "mapcharacter_go_west", _wrap_mapcharacter_go_west, METH_VARARGS },
	 { "mapcharacter_look_invert", _wrap_mapcharacter_look_invert, METH_VARARGS },
	 { "mapcharacter_whosnext", _wrap_mapcharacter_whosnext, METH_VARARGS },
	 { "mapcharacter_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "mapcharacter_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "character_name_set", _wrap_character_name_set, METH_VARARGS },
	 { "character_name_get", _wrap_character_name_get, METH_VARARGS },
	 { "character_color_set", _wrap_character_color_set, METH_VARARGS },
	 { "character_color_get", _wrap_character_color_get, METH_VARARGS },
	 { "new_character", _wrap_new_character, METH_VARARGS },
	 { "delete_character", _wrap_delete_character, METH_VARARGS },
	 { "character_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "character_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "new_npc", _wrap_new_npc, METH_VARARGS },
	 { "delete_npc", _wrap_delete_npc, METH_VARARGS },
	 { "npc_set_dialogue", _wrap_npc_set_dialogue, METH_VARARGS },
	 { "npc_get_dialogue", _wrap_npc_get_dialogue, METH_VARARGS },
	 { "npc_name_set", _wrap_character_name_set, METH_VARARGS },
	 { "npc_name_get", _wrap_character_name_get, METH_VARARGS },
	 { "npc_color_set", _wrap_character_color_set, METH_VARARGS },
	 { "npc_color_get", _wrap_character_color_get, METH_VARARGS },
	 { "npc_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "npc_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "new_player", _wrap_new_player, METH_VARARGS },
	 { "delete_player", _wrap_delete_player, METH_VARARGS },
	 { "player_name_set", _wrap_character_name_set, METH_VARARGS },
	 { "player_name_get", _wrap_character_name_get, METH_VARARGS },
	 { "player_color_set", _wrap_character_color_set, METH_VARARGS },
	 { "player_color_get", _wrap_character_color_get, METH_VARARGS },
	 { "player_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "player_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "landmap_nbr_of_patterns_set", _wrap_landmap_nbr_of_patterns_set, METH_VARARGS },
	 { "landmap_nbr_of_patterns_get", _wrap_landmap_nbr_of_patterns_get, METH_VARARGS },
	 { "landmap_nbr_of_submaps_set", _wrap_landmap_nbr_of_submaps_set, METH_VARARGS },
	 { "landmap_nbr_of_submaps_get", _wrap_landmap_nbr_of_submaps_get, METH_VARARGS },
	 { "new_landmap", _wrap_new_landmap, METH_VARARGS },
	 { "landmap_clear", _wrap_landmap_clear, METH_VARARGS },
	 { "delete_landmap", _wrap_delete_landmap, METH_VARARGS },
	 { "landmap_get_mapview", _wrap_landmap_get_mapview, METH_VARARGS },
	 { "landmap_get_nbr_of_patterns", _wrap_landmap_get_nbr_of_patterns, METH_VARARGS },
	 { "landmap_get_nbr_of_submaps", _wrap_landmap_get_nbr_of_submaps, METH_VARARGS },
	 { "landmap_get", _wrap_landmap_get, METH_VARARGS },
	 { "landmap_load", _wrap_landmap_load, METH_VARARGS },
	 { "landmap_put_mapchar", _wrap_landmap_put_mapchar, METH_VARARGS },
	 { "landmap_remove_mapchar", _wrap_landmap_remove_mapchar, METH_VARARGS },
	 { "landmap_add_mapcharacter", _wrap_landmap_add_mapcharacter, METH_VARARGS },
	 { "landmap_get_mapchar", _wrap_landmap_get_mapchar, METH_VARARGS },
	 { "landmap_remove_submap", _wrap_landmap_remove_submap, METH_VARARGS },
	 { "landmap_set_square_pattern", _wrap_landmap_set_square_pattern, METH_VARARGS },
	 { "landmap_update", _wrap_landmap_update, METH_VARARGS },
	 { "landmap_draw_square", _wrap_landmap_draw_square, METH_VARARGS },
	 { "landmap_events_set", _wrap_event_list_events_set, METH_VARARGS },
	 { "landmap_events_get", _wrap_event_list_events_get, METH_VARARGS },
	 { "mapview_init", _wrap_mapview_init, METH_VARARGS },
	 { "new_mapview", _wrap_new_mapview, METH_VARARGS },
	 { "delete_mapview", _wrap_delete_mapview, METH_VARARGS },
	 { "mapview_attach_map", _wrap_mapview_attach_map, METH_VARARGS },
	 { "mapview_detach_map", _wrap_mapview_detach_map, METH_VARARGS },
	 { "mapview_set_screen_pos", _wrap_mapview_set_screen_pos, METH_VARARGS },
	 { "mapview_set_current_submap", _wrap_mapview_set_current_submap, METH_VARARGS },
	 { "mapview_set_pos", _wrap_mapview_set_pos, METH_VARARGS },
	 { "mapview_center_on", _wrap_mapview_center_on, METH_VARARGS },
	 { "mapview_can_scroll_right", _wrap_mapview_can_scroll_right, METH_VARARGS },
	 { "mapview_can_scroll_left", _wrap_mapview_can_scroll_left, METH_VARARGS },
	 { "mapview_can_scroll_up", _wrap_mapview_can_scroll_up, METH_VARARGS },
	 { "mapview_can_scroll_down", _wrap_mapview_can_scroll_down, METH_VARARGS },
	 { "mapview_scroll_right", _wrap_mapview_scroll_right, METH_VARARGS },
	 { "mapview_scroll_left", _wrap_mapview_scroll_left, METH_VARARGS },
	 { "mapview_scroll_down", _wrap_mapview_scroll_down, METH_VARARGS },
	 { "mapview_scroll_up", _wrap_mapview_scroll_up, METH_VARARGS },
	 { "mapview_get_current_submap", _wrap_mapview_get_current_submap, METH_VARARGS },
	 { "mapview_get_posx", _wrap_mapview_get_posx, METH_VARARGS },
	 { "mapview_get_posy", _wrap_mapview_get_posy, METH_VARARGS },
	 { "mapview_resize", _wrap_mapview_resize, METH_VARARGS },
	 { "mapview_set_schedule", _wrap_mapview_set_schedule, METH_VARARGS },
	 { "mapview_update", _wrap_mapview_update, METH_VARARGS },
	 { "mapview_draw", _wrap_mapview_draw, METH_VARARGS },
	 { NULL, NULL }
};

#ifdef __cplusplus
}
#endif

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_leave_eventTo_p_event(void *x) {
    return (void *)((event *) ((leave_event *) x));
}
static void *_p_time_eventTo_p_event(void *x) {
    return (void *)((event *) ((time_event *) x));
}
static void *_p_base_map_eventTo_p_event(void *x) {
    return (void *)((event *) ((base_map_event *) x));
}
static void *_p_enter_eventTo_p_event(void *x) {
    return (void *)((event *) ((enter_event *) x));
}
static void *_p_landmapTo_p_event_list(void *x) {
    return (void *)((event_list *) ((landmap *) x));
}
static void *_p_npcTo_p_event_list(void *x) {
    return (void *)((event_list *) ((npc *) x));
}
static void *_p_mapcharacterTo_p_event_list(void *x) {
    return (void *)((event_list *) ((mapcharacter *) x));
}
static void *_p_characterTo_p_event_list(void *x) {
    return (void *)((event_list *) ((character *) x));
}
static void *_p_playerTo_p_event_list(void *x) {
    return (void *)((event_list *) ((player *) x));
}
static void *_p_leave_eventTo_p_base_map_event(void *x) {
    return (void *)((base_map_event *) ((leave_event *) x));
}
static void *_p_enter_eventTo_p_base_map_event(void *x) {
    return (void *)((base_map_event *) ((enter_event *) x));
}
static void *_p_npcTo_p_character(void *x) {
    return (void *)((character *) ((npc *) x));
}
static void *_p_playerTo_p_character(void *x) {
    return (void *)((character *) ((player *) x));
}
static void *_p_npcTo_p_mapcharacter(void *x) {
    return (void *)((mapcharacter *) ((npc *) x));
}
static void *_p_characterTo_p_mapcharacter(void *x) {
    return (void *)((mapcharacter *) ((character *) x));
}
static void *_p_playerTo_p_mapcharacter(void *x) {
    return (void *)((mapcharacter *) ((player *) x));
}
static swig_type_info _swigt__p_drawing_area[] = {{"_p_drawing_area", 0, "drawing_area *"},{"_p_drawing_area"},{0}};
static swig_type_info _swigt__p_time_event[] = {{"_p_time_event", 0, "time_event *"},{"_p_time_event"},{0}};
static swig_type_info _swigt__p_leave_event[] = {{"_p_leave_event", 0, "leave_event *"},{"_p_leave_event"},{0}};
static swig_type_info _swigt__p_landmap[] = {{"_p_landmap", 0, "landmap *"},{"_p_landmap"},{0}};
static swig_type_info _swigt__p_player[] = {{"_p_player", 0, "player *"},{"_p_player"},{0}};
static swig_type_info _swigt__p_vector_event__[] = {{"_p_vector_event__", 0, "vector<event*> *"},{"_p_vector_event__"},{0}};
static swig_type_info _swigt__p_event_handler[] = {{"_p_event_handler", 0, "event_handler *"},{"_p_event_handler"},{0}};
static swig_type_info _swigt__p_gzFile[] = {{"_p_gzFile", 0, "gzFile *"},{"_p_gzFile"},{0}};
static swig_type_info _swigt__p_event_list[] = {{"_p_event_list", 0, "event_list *"},{"_p_npc", _p_npcTo_p_event_list},{"_p_landmap", _p_landmapTo_p_event_list},{"_p_player", _p_playerTo_p_event_list},{"_p_event_list"},{"_p_mapcharacter", _p_mapcharacterTo_p_event_list},{"_p_character", _p_characterTo_p_event_list},{0}};
static swig_type_info _swigt__p_mapview[] = {{"_p_mapview", 0, "mapview *"},{"_p_mapview"},{0}};
static swig_type_info _swigt__p_enter_event[] = {{"_p_enter_event", 0, "enter_event *"},{"_p_enter_event"},{0}};
static swig_type_info _swigt__p_base_map_event[] = {{"_p_base_map_event", 0, "base_map_event *"},{"_p_leave_event", _p_leave_eventTo_p_base_map_event},{"_p_base_map_event"},{"_p_enter_event", _p_enter_eventTo_p_base_map_event},{0}};
static swig_type_info _swigt__p_event[] = {{"_p_event", 0, "event *"},{"_p_time_event", _p_time_eventTo_p_event},{"_p_leave_event", _p_leave_eventTo_p_event},{"_p_event"},{"_p_base_map_event", _p_base_map_eventTo_p_event},{"_p_enter_event", _p_enter_eventTo_p_event},{0}};
static swig_type_info _swigt__p_npc[] = {{"_p_npc", 0, "npc *"},{"_p_npc"},{0}};
static swig_type_info _swigt__p_character[] = {{"_p_character", 0, "character *"},{"_p_npc", _p_npcTo_p_character},{"_p_player", _p_playerTo_p_character},{"_p_character"},{0}};
static swig_type_info _swigt__p_mapcharacter[] = {{"_p_mapcharacter", 0, "mapcharacter *"},{"_p_npc", _p_npcTo_p_mapcharacter},{"_p_player", _p_playerTo_p_mapcharacter},{"_p_mapcharacter"},{"_p_character", _p_characterTo_p_mapcharacter},{0}};

static swig_type_info *swig_types_initial[] = {
_swigt__p_drawing_area, 
_swigt__p_time_event, 
_swigt__p_leave_event, 
_swigt__p_landmap, 
_swigt__p_player, 
_swigt__p_vector_event__, 
_swigt__p_event_handler, 
_swigt__p_gzFile, 
_swigt__p_event_list, 
_swigt__p_mapview, 
_swigt__p_enter_event, 
_swigt__p_base_map_event, 
_swigt__p_event, 
_swigt__p_npc, 
_swigt__p_character, 
_swigt__p_mapcharacter, 
0
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
    { SWIG_PY_INT,     "ENTER_EVENT", (long) ENTER_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "LEAVE_EVENT", (long) LEAVE_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "TIME_EVENT", (long) TIME_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "MAX_EVENT", (long) MAX_EVENT, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_NORTH", (long) 0, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_SOUTH", (long) 1, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_WEST", (long) 2, 0, 0, 0},
    { SWIG_PY_INT,     "STAND_EAST", (long) 3, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_NORTH", (long) 4, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_SOUTH", (long) 5, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_WEST", (long) 6, 0, 0, 0},
    { SWIG_PY_INT,     "WALK_EAST", (long) 7, 0, 0, 0},
    { SWIG_PY_INT,     "NBR_MOVES", (long) 8, 0, 0, 0},
    { SWIG_PY_INT,     "NO_MOVE", (long) 65535, 0, 0, 0},
    { SWIG_PY_INT,     "DWARF", (long) DWARF, 0, 0, 0},
    { SWIG_PY_INT,     "ELF", (long) ELF, 0, 0, 0},
    { SWIG_PY_INT,     "HALFELF", (long) HALFELF, 0, 0, 0},
    { SWIG_PY_INT,     "HUMAN", (long) HUMAN, 0, 0, 0},
    { SWIG_PY_INT,     "FEMALE", (long) FEMALE, 0, 0, 0},
    { SWIG_PY_INT,     "MALE", (long) MALE, 0, 0, 0},
{0}};

static PyObject *SWIG_globals;
#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT(void) initlandmapc(void) {
    PyObject *m, *d;
    int i;
    SWIG_globals = SWIG_newvarlink();
    m = Py_InitModule("landmapc", landmapcMethods);
    d = PyModule_GetDict(m);
    for (i = 0; swig_types_initial[i]; i++) {
        swig_types[i] = SWIG_TypeRegister(swig_types_initial[i]);
    }
    SWIG_InstallConstants(d,swig_const_table);
}

